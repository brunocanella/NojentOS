

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Nov  1 16:57:54 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	smallconst
    45  000600                     __psmallconst:
    46                           	opt stack 0
    47  000600  00                 	db	0
    48  000601  0001               	dw	1
    49  000603  000A               	dw	10
    50  000605  0064               	dw	100
    51  000607  03E8               	dw	1000
    52  000609  2710               	dw	10000
    53  00060B                     __end_of_dpowers:
    54                           	opt stack 0
    55  00060B  0001               	dw	1
    56  00060D  0010               	dw	16
    57  00060F  0100               	dw	256
    58  000611  1000               	dw	4096
    59  000613                     __end_of_hexpowers:
    60                           	opt stack 0
    61  000613  25                 	db	37
    62  000614  32                 	db	50	;'2'
    63  000615  58                 	db	88	;'X'
    64  000616  20                 	db	32
    65  000617  25                 	db	37
    66  000618  32                 	db	50	;'2'
    67  000619  58                 	db	88	;'X'
    68  00061A  20                 	db	32
    69  00061B  25                 	db	37
    70  00061C  32                 	db	50	;'2'
    71  00061D  58                 	db	88	;'X'
    72  00061E  20                 	db	32
    73  00061F  25                 	db	37
    74  000620  32                 	db	50	;'2'
    75  000621  58                 	db	88	;'X'
    76  000622  20                 	db	32
    77  000623  25                 	db	37
    78  000624  32                 	db	50	;'2'
    79  000625  58                 	db	88	;'X'
    80  000626  20                 	db	32
    81  000627  25                 	db	37
    82  000628  32                 	db	50	;'2'
    83  000629  58                 	db	88	;'X'
    84  00062A  20                 	db	32
    85  00062B  25                 	db	37
    86  00062C  32                 	db	50	;'2'
    87  00062D  58                 	db	88	;'X'
    88  00062E  20                 	db	32
    89  00062F  25                 	db	37
    90  000630  32                 	db	50	;'2'
    91  000631  58                 	db	88	;'X'
    92  000632  2C                 	db	44
    93  000633  20                 	db	32
    94  000634  25                 	db	37
    95  000635  32                 	db	50	;'2'
    96  000636  58                 	db	88	;'X'
    97  000637  20                 	db	32
    98  000638  25                 	db	37
    99  000639  32                 	db	50	;'2'
   100  00063A  58                 	db	88	;'X'
   101  00063B  20                 	db	32
   102  00063C  25                 	db	37
   103  00063D  32                 	db	50	;'2'
   104  00063E  58                 	db	88	;'X'
   105  00063F  20                 	db	32
   106  000640  25                 	db	37
   107  000641  32                 	db	50	;'2'
   108  000642  58                 	db	88	;'X'
   109  000643  20                 	db	32
   110  000644  25                 	db	37
   111  000645  32                 	db	50	;'2'
   112  000646  58                 	db	88	;'X'
   113  000647  20                 	db	32
   114  000648  25                 	db	37
   115  000649  32                 	db	50	;'2'
   116  00064A  58                 	db	88	;'X'
   117  00064B  20                 	db	32
   118  00064C  25                 	db	37
   119  00064D  32                 	db	50	;'2'
   120  00064E  58                 	db	88	;'X'
   121  00064F  20                 	db	32
   122  000650  25                 	db	37
   123  000651  32                 	db	50	;'2'
   124  000652  58                 	db	88	;'X'
   125  000653  0A                 	db	10
   126  000654  00                 	db	0
   127  000655  42                 	db	66	;'B'
   128  000656  6C                 	db	108	;'l'
   129  000657  6F                 	db	111	;'o'
   130  000658  63                 	db	99	;'c'
   131  000659  6F                 	db	111	;'o'
   132  00065A  3A                 	db	58	;':'
   133  00065B  20                 	db	32
   134  00065C  25                 	db	37
   135  00065D  58                 	db	88	;'X'
   136  00065E  0A                 	db	10
   137  00065F  73                 	db	115	;'s'
   138  000660  69                 	db	105	;'i'
   139  000661  7A                 	db	122	;'z'
   140  000662  65                 	db	101	;'e'
   141  000663  20                 	db	32
   142  000664  3D                 	db	61	;'='
   143  000665  20                 	db	32
   144  000666  25                 	db	37
   145  000667  64                 	db	100	;'d'
   146  000668  0A                 	db	10
   147  000669  6E                 	db	110	;'n'
   148  00066A  65                 	db	101	;'e'
   149  00066B  78                 	db	120	;'x'
   150  00066C  74                 	db	116	;'t'
   151  00066D  20                 	db	32
   152  00066E  3D                 	db	61	;'='
   153  00066F  20                 	db	32
   154  000670  25                 	db	37
   155  000671  58                 	db	88	;'X'
   156  000672  0A                 	db	10
   157  000673  66                 	db	102	;'f'
   158  000674  72                 	db	114	;'r'
   159  000675  65                 	db	101	;'e'
   160  000676  65                 	db	101	;'e'
   161  000677  20                 	db	32
   162  000678  3D                 	db	61	;'='
   163  000679  20                 	db	32
   164  00067A  25                 	db	37
   165  00067B  64                 	db	100	;'d'
   166  00067C  0A                 	db	10
   167  00067D  0A                 	db	10
   168  00067E  00                 	db	0
   169  00067F  30                 	db	48	;'0'
   170  000680  31                 	db	49	;'1'
   171  000681  32                 	db	50	;'2'
   172  000682  33                 	db	51	;'3'
   173  000683  34                 	db	52	;'4'
   174  000684  35                 	db	53	;'5'
   175  000685  36                 	db	54	;'6'
   176  000686  37                 	db	55	;'7'
   177  000687  38                 	db	56	;'8'
   178  000688  39                 	db	57	;'9'
   179  000689  41                 	db	65	;'A'
   180  00068A  42                 	db	66	;'B'
   181  00068B  43                 	db	67	;'C'
   182  00068C  44                 	db	68	;'D'
   183  00068D  45                 	db	69	;'E'
   184  00068E  46                 	db	70	;'F'
   185  00068F  00                 	db	0
   186                           
   187                           ; #config settings
   188  000690  00                 	db	0	; dummy byte at the end
   189  0000                     
   190                           	psect	nvCOMRAM
   191  000042                     __pnvCOMRAM:
   192                           	opt stack 0
   193  000042                     __timer0_callback:
   194                           	opt stack 0
   195  000042                     	ds	2
   196                           
   197                           	psect	nvBANK0
   198  0000F5                     __pnvBANK0:
   199                           	opt stack 0
   200  0000F5                     __timer0_delay_us:
   201                           	opt stack 0
   202  0000F5                     	ds	2
   203  0000                     _TMR0	set	4054
   204  0000                     _BSR	set	4064
   205  0000                     _INTCON2bits	set	4081
   206  0000                     _INTCONbits	set	4082
   207  0000                     _LATDbits	set	3980
   208  0000                     _OSCCONbits	set	4051
   209  0000                     _OSCTUNEbits	set	3995
   210  0000                     _PORTDbits	set	3971
   211  0000                     _STATUS	set	4056
   212  0000                     _STKPTR	set	4092
   213  0000                     _T0CONbits	set	4053
   214  0000                     _TOSH	set	4094
   215  0000                     _TOSL	set	4093
   216  0000                     _TOSU	set	4095
   217  0000                     _TRISDbits	set	3989
   218  0000                     _WREG	set	4072
   219                           
   220                           	psect	cinit
   221  000CEA                     __pcinit:
   222                           	opt stack 0
   223  000CEA                     start_initialization:
   224                           	opt stack 0
   225  000CEA                     __initialization:
   226                           	opt stack 0
   227                           
   228                           ; Clear objects allocated to BIGRAM (829 bytes)
   229  000CEA  EE01  F00B         	lfsr	0,__pbssBIGRAM
   230  000CEE  EE13 F03D          	lfsr	1,829
   231  000CF2                     clear_0:
   232  000CF2  6AEE               	clrf	postinc0,c
   233  000CF4  50E5               	movf	postdec1,w,c
   234  000CF6  50E1               	movf	fsr1l,w,c
   235  000CF8  E1FC               	bnz	clear_0
   236  000CFA  50E2               	movf	fsr1h,w,c
   237  000CFC  E1FA               	bnz	clear_0
   238                           
   239                           ; Clear objects allocated to BANK0 (104 bytes)
   240  000CFE  EE00  F080         	lfsr	0,__pbssBANK0
   241  000D02  0E68               	movlw	104
   242  000D04                     clear_1:
   243  000D04  6AEE               	clrf	postinc0,c
   244  000D06  06E8               	decf	wreg,f,c
   245  000D08  E1FD               	bnz	clear_1
   246                           
   247                           ; Clear objects allocated to COMRAM (5 bytes)
   248  000D0A  6A41               	clrf	(__pbssCOMRAM+4)& (0+255),c
   249  000D0C  6A40               	clrf	(__pbssCOMRAM+3)& (0+255),c
   250  000D0E  6A3F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   251  000D10  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   252  000D12  6A3D               	clrf	__pbssCOMRAM& (0+255),c
   253  000D14                     end_of_initialization:
   254                           	opt stack 0
   255  000D14                     __end_of__initialization:
   256                           	opt stack 0
   257  000D14  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   258  000D16  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   259  000D18  0E00               	movlw	low (__Lmediumconst shr (0+16))
   260  000D1A  6EF8               	movwf	tblptru,c
   261  000D1C  0100               	movlb	0
   262  000D1E  EF54  F005         	goto	_main	;jump to C main() function
   263                           tblptru	equ	0xFF8
   264                           postinc0	equ	0xFEE
   265                           wreg	equ	0xFE8
   266                           postdec1	equ	0xFE5
   267                           fsr1h	equ	0xFE2
   268                           fsr1l	equ	0xFE1
   269                           
   270                           	psect	bssCOMRAM
   271  00003D                     __pbssCOMRAM:
   272                           	opt stack 0
   273  00003D                     _s_blocks:
   274                           	opt stack 0
   275  00003D                     	ds	2
   276  00003F                     __BSR:
   277                           	opt stack 0
   278  00003F                     	ds	1
   279  000040                     __STATUS:
   280                           	opt stack 0
   281  000040                     	ds	1
   282  000041                     __WREG:
   283                           	opt stack 0
   284  000041                     	ds	1
   285                           tblptru	equ	0xFF8
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           postdec1	equ	0xFE5
   289                           fsr1h	equ	0xFE2
   290                           fsr1l	equ	0xFE1
   291                           
   292                           	psect	bssBANK0
   293  000080                     __pbssBANK0:
   294                           	opt stack 0
   295  000080                     _idle:
   296                           	opt stack 0
   297  000080                     	ds	104
   298                           tblptru	equ	0xFF8
   299                           postinc0	equ	0xFEE
   300                           wreg	equ	0xFE8
   301                           postdec1	equ	0xFE5
   302                           fsr1h	equ	0xFE2
   303                           fsr1l	equ	0xFE1
   304                           
   305                           	psect	bssBIGRAM
   306  00010B                     __pbssBIGRAM:
   307                           	opt stack 0
   308  00010B                     _s_heap:
   309                           	opt stack 0
   310  00010B                     	ds	512
   311  00030B                     _dispatcher:
   312                           	opt stack 0
   313  00030B                     	ds	317
   314                           tblptru	equ	0xFF8
   315                           postinc0	equ	0xFEE
   316                           wreg	equ	0xFE8
   317                           postdec1	equ	0xFE5
   318                           fsr1h	equ	0xFE2
   319                           fsr1l	equ	0xFE1
   320                           
   321                           	psect	cstackBANK1
   322  000100                     __pcstackBANK1:
   323                           	opt stack 0
   324  000100                     task_create@id:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x0
   328  000100                     	ds	2
   329  000102                     task_create@priority:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x2
   333  000102                     	ds	2
   334  000104                     task_create@callback:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x4
   338  000104                     	ds	2
   339  000106                     ??_task_create:
   340                           
   341                           ; 1 bytes @ 0x6
   342  000106                     	ds	3
   343  000109                     task_create@handle:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x9
   347  000109                     	ds	2
   348                           tblptru	equ	0xFF8
   349                           postinc0	equ	0xFEE
   350                           wreg	equ	0xFE8
   351                           postdec1	equ	0xFE5
   352                           fsr1h	equ	0xFE2
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	cstackBANK0
   356  0000E8                     __pcstackBANK0:
   357                           	opt stack 0
   358  0000E8                     task_1@i:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x0
   362  0000E8                     	ds	2
   363  0000EA                     ??_task_2:
   364                           
   365                           ; 1 bytes @ 0x2
   366  0000EA                     	ds	1
   367  0000EB                     task_2@i:
   368                           	opt stack 0
   369                           
   370                           ; 2 bytes @ 0x3
   371  0000EB                     	ds	2
   372  0000ED                     ??_task_3:
   373                           
   374                           ; 1 bytes @ 0x5
   375  0000ED                     	ds	1
   376  0000EE                     task_3@i:
   377                           	opt stack 0
   378                           
   379                           ; 2 bytes @ 0x6
   380  0000EE                     	ds	2
   381  0000F0                     ?_dispatcher_add_task:
   382                           	opt stack 0
   383  0000F0                     timer0_init@delay_us:
   384                           	opt stack 0
   385  0000F0                     task_ready@handle:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x8
   389  0000F0                     	ds	2
   390  0000F2                     ??_dispatcher_add_task:
   391  0000F2                     timer0_init@callback:
   392                           	opt stack 0
   393                           
   394                           ; 2 bytes @ 0xA
   395  0000F2                     	ds	1
   396  0000F3                     dispatcher_add_task@task:
   397                           	opt stack 0
   398                           
   399                           ; 2 bytes @ 0xB
   400  0000F3                     	ds	1
   401  0000F4                     
   402                           ; 1 bytes @ 0xC
   403  0000F4                     	ds	1
   404  0000F5                     tblptru	equ	0xFF8
   405                           postinc0	equ	0xFEE
   406                           wreg	equ	0xFE8
   407                           postdec1	equ	0xFE5
   408                           fsr1h	equ	0xFE2
   409                           fsr1l	equ	0xFE1
   410                           
   411                           ; 1 bytes @ 0xD
   412                           
   413                           	psect	cstackCOMRAM
   414  000001                     __pcstackCOMRAM:
   415                           	opt stack 0
   416  000001                     ?___wmul:
   417                           	opt stack 0
   418  000001                     ?___awmod:
   419                           	opt stack 0
   420  000001                     task_running@handle:
   421                           	opt stack 0
   422  000001                     ___wmul@multiplier:
   423                           	opt stack 0
   424  000001                     ___awmod@dividend:
   425                           	opt stack 0
   426  000001                     i2task_ready@handle:
   427                           	opt stack 0
   428                           
   429                           ; 2 bytes @ 0x0
   430  000001                     	ds	2
   431  000003                     ___wmul@multiplicand:
   432                           	opt stack 0
   433  000003                     ___awmod@divisor:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x2
   437  000003                     	ds	2
   438  000005                     ___awmod@counter:
   439                           	opt stack 0
   440  000005                     ___wmul@product:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x4
   444  000005                     	ds	1
   445  000006                     ___awmod@sign:
   446                           	opt stack 0
   447                           
   448                           ; 1 bytes @ 0x5
   449  000006                     	ds	1
   450  000007                     ?_scheduler_round_robin:
   451                           	opt stack 0
   452                           
   453                           ; 2 bytes @ 0x6
   454  000007                     	ds	2
   455  000009                     ??_scheduler_round_robin:
   456                           
   457                           ; 1 bytes @ 0x8
   458  000009                     	ds	4
   459  00000D                     scheduler_round_robin@offset:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0xC
   463  00000D                     	ds	2
   464  00000F                     scheduler_round_robin@next:
   465                           	opt stack 0
   466                           
   467                           ; 2 bytes @ 0xE
   468  00000F                     	ds	2
   469  000011                     scheduler_round_robin@j:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x10
   473  000011                     	ds	2
   474  000013                     scheduler_round_robin@i_743:
   475                           	opt stack 0
   476                           
   477                           ; 2 bytes @ 0x12
   478  000013                     	ds	2
   479  000015                     scheduler_round_robin@i:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x14
   483  000015                     	ds	2
   484  000017                     dispatcher_change_context_isr@next:
   485                           	opt stack 0
   486                           
   487                           ; 2 bytes @ 0x16
   488  000017                     	ds	2
   489  000019                     ??_global_isr:
   490                           
   491                           ; 1 bytes @ 0x18
   492  000019                     	ds	21
   493  00002E                     global_isr@i:
   494                           	opt stack 0
   495                           
   496                           ; 1 bytes @ 0x2D
   497  00002E                     	ds	1
   498  00002F                     global_isr@p_task:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x2E
   502  00002F                     	ds	2
   503  000031                     global_isr@n_task:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x30
   507  000031                     	ds	2
   508  000033                     global_isr@p_stack:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x32
   512  000033                     	ds	2
   513  000035                     global_isr@i_581:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x34
   517  000035                     	ds	1
   518  000036                     global_isr@p_context:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x35
   522  000036                     	ds	2
   523  000038                     global_isr@n_stack:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x37
   527  000038                     	ds	2
   528  00003A                     global_isr@n_context:
   529                           	opt stack 0
   530                           
   531                           ; 2 bytes @ 0x39
   532  00003A                     	ds	2
   533  00003C                     ??_task_1:
   534                           
   535                           ; 1 bytes @ 0x3B
   536  00003C                     	ds	1
   537                           tblptru	equ	0xFF8
   538                           postinc0	equ	0xFEE
   539                           wreg	equ	0xFE8
   540                           postdec1	equ	0xFE5
   541                           fsr1h	equ	0xFE2
   542                           fsr1l	equ	0xFE1
   543                           
   544 ;;
   545 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   546 ;;
   547 ;; *************** function _main *****************
   548 ;; Defined at:
   549 ;;		line 41 in file "main.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;		None
   552 ;; Auto vars:     Size  Location     Type
   553 ;;		None
   554 ;; Return value:  Size  Location     Type
   555 ;;                  1    wreg      void 
   556 ;; Registers used:
   557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 0/0
   560 ;;		On exit  : 0/0
   561 ;;		Unchanged: 0/0
   562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   563 ;;      Params:         0       0       0       0       0       0       0
   564 ;;      Locals:         0       0       0       0       0       0       0
   565 ;;      Temps:          0       0       0       0       0       0       0
   566 ;;      Totals:         0       0       0       0       0       0       0
   567 ;;Total ram usage:        0 bytes
   568 ;; Hardware stack levels required when called:   10
   569 ;; This function calls:
   570 ;;		_nojo_init
   571 ;;		_nojo_start
   572 ;;		_task_create
   573 ;; This function is called by:
   574 ;;		Startup code after reset
   575 ;; This function uses a non-reentrant model
   576 ;;
   577                           
   578                           	psect	text0
   579  000AA8                     __ptext0:
   580                           	opt stack 0
   581  000AA8                     _main:
   582                           	opt stack 21
   583                           
   584                           ;main.c: 43: nojo_init();
   585                           
   586                           ;incstack = 0
   587  000AA8  EC10  F007         	call	_nojo_init	;# 
   588                           
   589                           ;main.c: 47: task_create( 1, 200, task_1 );
   590  000AAC  0E00               	movlw	0
   591  000AAE  0101               	movlb	1	; () banked
   592  000AB0  6F01               	movwf	(task_create@id+1)& (0+255),b
   593  000AB2  0E01               	movlw	1
   594  000AB4  6F00               	movwf	task_create@id& (0+255),b
   595  000AB6  0E00               	movlw	0
   596  000AB8  0101               	movlb	1	; () banked
   597  000ABA  6F03               	movwf	(task_create@priority+1)& (0+255),b
   598  000ABC  0EC8               	movlw	200
   599  000ABE  6F02               	movwf	task_create@priority& (0+255),b
   600  000AC0  0EAC               	movlw	low _task_1
   601  000AC2  0101               	movlb	1	; () banked
   602  000AC4  6F04               	movwf	task_create@callback& (0+255),b
   603  000AC6  0E0C               	movlw	high _task_1
   604  000AC8  0101               	movlb	1	; () banked
   605  000ACA  6F05               	movwf	(task_create@callback+1)& (0+255),b
   606  000ACC  ECF2  F004         	call	_task_create	;wreg free
   607                           
   608                           ;main.c: 48: task_create( 2, 100, task_2 );
   609  000AD0  0E00               	movlw	0
   610  000AD2  0101               	movlb	1	; () banked
   611  000AD4  6F01               	movwf	(task_create@id+1)& (0+255),b
   612  000AD6  0E02               	movlw	2
   613  000AD8  6F00               	movwf	task_create@id& (0+255),b
   614  000ADA  0E00               	movlw	0
   615  000ADC  0101               	movlb	1	; () banked
   616  000ADE  6F03               	movwf	(task_create@priority+1)& (0+255),b
   617  000AE0  0E64               	movlw	100
   618  000AE2  6F02               	movwf	task_create@priority& (0+255),b
   619  000AE4  0EDA               	movlw	low _task_2
   620  000AE6  0101               	movlb	1	; () banked
   621  000AE8  6F04               	movwf	task_create@callback& (0+255),b
   622  000AEA  0E0B               	movlw	high _task_2
   623  000AEC  0101               	movlb	1	; () banked
   624  000AEE  6F05               	movwf	(task_create@callback+1)& (0+255),b
   625  000AF0  ECF2  F004         	call	_task_create	;wreg free
   626                           
   627                           ;main.c: 49: task_create( 3, 50, task_3 );
   628  000AF4  0E00               	movlw	0
   629  000AF6  0101               	movlb	1	; () banked
   630  000AF8  6F01               	movwf	(task_create@id+1)& (0+255),b
   631  000AFA  0E03               	movlw	3
   632  000AFC  6F00               	movwf	task_create@id& (0+255),b
   633  000AFE  0E00               	movlw	0
   634  000B00  0101               	movlb	1	; () banked
   635  000B02  6F03               	movwf	(task_create@priority+1)& (0+255),b
   636  000B04  0E32               	movlw	50
   637  000B06  6F02               	movwf	task_create@priority& (0+255),b
   638  000B08  0E90               	movlw	low _task_3
   639  000B0A  0101               	movlb	1	; () banked
   640  000B0C  6F04               	movwf	task_create@callback& (0+255),b
   641  000B0E  0E0B               	movlw	high _task_3
   642  000B10  0101               	movlb	1	; () banked
   643  000B12  6F05               	movwf	(task_create@callback+1)& (0+255),b
   644  000B14  ECF2  F004         	call	_task_create	;wreg free
   645                           
   646                           ;main.c: 51: nojo_start();
   647  000B18  EC23  F007         	call	_nojo_start	;wreg free
   648  000B1C                     l41:
   649  000B1C  F000               	nop		;# 
   650  000B1E  D7FE               	goto	l41
   651  000B20                     __end_of_main:
   652                           	opt stack 0
   653                           tblptru	equ	0xFF8
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           postdec1	equ	0xFE5
   657                           fsr1h	equ	0xFE2
   658                           fsr1l	equ	0xFE1
   659                           
   660 ;; *************** function _task_create *****************
   661 ;; Defined at:
   662 ;;		line 5 in file "kernel/task.c"
   663 ;; Parameters:    Size  Location     Type
   664 ;;  id              2    0[BANK1 ] unsigned int 
   665 ;;  priority        2    2[BANK1 ] unsigned int 
   666 ;;  callback        2    4[BANK1 ] PTR FTN()void 
   667 ;;		 -> task_3(1), task_2(1), task_1(1), 
   668 ;; Auto vars:     Size  Location     Type
   669 ;;  handle          2    9[BANK1 ] PTR struct task_s
   670 ;;		 -> dispatcher.tasks(312), dispatcher(317), 
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   680 ;;      Params:         0       0       6       0       0       0       0
   681 ;;      Locals:         0       0       2       0       0       0       0
   682 ;;      Temps:          0       0       3       0       0       0       0
   683 ;;      Totals:         0       0      11       0       0       0       0
   684 ;;Total ram usage:       11 bytes
   685 ;; Hardware stack levels used:    1
   686 ;; Hardware stack levels required when called:    7
   687 ;; This function calls:
   688 ;;		_dispatcher_add_task
   689 ;;		_task_ready
   690 ;; This function is called by:
   691 ;;		_main
   692 ;; This function uses a non-reentrant model
   693 ;;
   694                           
   695                           	psect	text1
   696  0009E4                     __ptext1:
   697                           	opt stack 0
   698  0009E4                     _task_create:
   699                           	opt stack 23
   700                           
   701                           ;task.c: 8: task_t* handle = dispatcher_add_task();
   702                           
   703                           ;incstack = 0
   704  0009E4  ECAA  F006         	call	_dispatcher_add_task	;wreg free
   705  0009E8  C0F0  F109         	movff	?_dispatcher_add_task,task_create@handle
   706  0009EC  C0F1  F10A         	movff	?_dispatcher_add_task+1,task_create@handle+1
   707                           
   708                           ;task.c: 10: handle->id = id;
   709  0009F0  C109  FFD9         	movff	task_create@handle,fsr2l
   710  0009F4  C10A  FFDA         	movff	task_create@handle+1,fsr2h
   711  0009F8  C100  FFDE         	movff	task_create@id,postinc2
   712  0009FC  C101  FFDD         	movff	task_create@id+1,postdec2
   713                           
   714                           ;task.c: 11: handle->priority = priority;
   715  000A00  0101               	movlb	1	; () banked
   716  000A02  EE20 F002          	lfsr	2,2
   717  000A06  5109               	movf	task_create@handle& (0+255),w,b
   718  000A08  26D9               	addwf	fsr2l,f,c
   719  000A0A  510A               	movf	(task_create@handle+1)& (0+255),w,b
   720  000A0C  22DA               	addwfc	fsr2h,f,c
   721  000A0E  C102  FFDE         	movff	task_create@priority,postinc2
   722  000A12  C103  FFDD         	movff	task_create@priority+1,postdec2
   723                           
   724                           ; BSR set to: 1
   725                           ;task.c: 12: handle->callback = callback;
   726  000A16  0101               	movlb	1	; () banked
   727  000A18  EE20 F005          	lfsr	2,5
   728  000A1C  5109               	movf	task_create@handle& (0+255),w,b
   729  000A1E  26D9               	addwf	fsr2l,f,c
   730  000A20  510A               	movf	(task_create@handle+1)& (0+255),w,b
   731  000A22  22DA               	addwfc	fsr2h,f,c
   732  000A24  C104  FFDE         	movff	task_create@callback,postinc2
   733  000A28  C105  FFDD         	movff	task_create@callback+1,postdec2
   734                           
   735                           ; BSR set to: 1
   736                           ;task.c: 15: handle->context.work = WREG;
   737  000A2C  0101               	movlb	1	; () banked
   738  000A2E  EE20 F007          	lfsr	2,7
   739  000A32  5109               	movf	task_create@handle& (0+255),w,b
   740  000A34  26D9               	addwf	fsr2l,f,c
   741  000A36  510A               	movf	(task_create@handle+1)& (0+255),w,b
   742  000A38  22DA               	addwfc	fsr2h,f,c
   743  000A3A  CFE8 FFDF          	movff	wreg,indf2	;volatile
   744                           
   745                           ; BSR set to: 1
   746                           ;task.c: 16: handle->context.bsr = BSR;
   747  000A3E  0101               	movlb	1	; () banked
   748  000A40  EE20 F008          	lfsr	2,8
   749  000A44  5109               	movf	task_create@handle& (0+255),w,b
   750  000A46  26D9               	addwf	fsr2l,f,c
   751  000A48  510A               	movf	(task_create@handle+1)& (0+255),w,b
   752  000A4A  22DA               	addwfc	fsr2h,f,c
   753  000A4C  CFE0 FFDF          	movff	bsr,indf2	;volatile
   754                           
   755                           ; BSR set to: 1
   756                           ;task.c: 17: handle->context.status = STATUS;
   757  000A50  0101               	movlb	1	; () banked
   758  000A52  EE20 F009          	lfsr	2,9
   759  000A56  5109               	movf	task_create@handle& (0+255),w,b
   760  000A58  26D9               	addwf	fsr2l,f,c
   761  000A5A  510A               	movf	(task_create@handle+1)& (0+255),w,b
   762  000A5C  22DA               	addwfc	fsr2h,f,c
   763  000A5E  CFD8 FFDF          	movff	status,indf2	;volatile
   764                           
   765                           ; BSR set to: 1
   766                           ;task.c: 18: handle->context.stack.size = 1;
   767  000A62  0101               	movlb	1	; () banked
   768  000A64  EE20 F067          	lfsr	2,103
   769  000A68  5109               	movf	task_create@handle& (0+255),w,b
   770  000A6A  26D9               	addwf	fsr2l,f,c
   771  000A6C  510A               	movf	(task_create@handle+1)& (0+255),w,b
   772  000A6E  22DA               	addwfc	fsr2h,f,c
   773  000A70  0E01               	movlw	1
   774  000A72  6EDF               	movwf	indf2,c
   775                           
   776                           ; BSR set to: 1
   777                           ;task.c: 19: handle->context.stack.values[0] = (uint24_t)callback;
   778  000A74  C104  F106         	movff	task_create@callback,??_task_create
   779  000A78  C105  F107         	movff	task_create@callback+1,??_task_create+1
   780  000A7C  0101               	movlb	1	; () banked
   781  000A7E  6B08               	clrf	(??_task_create+2)& (0+255),b
   782  000A80  0101               	movlb	1	; () banked
   783  000A82  EE20 F00A          	lfsr	2,10
   784  000A86  5109               	movf	task_create@handle& (0+255),w,b
   785  000A88  26D9               	addwf	fsr2l,f,c
   786  000A8A  510A               	movf	(task_create@handle+1)& (0+255),w,b
   787  000A8C  22DA               	addwfc	fsr2h,f,c
   788  000A8E  C106  FFDE         	movff	??_task_create,postinc2
   789  000A92  C107  FFDE         	movff	??_task_create+1,postinc2
   790  000A96  C108  FFDE         	movff	??_task_create+2,postinc2
   791                           
   792                           ; BSR set to: 1
   793                           ;task.c: 21: task_ready( handle );
   794  000A9A  C109  F0F0         	movff	task_create@handle,task_ready@handle
   795  000A9E  C10A  F0F1         	movff	task_create@handle+1,task_ready@handle+1
   796  000AA2  ECF4  F006         	call	_task_ready	;wreg free
   797  000AA6  0012               	return		;funcret
   798  000AA8                     __end_of_task_create:
   799                           	opt stack 0
   800                           tblptru	equ	0xFF8
   801                           postinc0	equ	0xFEE
   802                           wreg	equ	0xFE8
   803                           postdec1	equ	0xFE5
   804                           fsr1h	equ	0xFE2
   805                           fsr1l	equ	0xFE1
   806                           bsr	equ	0xFE0
   807                           indf2	equ	0xFDF
   808                           postinc2	equ	0xFDE
   809                           postdec2	equ	0xFDD
   810                           fsr2h	equ	0xFDA
   811                           fsr2l	equ	0xFD9
   812                           status	equ	0xFD8
   813                           
   814 ;; *************** function _task_ready *****************
   815 ;; Defined at:
   816 ;;		line 24 in file "kernel/task.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;  handle          2    8[BANK0 ] PTR struct task_s
   819 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   831 ;;      Params:         0       2       0       0       0       0       0
   832 ;;      Locals:         0       0       0       0       0       0       0
   833 ;;      Temps:          0       0       0       0       0       0       0
   834 ;;      Totals:         0       2       0       0       0       0       0
   835 ;;Total ram usage:        2 bytes
   836 ;; Hardware stack levels used:    1
   837 ;; Hardware stack levels required when called:    6
   838 ;; This function calls:
   839 ;;		Nothing
   840 ;; This function is called by:
   841 ;;		_task_create
   842 ;; This function uses a non-reentrant model
   843 ;;
   844                           
   845                           	psect	text2
   846  000DE8                     __ptext2:
   847                           	opt stack 0
   848  000DE8                     _task_ready:
   849                           	opt stack 23
   850                           
   851                           ;task.c: 25: handle->state = task_state_ready;
   852                           
   853                           ;incstack = 0
   854  000DE8  0100               	movlb	0	; () banked
   855  000DEA  EE20 F004          	lfsr	2,4
   856  000DEE  51F0               	movf	task_ready@handle& (0+255),w,b
   857  000DF0  26D9               	addwf	fsr2l,f,c
   858  000DF2  51F1               	movf	(task_ready@handle+1)& (0+255),w,b
   859  000DF4  22DA               	addwfc	fsr2h,f,c
   860  000DF6  0E00               	movlw	0
   861  000DF8  6EDF               	movwf	indf2,c
   862                           
   863                           ; BSR set to: 0
   864  000DFA  0012               	return		;funcret
   865  000DFC                     __end_of_task_ready:
   866                           	opt stack 0
   867                           tblptru	equ	0xFF8
   868                           postinc0	equ	0xFEE
   869                           wreg	equ	0xFE8
   870                           postdec1	equ	0xFE5
   871                           fsr1h	equ	0xFE2
   872                           fsr1l	equ	0xFE1
   873                           bsr	equ	0xFE0
   874                           indf2	equ	0xFDF
   875                           postinc2	equ	0xFDE
   876                           postdec2	equ	0xFDD
   877                           fsr2h	equ	0xFDA
   878                           fsr2l	equ	0xFD9
   879                           status	equ	0xFD8
   880                           
   881 ;; *************** function _dispatcher_add_task *****************
   882 ;; Defined at:
   883 ;;		line 39 in file "kernel/dispatcher.c"
   884 ;; Parameters:    Size  Location     Type
   885 ;;		None
   886 ;; Auto vars:     Size  Location     Type
   887 ;;  task            2   11[BANK0 ] PTR struct task_s
   888 ;;		 -> dispatcher.tasks(312), dispatcher(317), 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  2    8[BANK0 ] PTR struct task_s
   891 ;; Registers used:
   892 ;;		wreg, status,2, status,0, prodl, prodh
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   898 ;;      Params:         0       2       0       0       0       0       0
   899 ;;      Locals:         0       2       0       0       0       0       0
   900 ;;      Temps:          0       1       0       0       0       0       0
   901 ;;      Totals:         0       5       0       0       0       0       0
   902 ;;Total ram usage:        5 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    6
   905 ;; This function calls:
   906 ;;		Nothing
   907 ;; This function is called by:
   908 ;;		_task_create
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           	psect	text3
   913  000D54                     __ptext3:
   914                           	opt stack 0
   915  000D54                     _dispatcher_add_task:
   916                           	opt stack 23
   917                           
   918                           ;dispatcher.c: 40: task_t* task = &dispatcher.tasks[dispatcher.size];
   919                           
   920                           ; BSR set to: 0
   921                           ;incstack = 0
   922  000D54  C443  F0F2         	movff	_dispatcher+312,??_dispatcher_add_task
   923  000D58  0100               	movlb	0	; () banked
   924  000D5A  51F2               	movf	??_dispatcher_add_task& (0+255),w,b
   925  000D5C  0D68               	mullw	104
   926  000D5E  0E0B               	movlw	low _dispatcher
   927  000D60  24F3               	addwf	prodl,w,c
   928  000D62  0100               	movlb	0	; () banked
   929  000D64  6FF3               	movwf	dispatcher_add_task@task& (0+255),b
   930  000D66  0E03               	movlw	high _dispatcher
   931  000D68  20F4               	addwfc	prodh,w,c
   932  000D6A  0100               	movlb	0	; () banked
   933  000D6C  6FF4               	movwf	(dispatcher_add_task@task+1)& (0+255),b
   934                           
   935                           ; BSR set to: 0
   936                           ;dispatcher.c: 41: dispatcher.size++;
   937  000D6E  C443  FFE8         	movff	_dispatcher+312,wreg
   938  000D72  0F01               	addlw	1
   939  000D74  CFE8 F443          	movff	wreg,_dispatcher+312
   940                           
   941                           ; BSR set to: 0
   942                           ;dispatcher.c: 42: return task;
   943  000D78  C0F3  F0F0         	movff	dispatcher_add_task@task,?_dispatcher_add_task
   944  000D7C  C0F4  F0F1         	movff	dispatcher_add_task@task+1,?_dispatcher_add_task+1
   945  000D80  0012               	return	
   946  000D82                     __end_of_dispatcher_add_task:
   947                           	opt stack 0
   948                           tblptru	equ	0xFF8
   949                           prodh	equ	0xFF4
   950                           prodl	equ	0xFF3
   951                           postinc0	equ	0xFEE
   952                           wreg	equ	0xFE8
   953                           postdec1	equ	0xFE5
   954                           fsr1h	equ	0xFE2
   955                           fsr1l	equ	0xFE1
   956                           bsr	equ	0xFE0
   957                           indf2	equ	0xFDF
   958                           postinc2	equ	0xFDE
   959                           postdec2	equ	0xFDD
   960                           fsr2h	equ	0xFDA
   961                           fsr2l	equ	0xFD9
   962                           status	equ	0xFD8
   963                           
   964 ;; *************** function _nojo_start *****************
   965 ;; Defined at:
   966 ;;		line 23 in file "nojentOS.c"
   967 ;; Parameters:    Size  Location     Type
   968 ;;		None
   969 ;; Auto vars:     Size  Location     Type
   970 ;;		None
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, status,2, status,0, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : 0/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   980 ;;      Params:         0       0       0       0       0       0       0
   981 ;;      Locals:         0       0       0       0       0       0       0
   982 ;;      Temps:          0       0       0       0       0       0       0
   983 ;;      Totals:         0       0       0       0       0       0       0
   984 ;;Total ram usage:        0 bytes
   985 ;; Hardware stack levels used:    1
   986 ;; Hardware stack levels required when called:    9
   987 ;; This function calls:
   988 ;;		_dispatcher_start
   989 ;; This function is called by:
   990 ;;		_main
   991 ;; This function uses a non-reentrant model
   992 ;;
   993                           
   994                           	psect	text4
   995  000E46                     __ptext4:
   996                           	opt stack 0
   997  000E46                     _nojo_start:
   998                           	opt stack 21
   999                           
  1000                           ;nojentOS.c: 24: dispatcher_start();
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;incstack = 0
  1004  000E46  ECE6  F006         	call	_dispatcher_start	;wreg free
  1005                           
  1006                           ;nojentOS.c: 26: do{ INTCONbits.GIE = 1; }while(0);
  1007  000E4A  8EF2               	bsf	intcon,7,c	;volatile
  1008  000E4C  0012               	return	
  1009  000E4E                     __end_of_nojo_start:
  1010                           	opt stack 0
  1011                           tblptru	equ	0xFF8
  1012                           prodh	equ	0xFF4
  1013                           prodl	equ	0xFF3
  1014                           intcon	equ	0xFF2
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           postdec1	equ	0xFE5
  1018                           fsr1h	equ	0xFE2
  1019                           fsr1l	equ	0xFE1
  1020                           bsr	equ	0xFE0
  1021                           indf2	equ	0xFDF
  1022                           postinc2	equ	0xFDE
  1023                           postdec2	equ	0xFDD
  1024                           fsr2h	equ	0xFDA
  1025                           fsr2l	equ	0xFD9
  1026                           status	equ	0xFD8
  1027                           
  1028 ;; *************** function _dispatcher_start *****************
  1029 ;; Defined at:
  1030 ;;		line 35 in file "kernel/dispatcher.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;		None
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;		None
  1035 ;; Return value:  Size  Location     Type
  1036 ;;                  1    wreg      void 
  1037 ;; Registers used:
  1038 ;;		wreg, status,2, status,0, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1044 ;;      Params:         0       0       0       0       0       0       0
  1045 ;;      Locals:         0       0       0       0       0       0       0
  1046 ;;      Temps:          0       0       0       0       0       0       0
  1047 ;;      Totals:         0       0       0       0       0       0       0
  1048 ;;Total ram usage:        0 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; Hardware stack levels required when called:    8
  1051 ;; This function calls:
  1052 ;;		_timer0_init
  1053 ;; This function is called by:
  1054 ;;		_nojo_start
  1055 ;; This function uses a non-reentrant model
  1056 ;;
  1057                           
  1058                           	psect	text5
  1059  000DCC                     __ptext5:
  1060                           	opt stack 0
  1061  000DCC                     _dispatcher_start:
  1062                           	opt stack 21
  1063                           
  1064                           ;dispatcher.c: 36: timer0_init( 10000, dispatcher_change_context_isr );
  1065                           
  1066                           ;incstack = 0
  1067  000DCC  0E27               	movlw	39
  1068  000DCE  0100               	movlb	0	; () banked
  1069  000DD0  6FF1               	movwf	(timer0_init@delay_us+1)& (0+255),b
  1070  000DD2  0E10               	movlw	16
  1071  000DD4  6FF0               	movwf	timer0_init@delay_us& (0+255),b
  1072  000DD6  0E22               	movlw	low _dispatcher_change_context_isr
  1073  000DD8  0100               	movlb	0	; () banked
  1074  000DDA  6FF2               	movwf	timer0_init@callback& (0+255),b
  1075  000DDC  0E0C               	movlw	high _dispatcher_change_context_isr
  1076  000DDE  0100               	movlb	0	; () banked
  1077  000DE0  6FF3               	movwf	(timer0_init@callback+1)& (0+255),b
  1078  000DE2  EC91  F006         	call	_timer0_init	;wreg free
  1079  000DE6  0012               	return		;funcret
  1080  000DE8                     __end_of_dispatcher_start:
  1081                           	opt stack 0
  1082                           tblptru	equ	0xFF8
  1083                           prodh	equ	0xFF4
  1084                           prodl	equ	0xFF3
  1085                           intcon	equ	0xFF2
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           fsr1h	equ	0xFE2
  1090                           fsr1l	equ	0xFE1
  1091                           bsr	equ	0xFE0
  1092                           indf2	equ	0xFDF
  1093                           postinc2	equ	0xFDE
  1094                           postdec2	equ	0xFDD
  1095                           fsr2h	equ	0xFDA
  1096                           fsr2l	equ	0xFD9
  1097                           status	equ	0xFD8
  1098                           
  1099 ;; *************** function _timer0_init *****************
  1100 ;; Defined at:
  1101 ;;		line 15 in file "kernel/timers.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;  delay_us        2    8[BANK0 ] unsigned int 
  1104 ;;  callback        2   10[BANK0 ] PTR FTN()void 
  1105 ;;		 -> dispatcher_change_context_isr(1), 
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;		None
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		wreg, status,2, status,0, cstack
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1117 ;;      Params:         0       4       0       0       0       0       0
  1118 ;;      Locals:         0       0       0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0       0       0
  1120 ;;      Totals:         0       4       0       0       0       0       0
  1121 ;;Total ram usage:        4 bytes
  1122 ;; Hardware stack levels used:    1
  1123 ;; Hardware stack levels required when called:    7
  1124 ;; This function calls:
  1125 ;;		_timer0_reset
  1126 ;; This function is called by:
  1127 ;;		_dispatcher_start
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131                           	psect	text6
  1132  000D22                     __ptext6:
  1133                           	opt stack 0
  1134  000D22                     _timer0_init:
  1135                           	opt stack 21
  1136                           
  1137                           ;timers.c: 17: T0CONbits.TMR0ON = 0;
  1138                           
  1139                           ;incstack = 0
  1140  000D22  9ED5               	bcf	4053,7,c	;volatile
  1141                           
  1142                           ;timers.c: 19: INTCONbits.TMR0IE = 0;
  1143  000D24  9AF2               	bcf	intcon,5,c	;volatile
  1144                           
  1145                           ;timers.c: 23: _timer0_delay_us = delay_us;
  1146  000D26  C0F0  F0F5         	movff	timer0_init@delay_us,__timer0_delay_us
  1147  000D2A  C0F1  F0F6         	movff	timer0_init@delay_us+1,__timer0_delay_us+1
  1148                           
  1149                           ;timers.c: 25: _timer0_callback = callback;
  1150  000D2E  C0F2  F042         	movff	timer0_init@callback,__timer0_callback
  1151  000D32  C0F3  F043         	movff	timer0_init@callback+1,__timer0_callback+1
  1152                           
  1153                           ;timers.c: 28: T0CONbits.T08BIT = 0;
  1154  000D36  9CD5               	bcf	4053,6,c	;volatile
  1155                           
  1156                           ;timers.c: 30: T0CONbits.T0CS = 0;
  1157  000D38  9AD5               	bcf	4053,5,c	;volatile
  1158                           
  1159                           ;timers.c: 32: T0CONbits.T0SE = 0;
  1160  000D3A  98D5               	bcf	4053,4,c	;volatile
  1161                           
  1162                           ;timers.c: 34: T0CONbits.PSA = 1;
  1163  000D3C  86D5               	bsf	4053,3,c	;volatile
  1164                           
  1165                           ;timers.c: 36: T0CONbits.T0PS = 0b010;
  1166  000D3E  50D5               	movf	4053,w,c	;volatile
  1167  000D40  0BF8               	andlw	-8
  1168  000D42  0902               	iorlw	2
  1169  000D44  6ED5               	movwf	4053,c	;volatile
  1170                           
  1171                           ;timers.c: 38: INTCONbits.TMR0IF = 0;
  1172  000D46  94F2               	bcf	intcon,2,c	;volatile
  1173                           
  1174                           ;timers.c: 40: INTCON2bits.TMR0IP = 1;
  1175  000D48  84F1               	bsf	intcon2,2,c	;volatile
  1176                           
  1177                           ;timers.c: 43: timer0_reset();
  1178  000D4A  EC17  F007         	call	_timer0_reset	;wreg free
  1179                           
  1180                           ;timers.c: 46: INTCONbits.TMR0IE = 1;
  1181  000D4E  8AF2               	bsf	intcon,5,c	;volatile
  1182                           
  1183                           ;timers.c: 48: T0CONbits.TMR0ON = 1;
  1184  000D50  8ED5               	bsf	4053,7,c	;volatile
  1185  000D52  0012               	return		;funcret
  1186  000D54                     __end_of_timer0_init:
  1187                           	opt stack 0
  1188                           tblptru	equ	0xFF8
  1189                           prodh	equ	0xFF4
  1190                           prodl	equ	0xFF3
  1191                           intcon	equ	0xFF2
  1192                           intcon2	equ	0xFF1
  1193                           postinc0	equ	0xFEE
  1194                           wreg	equ	0xFE8
  1195                           postdec1	equ	0xFE5
  1196                           fsr1h	equ	0xFE2
  1197                           fsr1l	equ	0xFE1
  1198                           bsr	equ	0xFE0
  1199                           indf2	equ	0xFDF
  1200                           postinc2	equ	0xFDE
  1201                           postdec2	equ	0xFDD
  1202                           fsr2h	equ	0xFDA
  1203                           fsr2l	equ	0xFD9
  1204                           status	equ	0xFD8
  1205                           
  1206 ;; *************** function _timer0_reset *****************
  1207 ;; Defined at:
  1208 ;;		line 8 in file "kernel/timers.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;		None
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;		None
  1213 ;; Return value:  Size  Location     Type
  1214 ;;                  1    wreg      void 
  1215 ;; Registers used:
  1216 ;;		None
  1217 ;; Tracked objects:
  1218 ;;		On entry : 0/0
  1219 ;;		On exit  : 0/0
  1220 ;;		Unchanged: 0/0
  1221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1222 ;;      Params:         0       0       0       0       0       0       0
  1223 ;;      Locals:         0       0       0       0       0       0       0
  1224 ;;      Temps:          0       0       0       0       0       0       0
  1225 ;;      Totals:         0       0       0       0       0       0       0
  1226 ;;Total ram usage:        0 bytes
  1227 ;; Hardware stack levels used:    1
  1228 ;; Hardware stack levels required when called:    6
  1229 ;; This function calls:
  1230 ;;		Nothing
  1231 ;; This function is called by:
  1232 ;;		_timer0_init
  1233 ;; This function uses a non-reentrant model
  1234 ;;
  1235                           
  1236                           	psect	text7
  1237  000E2E                     __ptext7:
  1238                           	opt stack 0
  1239  000E2E                     _timer0_reset:
  1240                           	opt stack 21
  1241                           
  1242                           ;timers.c: 10: INTCONbits.TMR0IF = 0;
  1243                           
  1244                           ;incstack = 0
  1245  000E2E  94F2               	bcf	intcon,2,c	;volatile
  1246                           
  1247                           ;timers.c: 12: TMR0 = _timer0_delay_us;
  1248  000E30  C0F5  FFD6         	movff	__timer0_delay_us,4054	;volatile
  1249  000E34  C0F6  FFD7         	movff	__timer0_delay_us+1,4055	;volatile
  1250  000E38  0012               	return		;funcret
  1251  000E3A                     __end_of_timer0_reset:
  1252                           	opt stack 0
  1253                           tblptru	equ	0xFF8
  1254                           prodh	equ	0xFF4
  1255                           prodl	equ	0xFF3
  1256                           intcon	equ	0xFF2
  1257                           intcon2	equ	0xFF1
  1258                           postinc0	equ	0xFEE
  1259                           wreg	equ	0xFE8
  1260                           postdec1	equ	0xFE5
  1261                           fsr1h	equ	0xFE2
  1262                           fsr1l	equ	0xFE1
  1263                           bsr	equ	0xFE0
  1264                           indf2	equ	0xFDF
  1265                           postinc2	equ	0xFDE
  1266                           postdec2	equ	0xFDD
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           
  1271 ;; *************** function _nojo_init *****************
  1272 ;; Defined at:
  1273 ;;		line 15 in file "nojentOS.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;		None
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2, status,0, cstack
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1287 ;;      Params:         0       0       0       0       0       0       0
  1288 ;;      Locals:         0       0       0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0
  1290 ;;      Totals:         0       0       0       0       0       0       0
  1291 ;;Total ram usage:        0 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    7
  1294 ;; This function calls:
  1295 ;;		_dispatcher_init
  1296 ;; This function is called by:
  1297 ;;		_main
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text8
  1302  000E20                     __ptext8:
  1303                           	opt stack 0
  1304  000E20                     _nojo_init:
  1305                           	opt stack 23
  1306                           
  1307                           ;nojentOS.c: 17: OSCCONbits.IRCF = 0b111;
  1308                           
  1309                           ;incstack = 0
  1310  000E20  88D3               	bsf	4051,4,c	;volatile
  1311  000E22  8AD3               	bsf	4051,5,c	;volatile
  1312  000E24  8CD3               	bsf	4051,6,c	;volatile
  1313                           
  1314                           ;nojentOS.c: 18: OSCTUNEbits.PLLEN = 0;
  1315  000E26  9C9B               	bcf	3995,6,c	;volatile
  1316                           
  1317                           ;nojentOS.c: 20: dispatcher_init();
  1318  000E28  EC34  F006         	call	_dispatcher_init	;wreg free
  1319  000E2C  0012               	return		;funcret
  1320  000E2E                     __end_of_nojo_init:
  1321                           	opt stack 0
  1322                           tblptru	equ	0xFF8
  1323                           prodh	equ	0xFF4
  1324                           prodl	equ	0xFF3
  1325                           intcon	equ	0xFF2
  1326                           intcon2	equ	0xFF1
  1327                           postinc0	equ	0xFEE
  1328                           wreg	equ	0xFE8
  1329                           postdec1	equ	0xFE5
  1330                           fsr1h	equ	0xFE2
  1331                           fsr1l	equ	0xFE1
  1332                           bsr	equ	0xFE0
  1333                           indf2	equ	0xFDF
  1334                           postinc2	equ	0xFDE
  1335                           postdec2	equ	0xFDD
  1336                           fsr2h	equ	0xFDA
  1337                           fsr2l	equ	0xFD9
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _dispatcher_init *****************
  1341 ;; Defined at:
  1342 ;;		line 18 in file "kernel/dispatcher.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         0       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0
  1359 ;;      Totals:         0       0       0       0       0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    6
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_nojo_init
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text9
  1371  000C68                     __ptext9:
  1372                           	opt stack 0
  1373  000C68                     _dispatcher_init:
  1374                           	opt stack 23
  1375                           
  1376                           ;dispatcher.c: 19: dispatcher.size = 0;
  1377                           
  1378                           ;incstack = 0
  1379  000C68  0E00               	movlw	0
  1380  000C6A  CFE8 F443          	movff	wreg,_dispatcher+312
  1381                           
  1382                           ;dispatcher.c: 20: dispatcher.callback = scheduler_round_robin;
  1383  000C6E  0ED6               	movlw	low _scheduler_round_robin
  1384  000C70  CFE8 F446          	movff	wreg,_dispatcher+315
  1385  000C74  0E08               	movlw	high _scheduler_round_robin
  1386  000C76  CFE8 F447          	movff	wreg,_dispatcher+316
  1387                           
  1388                           ;dispatcher.c: 22: idle.id = 255;
  1389  000C7A  0E00               	movlw	0
  1390  000C7C  0100               	movlb	0	; () banked
  1391  000C7E  6F81               	movwf	(_idle+1)& (0+255),b
  1392  000C80  6980               	setf	_idle& (0+255),b
  1393                           
  1394                           ;dispatcher.c: 23: idle.priority = 0;
  1395  000C82  0E00               	movlw	0
  1396  000C84  0100               	movlb	0	; () banked
  1397  000C86  6F83               	movwf	(_idle+3)& (0+255),b
  1398  000C88  0E00               	movlw	0
  1399  000C8A  6F82               	movwf	(_idle+2)& (0+255),b
  1400                           
  1401                           ;dispatcher.c: 24: idle.state = task_state_ready;
  1402  000C8C  0E00               	movlw	0
  1403  000C8E  0100               	movlb	0	; () banked
  1404  000C90  6F84               	movwf	(_idle+4)& (0+255),b
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;dispatcher.c: 25: idle.callback = task_idle_callback;
  1408  000C92  0E4E               	movlw	low _task_idle_callback
  1409  000C94  0100               	movlb	0	; () banked
  1410  000C96  6F85               	movwf	(_idle+5)& (0+255),b
  1411  000C98  0E0E               	movlw	high _task_idle_callback
  1412  000C9A  0100               	movlb	0	; () banked
  1413  000C9C  6F86               	movwf	(_idle+6)& (0+255),b
  1414                           
  1415                           ; BSR set to: 0
  1416                           ;dispatcher.c: 32: dispatcher.running = &idle;
  1417  000C9E  0E80               	movlw	low _idle
  1418  000CA0  CFE8 F444          	movff	wreg,_dispatcher+313
  1419  000CA4  0E00               	movlw	high _idle
  1420  000CA6  CFE8 F445          	movff	wreg,_dispatcher+314
  1421                           
  1422                           ; BSR set to: 0
  1423  000CAA  0012               	return		;funcret
  1424  000CAC                     __end_of_dispatcher_init:
  1425                           	opt stack 0
  1426                           tblptru	equ	0xFF8
  1427                           prodh	equ	0xFF4
  1428                           prodl	equ	0xFF3
  1429                           intcon	equ	0xFF2
  1430                           intcon2	equ	0xFF1
  1431                           postinc0	equ	0xFEE
  1432                           wreg	equ	0xFE8
  1433                           postdec1	equ	0xFE5
  1434                           fsr1h	equ	0xFE2
  1435                           fsr1l	equ	0xFE1
  1436                           bsr	equ	0xFE0
  1437                           indf2	equ	0xFDF
  1438                           postinc2	equ	0xFDE
  1439                           postdec2	equ	0xFDD
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8
  1443                           
  1444 ;; *************** function _task_1 *****************
  1445 ;; Defined at:
  1446 ;;		line 14 in file "main.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;		None
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  i               2    0[BANK0 ] unsigned int 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  1    wreg      void 
  1453 ;; Registers used:
  1454 ;;		wreg, status,2, status,0
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1460 ;;      Params:         0       0       0       0       0       0       0
  1461 ;;      Locals:         0       2       0       0       0       0       0
  1462 ;;      Temps:          1       0       0       0       0       0       0
  1463 ;;      Totals:         1       2       0       0       0       0       0
  1464 ;;Total ram usage:        3 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; Hardware stack levels required when called:    5
  1467 ;; This function calls:
  1468 ;;		Nothing
  1469 ;; This function is called by:
  1470 ;;		_main
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           	psect	text10
  1475  000CAC                     __ptext10:
  1476                           	opt stack 0
  1477  000CAC                     _task_1:
  1478                           	opt stack 21
  1479                           
  1480                           ;main.c: 15: TRISDbits.RD0 = 0;
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;incstack = 0
  1484  000CAC  9095               	bcf	3989,0,c	;volatile
  1485                           
  1486                           ;main.c: 16: PORTDbits.RD0 = 0;
  1487  000CAE  9083               	bcf	3971,0,c	;volatile
  1488  000CB0                     l1685:
  1489                           
  1490                           ;main.c: 18: PORTDbits.RD0 = !LATDbits.LATD0;
  1491  000CB0  B08C               	btfsc	3980,0,c	;volatile
  1492  000CB2  D003               	goto	u83_20
  1493  000CB4  6A3C               	clrf	??_task_1& (0+255),c
  1494  000CB6  2A3C               	incf	??_task_1& (0+255),f,c
  1495  000CB8  D001               	goto	u84_28
  1496  000CBA                     u83_20:
  1497  000CBA  6A3C               	clrf	??_task_1& (0+255),c
  1498  000CBC                     u84_28:
  1499  000CBC  5083               	movf	3971,w,c	;volatile
  1500  000CBE  183C               	xorwf	??_task_1,w,c
  1501  000CC0  0BFE               	andlw	-2
  1502  000CC2  183C               	xorwf	??_task_1,w,c
  1503  000CC4  6E83               	movwf	3971,c	;volatile
  1504                           
  1505                           ;main.c: 19: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1506  000CC6  0E00               	movlw	0
  1507  000CC8  0100               	movlb	0	; () banked
  1508  000CCA  6FE9               	movwf	(task_1@i+1)& (0+255),b
  1509  000CCC  0E00               	movlw	0
  1510  000CCE  6FE8               	movwf	task_1@i& (0+255),b
  1511  000CD0                     l1689:
  1512                           
  1513                           ; BSR set to: 0
  1514  000CD0  0E60               	movlw	96
  1515  000CD2  0100               	movlb	0	; () banked
  1516  000CD4  5DE8               	subwf	task_1@i& (0+255),w,b
  1517  000CD6  0EEA               	movlw	234
  1518  000CD8  0100               	movlb	0	; () banked
  1519  000CDA  59E9               	subwfb	(task_1@i+1)& (0+255),w,b
  1520  000CDC  B0D8               	btfsc	status,0,c
  1521  000CDE  D7E8               	goto	l1685
  1522                           
  1523                           ; BSR set to: 0
  1524                           
  1525                           ; BSR set to: 0
  1526  000CE0  F000               	nop	
  1527  000CE2  0100               	movlb	0	; () banked
  1528  000CE4  4BE8               	infsnz	task_1@i& (0+255),f,b
  1529  000CE6  2BE9               	incf	(task_1@i+1)& (0+255),f,b
  1530  000CE8  D7F3               	goto	l1689
  1531  000CEA                     __end_of_task_1:
  1532                           	opt stack 0
  1533                           tblptru	equ	0xFF8
  1534                           prodh	equ	0xFF4
  1535                           prodl	equ	0xFF3
  1536                           intcon	equ	0xFF2
  1537                           intcon2	equ	0xFF1
  1538                           postinc0	equ	0xFEE
  1539                           wreg	equ	0xFE8
  1540                           postdec1	equ	0xFE5
  1541                           fsr1h	equ	0xFE2
  1542                           fsr1l	equ	0xFE1
  1543                           bsr	equ	0xFE0
  1544                           indf2	equ	0xFDF
  1545                           postinc2	equ	0xFDE
  1546                           postdec2	equ	0xFDD
  1547                           fsr2h	equ	0xFDA
  1548                           fsr2l	equ	0xFD9
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function _task_2 *****************
  1552 ;; Defined at:
  1553 ;;		line 23 in file "main.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;		None
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  i               2    3[BANK0 ] unsigned int 
  1558 ;; Return value:  Size  Location     Type
  1559 ;;                  1    wreg      void 
  1560 ;; Registers used:
  1561 ;;		wreg, status,2, status,0
  1562 ;; Tracked objects:
  1563 ;;		On entry : 0/0
  1564 ;;		On exit  : 0/0
  1565 ;;		Unchanged: 0/0
  1566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1567 ;;      Params:         0       0       0       0       0       0       0
  1568 ;;      Locals:         0       2       0       0       0       0       0
  1569 ;;      Temps:          0       1       0       0       0       0       0
  1570 ;;      Totals:         0       3       0       0       0       0       0
  1571 ;;Total ram usage:        3 bytes
  1572 ;; Hardware stack levels used:    1
  1573 ;; Hardware stack levels required when called:    5
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_main
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581                           	psect	text11
  1582  000BDA                     __ptext11:
  1583                           	opt stack 0
  1584  000BDA                     _task_2:
  1585                           	opt stack 21
  1586                           
  1587                           ;main.c: 24: TRISDbits.RD1 = 0;
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;incstack = 0
  1591  000BDA  9295               	bcf	3989,1,c	;volatile
  1592                           
  1593                           ;main.c: 25: PORTDbits.RD1 = 0;
  1594  000BDC  9283               	bcf	3971,1,c	;volatile
  1595  000BDE                     l1699:
  1596                           
  1597                           ;main.c: 27: PORTDbits.RD1 = !LATDbits.LATD1;
  1598  000BDE  B28C               	btfsc	3980,1,c	;volatile
  1599  000BE0  D004               	goto	u87_20
  1600  000BE2  0100               	movlb	0	; () banked
  1601  000BE4  6BEA               	clrf	??_task_2& (0+255),b
  1602  000BE6  2BEA               	incf	??_task_2& (0+255),f,b
  1603  000BE8  D002               	goto	u88_28
  1604  000BEA                     u87_20:
  1605  000BEA  0100               	movlb	0	; () banked
  1606  000BEC  6BEA               	clrf	??_task_2& (0+255),b
  1607  000BEE                     u88_28:
  1608  000BEE  0100               	movlb	0	; () banked
  1609  000BF0  47EA               	rlncf	??_task_2& (0+255),f,b
  1610  000BF2  5083               	movf	3971,w,c	;volatile
  1611  000BF4  0100               	movlb	0	; () banked
  1612  000BF6  19EA               	xorwf	??_task_2& (0+255),w,b
  1613  000BF8  0BFD               	andlw	-3
  1614  000BFA  19EA               	xorwf	??_task_2& (0+255),w,b
  1615  000BFC  6E83               	movwf	3971,c	;volatile
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;main.c: 28: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1619  000BFE  0E00               	movlw	0
  1620  000C00  0100               	movlb	0	; () banked
  1621  000C02  6FEC               	movwf	(task_2@i+1)& (0+255),b
  1622  000C04  0E00               	movlw	0
  1623  000C06  6FEB               	movwf	task_2@i& (0+255),b
  1624  000C08                     l1703:
  1625                           
  1626                           ; BSR set to: 0
  1627  000C08  0E60               	movlw	96
  1628  000C0A  0100               	movlb	0	; () banked
  1629  000C0C  5DEB               	subwf	task_2@i& (0+255),w,b
  1630  000C0E  0EEA               	movlw	234
  1631  000C10  0100               	movlb	0	; () banked
  1632  000C12  59EC               	subwfb	(task_2@i+1)& (0+255),w,b
  1633  000C14  B0D8               	btfsc	status,0,c
  1634  000C16  D7E3               	goto	l1699
  1635                           
  1636                           ; BSR set to: 0
  1637                           
  1638                           ; BSR set to: 0
  1639  000C18  F000               	nop	
  1640  000C1A  0100               	movlb	0	; () banked
  1641  000C1C  4BEB               	infsnz	task_2@i& (0+255),f,b
  1642  000C1E  2BEC               	incf	(task_2@i+1)& (0+255),f,b
  1643  000C20  D7F3               	goto	l1703
  1644  000C22                     __end_of_task_2:
  1645                           	opt stack 0
  1646                           tblptru	equ	0xFF8
  1647                           prodh	equ	0xFF4
  1648                           prodl	equ	0xFF3
  1649                           intcon	equ	0xFF2
  1650                           intcon2	equ	0xFF1
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1h	equ	0xFE2
  1655                           fsr1l	equ	0xFE1
  1656                           bsr	equ	0xFE0
  1657                           indf2	equ	0xFDF
  1658                           postinc2	equ	0xFDE
  1659                           postdec2	equ	0xFDD
  1660                           fsr2h	equ	0xFDA
  1661                           fsr2l	equ	0xFD9
  1662                           status	equ	0xFD8
  1663                           
  1664 ;; *************** function _task_3 *****************
  1665 ;; Defined at:
  1666 ;;		line 32 in file "main.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;  i               2    6[BANK0 ] unsigned int 
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      void 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1680 ;;      Params:         0       0       0       0       0       0       0
  1681 ;;      Locals:         0       2       0       0       0       0       0
  1682 ;;      Temps:          0       1       0       0       0       0       0
  1683 ;;      Totals:         0       3       0       0       0       0       0
  1684 ;;Total ram usage:        3 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    5
  1687 ;; This function calls:
  1688 ;;		Nothing
  1689 ;; This function is called by:
  1690 ;;		_main
  1691 ;; This function uses a non-reentrant model
  1692 ;;
  1693                           
  1694                           	psect	text12
  1695  000B90                     __ptext12:
  1696                           	opt stack 0
  1697  000B90                     _task_3:
  1698                           	opt stack 21
  1699                           
  1700                           ;main.c: 33: TRISDbits.RD2 = 0;
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;incstack = 0
  1704  000B90  9495               	bcf	3989,2,c	;volatile
  1705                           
  1706                           ;main.c: 34: PORTDbits.RD2 = 0;
  1707  000B92  9483               	bcf	3971,2,c	;volatile
  1708  000B94                     l1531:
  1709                           
  1710                           ;main.c: 36: PORTDbits.RD2 = !LATDbits.LATD2;
  1711  000B94  B48C               	btfsc	3980,2,c	;volatile
  1712  000B96  D004               	goto	u72_20
  1713  000B98  0100               	movlb	0	; () banked
  1714  000B9A  6BED               	clrf	??_task_3& (0+255),b
  1715  000B9C  2BED               	incf	??_task_3& (0+255),f,b
  1716  000B9E  D002               	goto	u73_28
  1717  000BA0                     u72_20:
  1718  000BA0  0100               	movlb	0	; () banked
  1719  000BA2  6BED               	clrf	??_task_3& (0+255),b
  1720  000BA4                     u73_28:
  1721  000BA4  0100               	movlb	0	; () banked
  1722  000BA6  47ED               	rlncf	??_task_3& (0+255),f,b
  1723  000BA8  47ED               	rlncf	??_task_3& (0+255),f,b
  1724  000BAA  5083               	movf	3971,w,c	;volatile
  1725  000BAC  0100               	movlb	0	; () banked
  1726  000BAE  19ED               	xorwf	??_task_3& (0+255),w,b
  1727  000BB0  0BFB               	andlw	-5
  1728  000BB2  19ED               	xorwf	??_task_3& (0+255),w,b
  1729  000BB4  6E83               	movwf	3971,c	;volatile
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;main.c: 37: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1733  000BB6  0E00               	movlw	0
  1734  000BB8  0100               	movlb	0	; () banked
  1735  000BBA  6FEF               	movwf	(task_3@i+1)& (0+255),b
  1736  000BBC  0E00               	movlw	0
  1737  000BBE  6FEE               	movwf	task_3@i& (0+255),b
  1738  000BC0                     l1535:
  1739                           
  1740                           ; BSR set to: 0
  1741  000BC0  0E60               	movlw	96
  1742  000BC2  0100               	movlb	0	; () banked
  1743  000BC4  5DEE               	subwf	task_3@i& (0+255),w,b
  1744  000BC6  0EEA               	movlw	234
  1745  000BC8  0100               	movlb	0	; () banked
  1746  000BCA  59EF               	subwfb	(task_3@i+1)& (0+255),w,b
  1747  000BCC  B0D8               	btfsc	status,0,c
  1748  000BCE  D7E2               	goto	l1531
  1749                           
  1750                           ; BSR set to: 0
  1751                           
  1752                           ; BSR set to: 0
  1753  000BD0  F000               	nop	
  1754  000BD2  0100               	movlb	0	; () banked
  1755  000BD4  4BEE               	infsnz	task_3@i& (0+255),f,b
  1756  000BD6  2BEF               	incf	(task_3@i+1)& (0+255),f,b
  1757  000BD8  D7F3               	goto	l1535
  1758  000BDA                     __end_of_task_3:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           prodh	equ	0xFF4
  1762                           prodl	equ	0xFF3
  1763                           intcon	equ	0xFF2
  1764                           intcon2	equ	0xFF1
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1h	equ	0xFE2
  1769                           fsr1l	equ	0xFE1
  1770                           bsr	equ	0xFE0
  1771                           indf2	equ	0xFDF
  1772                           postinc2	equ	0xFDE
  1773                           postdec2	equ	0xFDD
  1774                           fsr2h	equ	0xFDA
  1775                           fsr2l	equ	0xFD9
  1776                           status	equ	0xFD8
  1777                           
  1778 ;; *************** function _task_idle_callback *****************
  1779 ;; Defined at:
  1780 ;;		line 12 in file "kernel/dispatcher.c"
  1781 ;; Parameters:    Size  Location     Type
  1782 ;;		None
  1783 ;; Auto vars:     Size  Location     Type
  1784 ;;		None
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		None
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1794 ;;      Params:         0       0       0       0       0       0       0
  1795 ;;      Locals:         0       0       0       0       0       0       0
  1796 ;;      Temps:          0       0       0       0       0       0       0
  1797 ;;      Totals:         0       0       0       0       0       0       0
  1798 ;;Total ram usage:        0 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:    5
  1801 ;; This function calls:
  1802 ;;		Nothing
  1803 ;; This function is called by:
  1804 ;;		_dispatcher_init
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text13
  1809  000E4E                     __ptext13:
  1810                           	opt stack 0
  1811  000E4E                     _task_idle_callback:
  1812                           	opt stack 21
  1813  000E4E                     l141:
  1814  000E4E  F000               	nop		;# 
  1815  000E50  D7FE               	goto	l141
  1816  000E52                     __end_of_task_idle_callback:
  1817                           	opt stack 0
  1818                           tblptru	equ	0xFF8
  1819                           prodh	equ	0xFF4
  1820                           prodl	equ	0xFF3
  1821                           intcon	equ	0xFF2
  1822                           intcon2	equ	0xFF1
  1823                           postinc0	equ	0xFEE
  1824                           wreg	equ	0xFE8
  1825                           postdec1	equ	0xFE5
  1826                           fsr1h	equ	0xFE2
  1827                           fsr1l	equ	0xFE1
  1828                           bsr	equ	0xFE0
  1829                           indf2	equ	0xFDF
  1830                           postinc2	equ	0xFDE
  1831                           postdec2	equ	0xFDD
  1832                           fsr2h	equ	0xFDA
  1833                           fsr2l	equ	0xFD9
  1834                           status	equ	0xFD8
  1835                           
  1836 ;; *************** function _global_isr *****************
  1837 ;; Defined at:
  1838 ;;		line 21 in file "kernel/interrutps.h"
  1839 ;; Parameters:    Size  Location     Type
  1840 ;;		None
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  i               1   52[COMRAM] unsigned char 
  1843 ;;  i               1   45[COMRAM] unsigned char 
  1844 ;;  n_context       2   57[COMRAM] PTR struct task_context_
  1845 ;;		 -> dispatcher.context(97), idle.context(97), idle(104), dispatcher(317), 
  1846 ;;  n_stack         2   55[COMRAM] PTR struct task_context_
  1847 ;;		 -> dispatcher.stack(94), idle.stack(94), dispatcher.context.stack(94), idle.context.stack(94), 
  1848 ;;		 -> global_isr@n_context(2), 
  1849 ;;  n_task          2   48[COMRAM] PTR struct task_s
  1850 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  1851 ;;  p_context       2   53[COMRAM] PTR struct task_context_
  1852 ;;		 -> dispatcher.context(97), idle.context(97), idle(104), dispatcher(317), 
  1853 ;;  p_stack         2   50[COMRAM] PTR struct task_context_
  1854 ;;		 -> dispatcher.stack(94), idle.stack(94), dispatcher.context.stack(94), idle.context.stack(94), 
  1855 ;;		 -> global_isr@p_context(2), 
  1856 ;;  p_task          2   46[COMRAM] PTR struct task_s
  1857 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1867 ;;      Params:         0       0       0       0       0       0       0
  1868 ;;      Locals:        14       0       0       0       0       0       0
  1869 ;;      Temps:         21       0       0       0       0       0       0
  1870 ;;      Totals:        35       0       0       0       0       0       0
  1871 ;;Total ram usage:       35 bytes
  1872 ;; Hardware stack levels used:    1
  1873 ;; Hardware stack levels required when called:    4
  1874 ;; This function calls:
  1875 ;;		_timer0_isr
  1876 ;; This function is called by:
  1877 ;;		Interrupt level 2
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	intcode
  1882  000008                     __pintcode:
  1883                           	opt stack 0
  1884  000008                     _global_isr:
  1885                           	opt stack 21
  1886                           
  1887                           ;incstack = 0
  1888  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1889  00000A  CFFA F020          	movff	pclath,??_global_isr+7
  1890  00000E  CFFB F021          	movff	pclatu,??_global_isr+8
  1891  000012  ED49  F003         	call	int_func,f	;refresh shadow registers
  1892                           pclatu	equ	0xFFB
  1893                           pclath	equ	0xFFA
  1894                           tblptru	equ	0xFF8
  1895                           prodh	equ	0xFF4
  1896                           prodl	equ	0xFF3
  1897                           intcon	equ	0xFF2
  1898                           intcon2	equ	0xFF1
  1899                           postinc0	equ	0xFEE
  1900                           wreg	equ	0xFE8
  1901                           postdec1	equ	0xFE5
  1902                           fsr1h	equ	0xFE2
  1903                           fsr1l	equ	0xFE1
  1904                           bsr	equ	0xFE0
  1905                           indf2	equ	0xFDF
  1906                           postinc2	equ	0xFDE
  1907                           postdec2	equ	0xFDD
  1908                           fsr2h	equ	0xFDA
  1909                           fsr2l	equ	0xFD9
  1910                           status	equ	0xFD8
  1911                           
  1912                           	psect	intcode_body
  1913  000692                     __pintcode_body:
  1914                           	opt stack 21
  1915  000692                     int_func:
  1916                           	opt stack 21
  1917  000692  0006               	pop		; remove dummy address from shadow register refresh
  1918  000694  CFE9 F022          	movff	fsr0l,??_global_isr+9
  1919  000698  CFEA F023          	movff	fsr0h,??_global_isr+10
  1920  00069C  CFE1 F024          	movff	fsr1l,??_global_isr+11
  1921  0006A0  CFE2 F025          	movff	fsr1h,??_global_isr+12
  1922  0006A4  CFD9 F026          	movff	fsr2l,??_global_isr+13
  1923  0006A8  CFDA F027          	movff	fsr2h,??_global_isr+14
  1924  0006AC  CFF3 F028          	movff	prodl,??_global_isr+15
  1925  0006B0  CFF4 F029          	movff	prodh,??_global_isr+16
  1926  0006B4  CFF6 F02A          	movff	tblptrl,??_global_isr+17
  1927  0006B8  CFF7 F02B          	movff	tblptrh,??_global_isr+18
  1928  0006BC  CFF8 F02C          	movff	tblptru,??_global_isr+19
  1929  0006C0  CFF5 F02D          	movff	tablat,??_global_isr+20
  1930                           
  1931                           ;interrutps.h: 22: _WREG = WREG;
  1932  0006C4  6E41               	movwf	__WREG,c
  1933                           
  1934                           ;interrutps.h: 23: _BSR = BSR;
  1935  0006C6  CFE0 F03F          	movff	bsr,__BSR	;volatile
  1936                           
  1937                           ;interrutps.h: 24: _STATUS = STATUS;
  1938  0006CA  CFD8 F040          	movff	status,__STATUS	;volatile
  1939                           
  1940                           ;interrutps.h: 26: if( INTCONbits.TMR0IE && INTCONbits.TMR0IF ) {
  1941  0006CE  BAF2               	btfsc	intcon,5,c	;volatile
  1942  0006D0  A4F2               	btfss	intcon,2,c	;volatile
  1943  0006D2  D0DE               	goto	i2l103
  1944                           
  1945                           ;interrutps.h: 29: task_t* p_task = (dispatcher.running);
  1946                           
  1947                           ;interrutps.h: 28: do {
  1948  0006D4  C444  F02F         	movff	_dispatcher+313,global_isr@p_task
  1949  0006D8  C445  F030         	movff	_dispatcher+314,global_isr@p_task+1
  1950                           
  1951                           ;interrutps.h: 30: if( p_task == ((void*)0) ) { break; }
  1952  0006DC  502F               	movf	global_isr@p_task,w,c
  1953  0006DE  1030               	iorwf	global_isr@p_task+1,w,c
  1954  0006E0  B4D8               	btfsc	status,2,c
  1955  0006E2  D05C               	goto	i2l1579
  1956                           
  1957                           ;interrutps.h: 31: task_context_t* p_context = &(p_task->context);
  1958  0006E4  0E07               	movlw	7
  1959  0006E6  242F               	addwf	global_isr@p_task,w,c
  1960  0006E8  6E36               	movwf	global_isr@p_context,c
  1961  0006EA  0E00               	movlw	0
  1962  0006EC  2030               	addwfc	global_isr@p_task+1,w,c
  1963  0006EE  6E37               	movwf	global_isr@p_context+1,c
  1964                           
  1965                           ;interrutps.h: 32: p_context->work = _WREG;
  1966  0006F0  C036  FFD9         	movff	global_isr@p_context,fsr2l
  1967  0006F4  C037  FFDA         	movff	global_isr@p_context+1,fsr2h
  1968  0006F8  C041  FFDF         	movff	__WREG,indf2
  1969                           
  1970                           ;interrutps.h: 33: p_context->bsr = _BSR;
  1971  0006FC  EE20 F001          	lfsr	2,1
  1972  000700  5036               	movf	global_isr@p_context,w,c
  1973  000702  26D9               	addwf	fsr2l,f,c
  1974  000704  5037               	movf	global_isr@p_context+1,w,c
  1975  000706  22DA               	addwfc	fsr2h,f,c
  1976  000708  C03F  FFDF         	movff	__BSR,indf2
  1977                           
  1978                           ;interrutps.h: 34: p_context->status = _STATUS;
  1979  00070C  EE20 F002          	lfsr	2,2
  1980  000710  5036               	movf	global_isr@p_context,w,c
  1981  000712  26D9               	addwf	fsr2l,f,c
  1982  000714  5037               	movf	global_isr@p_context+1,w,c
  1983  000716  22DA               	addwfc	fsr2h,f,c
  1984  000718  C040  FFDF         	movff	__STATUS,indf2
  1985                           
  1986                           ;interrutps.h: 35: task_context_stack_t* p_stack = &p_context->stack;
  1987  00071C  0E03               	movlw	3
  1988  00071E  2436               	addwf	global_isr@p_context,w,c
  1989  000720  6E33               	movwf	global_isr@p_stack,c
  1990  000722  0E00               	movlw	0
  1991  000724  2037               	addwfc	global_isr@p_context+1,w,c
  1992  000726  6E34               	movwf	global_isr@p_stack+1,c
  1993                           
  1994                           ;interrutps.h: 36: while( (STKPTR & 0b11111) > 0 ) {
  1995  000728  D033               	goto	i2l1577
  1996  00072A                     i2l1573:
  1997                           
  1998                           ;interrutps.h: 37: uint8_t i = p_stack->size++;
  1999  00072A  EE20 F05D          	lfsr	2,93
  2000  00072E  5033               	movf	global_isr@p_stack,w,c
  2001  000730  26D9               	addwf	fsr2l,f,c
  2002  000732  5034               	movf	global_isr@p_stack+1,w,c
  2003  000734  22DA               	addwfc	fsr2h,f,c
  2004  000736  50DF               	movf	indf2,w,c
  2005  000738  6E2E               	movwf	global_isr@i,c
  2006  00073A  EE20 F05D          	lfsr	2,93
  2007  00073E  5033               	movf	global_isr@p_stack,w,c
  2008  000740  26D9               	addwf	fsr2l,f,c
  2009  000742  5034               	movf	global_isr@p_stack+1,w,c
  2010  000744  22DA               	addwfc	fsr2h,f,c
  2011  000746  2ADF               	incf	indf2,f,c
  2012                           
  2013                           ;interrutps.h: 38: p_stack->values[i] = (TOSU << 16) | (TOSH << 8) | TOSL;
  2014  000748  50FE               	movf	tosh,w,c	;volatile
  2015  00074A  6E1A               	movwf	(??_global_isr+1)& (0+255),c
  2016  00074C  6A19               	clrf	??_global_isr& (0+255),c
  2017  00074E  50FF               	movf	tosu,w,c	;volatile
  2018  000750  6E1B               	movwf	(??_global_isr+2)& (0+255),c
  2019  000752  6A1C               	clrf	(??_global_isr+3)& (0+255),c
  2020  000754  5019               	movf	??_global_isr,w,c
  2021  000756  121B               	iorwf	??_global_isr+2,f,c
  2022  000758  501A               	movf	??_global_isr+1,w,c
  2023  00075A  121C               	iorwf	??_global_isr+3,f,c
  2024  00075C  50FD               	movf	tosl,w,c	;volatile
  2025  00075E  121B               	iorwf	??_global_isr+2,f,c
  2026  000760  0E00               	movlw	0
  2027  000762  121C               	iorwf	??_global_isr+3,f,c
  2028  000764  C01B  F01D         	movff	??_global_isr+2,??_global_isr+4
  2029  000768  C01C  F01E         	movff	??_global_isr+3,??_global_isr+5
  2030  00076C  6A1F               	clrf	(??_global_isr+6)& (0+255),c
  2031  00076E  BE1E               	btfsc	(??_global_isr+5)& (0+255),7,c
  2032  000770  681F               	setf	(??_global_isr+6)& (0+255),c
  2033  000772  502E               	movf	global_isr@i,w,c
  2034  000774  0D03               	mullw	3
  2035  000776  50F3               	movf	prodl,w,c
  2036  000778  2433               	addwf	global_isr@p_stack,w,c
  2037  00077A  6ED9               	movwf	fsr2l,c
  2038  00077C  50F4               	movf	prodh,w,c
  2039  00077E  2034               	addwfc	global_isr@p_stack+1,w,c
  2040  000780  6EDA               	movwf	fsr2h,c
  2041  000782  C01D  FFDE         	movff	??_global_isr+4,postinc2
  2042  000786  C01E  FFDE         	movff	??_global_isr+5,postinc2
  2043  00078A  C01F  FFDE         	movff	??_global_isr+6,postinc2
  2044  00078E  0006               	pop		;# 
  2045  000790                     i2l1577:
  2046  000790  CFFC F019          	movff	stkptr,??_global_isr	;volatile
  2047  000794  0E1F               	movlw	31
  2048  000796  1619               	andwf	??_global_isr,f,c
  2049  000798  A4D8               	btfss	status,2,c
  2050  00079A  D7C7               	goto	i2l1573
  2051  00079C                     i2l1579:
  2052                           
  2053                           ;interrutps.h: 40: }
  2054                           ;interrutps.h: 41: }while(0);
  2055                           ;interrutps.h: 43: timer0_isr();
  2056  00079C  ECD4  F006         	call	_timer0_isr	;wreg free
  2057                           
  2058                           ;interrutps.h: 46: task_t* n_task = (dispatcher.running);
  2059                           
  2060                           ;interrutps.h: 45: do {
  2061  0007A0  C444  F031         	movff	_dispatcher+313,global_isr@n_task
  2062  0007A4  C445  F032         	movff	_dispatcher+314,global_isr@n_task+1
  2063                           
  2064                           ;interrutps.h: 47: if( n_task == ((void*)0) ) { break; }
  2065  0007A8  5031               	movf	global_isr@n_task,w,c
  2066  0007AA  1032               	iorwf	global_isr@n_task+1,w,c
  2067  0007AC  B4D8               	btfsc	status,2,c
  2068  0007AE  D070               	goto	i2l103
  2069                           
  2070                           ;interrutps.h: 48: task_context_t* n_context = &(n_task->context);
  2071  0007B0  0E07               	movlw	7
  2072  0007B2  2431               	addwf	global_isr@n_task,w,c
  2073  0007B4  6E3A               	movwf	global_isr@n_context,c
  2074  0007B6  0E00               	movlw	0
  2075  0007B8  2032               	addwfc	global_isr@n_task+1,w,c
  2076  0007BA  6E3B               	movwf	global_isr@n_context+1,c
  2077                           
  2078                           ;interrutps.h: 49: _WREG = n_context->work;
  2079  0007BC  C03A  FFD9         	movff	global_isr@n_context,fsr2l
  2080  0007C0  C03B  FFDA         	movff	global_isr@n_context+1,fsr2h
  2081  0007C4  50DF               	movf	indf2,w,c
  2082  0007C6  6E41               	movwf	__WREG,c
  2083                           
  2084                           ;interrutps.h: 50: _BSR = n_context->bsr;
  2085  0007C8  EE20 F001          	lfsr	2,1
  2086  0007CC  503A               	movf	global_isr@n_context,w,c
  2087  0007CE  26D9               	addwf	fsr2l,f,c
  2088  0007D0  503B               	movf	global_isr@n_context+1,w,c
  2089  0007D2  22DA               	addwfc	fsr2h,f,c
  2090  0007D4  50DF               	movf	indf2,w,c
  2091  0007D6  6E3F               	movwf	__BSR,c
  2092                           
  2093                           ;interrutps.h: 51: _STATUS = n_context->status;
  2094  0007D8  EE20 F002          	lfsr	2,2
  2095  0007DC  503A               	movf	global_isr@n_context,w,c
  2096  0007DE  26D9               	addwf	fsr2l,f,c
  2097  0007E0  503B               	movf	global_isr@n_context+1,w,c
  2098  0007E2  22DA               	addwfc	fsr2h,f,c
  2099  0007E4  50DF               	movf	indf2,w,c
  2100  0007E6  6E40               	movwf	__STATUS,c
  2101                           
  2102                           ;interrutps.h: 52: task_context_stack_t* n_stack = &n_context->stack;
  2103  0007E8  0E03               	movlw	3
  2104  0007EA  243A               	addwf	global_isr@n_context,w,c
  2105  0007EC  6E38               	movwf	global_isr@n_stack,c
  2106  0007EE  0E00               	movlw	0
  2107  0007F0  203B               	addwfc	global_isr@n_context+1,w,c
  2108  0007F2  6E39               	movwf	global_isr@n_stack+1,c
  2109                           
  2110                           ;interrutps.h: 53: while( n_stack->size > 0 ) {
  2111  0007F4  D044               	goto	i2l1605
  2112  0007F6                     i2l1597:
  2113                           
  2114                           ;interrutps.h: 54: uint8_t i = --n_stack->size;
  2115  0007F6  EE20 F05D          	lfsr	2,93
  2116  0007FA  5038               	movf	global_isr@n_stack,w,c
  2117  0007FC  26D9               	addwf	fsr2l,f,c
  2118  0007FE  5039               	movf	global_isr@n_stack+1,w,c
  2119  000800  22DA               	addwfc	fsr2h,f,c
  2120  000802  06DF               	decf	indf2,f,c
  2121  000804  50DF               	movf	indf2,w,c
  2122  000806  6E35               	movwf	global_isr@i_581,c
  2123  000808  0005               	push		;# 
  2124                           
  2125                           ;interrutps.h: 56: TOSU = n_stack->values[i] >> 16;
  2126  00080A  0E10               	movlw	16
  2127  00080C  6E19               	movwf	??_global_isr& (0+255),c
  2128  00080E  5035               	movf	global_isr@i_581,w,c
  2129  000810  0D03               	mullw	3
  2130  000812  50F3               	movf	prodl,w,c
  2131  000814  2438               	addwf	global_isr@n_stack,w,c
  2132  000816  6ED9               	movwf	fsr2l,c
  2133  000818  50F4               	movf	prodh,w,c
  2134  00081A  2039               	addwfc	global_isr@n_stack+1,w,c
  2135  00081C  6EDA               	movwf	fsr2h,c
  2136  00081E  CFDE F01A          	movff	postinc2,??_global_isr+1
  2137  000822  CFDE F01B          	movff	postinc2,??_global_isr+2
  2138  000826  CFDE F01C          	movff	postinc2,??_global_isr+3
  2139  00082A  2819               	incf	??_global_isr,w,c
  2140  00082C  6E1D               	movwf	(??_global_isr+4)& (0+255),c
  2141  00082E  D004               	goto	i2u81_40
  2142  000830                     i2u81_45:
  2143  000830  90D8               	bcf	status,0,c
  2144  000832  321C               	rrcf	??_global_isr+3,f,c
  2145  000834  321B               	rrcf	??_global_isr+2,f,c
  2146  000836  321A               	rrcf	??_global_isr+1,f,c
  2147  000838                     i2u81_40:
  2148  000838  2E1D               	decfsz	(??_global_isr+4)& (0+255),f,c
  2149  00083A  D7FA               	goto	i2u81_45
  2150  00083C  501A               	movf	??_global_isr+1,w,c
  2151  00083E  6EFF               	movwf	tosu,c	;volatile
  2152                           
  2153                           ;interrutps.h: 57: TOSH = n_stack->values[i] >> 8;
  2154  000840  5035               	movf	global_isr@i_581,w,c
  2155  000842  0D03               	mullw	3
  2156  000844  50F3               	movf	prodl,w,c
  2157  000846  2438               	addwf	global_isr@n_stack,w,c
  2158  000848  6ED9               	movwf	fsr2l,c
  2159  00084A  50F4               	movf	prodh,w,c
  2160  00084C  2039               	addwfc	global_isr@n_stack+1,w,c
  2161  00084E  6EDA               	movwf	fsr2h,c
  2162  000850  CFDE F019          	movff	postinc2,??_global_isr
  2163  000854  CFDE F01A          	movff	postinc2,??_global_isr+1
  2164  000858  CFDE F01B          	movff	postinc2,??_global_isr+2
  2165  00085C  C01A  F019         	movff	??_global_isr+1,??_global_isr
  2166  000860  C01B  F01A         	movff	??_global_isr+2,??_global_isr+1
  2167  000864  6A1B               	clrf	??_global_isr+2,c
  2168  000866  5019               	movf	??_global_isr,w,c
  2169  000868  6EFE               	movwf	tosh,c	;volatile
  2170                           
  2171                           ;interrutps.h: 58: TOSL = n_stack->values[i] >> 0;
  2172  00086A  5035               	movf	global_isr@i_581,w,c
  2173  00086C  0D03               	mullw	3
  2174  00086E  50F3               	movf	prodl,w,c
  2175  000870  2438               	addwf	global_isr@n_stack,w,c
  2176  000872  6ED9               	movwf	fsr2l,c
  2177  000874  50F4               	movf	prodh,w,c
  2178  000876  2039               	addwfc	global_isr@n_stack+1,w,c
  2179  000878  6EDA               	movwf	fsr2h,c
  2180  00087A  50DF               	movf	indf2,w,c
  2181  00087C  6EFD               	movwf	tosl,c	;volatile
  2182  00087E                     i2l1605:
  2183  00087E  EE20 F05D          	lfsr	2,93
  2184  000882  5038               	movf	global_isr@n_stack,w,c
  2185  000884  26D9               	addwf	fsr2l,f,c
  2186  000886  5039               	movf	global_isr@n_stack+1,w,c
  2187  000888  22DA               	addwfc	fsr2h,f,c
  2188  00088A  50DF               	movf	indf2,w,c
  2189  00088C  A4D8               	btfss	status,2,c
  2190  00088E  D7B3               	goto	i2l1597
  2191  000890                     i2l103:
  2192                           
  2193                           ;interrutps.h: 61: }
  2194                           ;interrutps.h: 62: } while(0);
  2195                           ;interrutps.h: 63: }
  2196                           ;interrutps.h: 64: BSR = _BSR;
  2197  000890  C03F  FFE0         	movff	__BSR,bsr	;volatile
  2198                           
  2199                           ;interrutps.h: 65: STATUS = _STATUS;
  2200  000894  C040  FFD8         	movff	__STATUS,status	;volatile
  2201                           
  2202                           ;interrutps.h: 66: WREG = _WREG;
  2203  000898  5041               	movf	__WREG,w,c
  2204  00089A  C02D  FFF5         	movff	??_global_isr+20,tablat
  2205  00089E  C02C  FFF8         	movff	??_global_isr+19,tblptru
  2206  0008A2  C02B  FFF7         	movff	??_global_isr+18,tblptrh
  2207  0008A6  C02A  FFF6         	movff	??_global_isr+17,tblptrl
  2208  0008AA  C029  FFF4         	movff	??_global_isr+16,prodh
  2209  0008AE  C028  FFF3         	movff	??_global_isr+15,prodl
  2210  0008B2  C027  FFDA         	movff	??_global_isr+14,fsr2h
  2211  0008B6  C026  FFD9         	movff	??_global_isr+13,fsr2l
  2212  0008BA  C025  FFE2         	movff	??_global_isr+12,fsr1h
  2213  0008BE  C024  FFE1         	movff	??_global_isr+11,fsr1l
  2214  0008C2  C023  FFEA         	movff	??_global_isr+10,fsr0h
  2215  0008C6  C022  FFE9         	movff	??_global_isr+9,fsr0l
  2216  0008CA  C021  FFFB         	movff	??_global_isr+8,pclatu
  2217  0008CE  C020  FFFA         	movff	??_global_isr+7,pclath
  2218  0008D2  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2219  0008D4  0011               	retfie		f
  2220  0008D6                     __end_of_global_isr:
  2221                           	opt stack 0
  2222                           tosu	equ	0xFFF
  2223                           tosh	equ	0xFFE
  2224                           tosl	equ	0xFFD
  2225                           stkptr	equ	0xFFC
  2226                           pclatu	equ	0xFFB
  2227                           pclath	equ	0xFFA
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           prodh	equ	0xFF4
  2233                           prodl	equ	0xFF3
  2234                           intcon	equ	0xFF2
  2235                           intcon2	equ	0xFF1
  2236                           postinc0	equ	0xFEE
  2237                           fsr0h	equ	0xFEA
  2238                           fsr0l	equ	0xFE9
  2239                           wreg	equ	0xFE8
  2240                           postdec1	equ	0xFE5
  2241                           fsr1h	equ	0xFE2
  2242                           fsr1l	equ	0xFE1
  2243                           bsr	equ	0xFE0
  2244                           indf2	equ	0xFDF
  2245                           postinc2	equ	0xFDE
  2246                           postdec2	equ	0xFDD
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _timer0_isr *****************
  2252 ;; Defined at:
  2253 ;;		line 51 in file "kernel/timers.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;		None
  2256 ;; Auto vars:     Size  Location     Type
  2257 ;;		None
  2258 ;; Return value:  Size  Location     Type
  2259 ;;                  1    wreg      void 
  2260 ;; Registers used:
  2261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2262 ;; Tracked objects:
  2263 ;;		On entry : 0/0
  2264 ;;		On exit  : 0/0
  2265 ;;		Unchanged: 0/0
  2266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2267 ;;      Params:         0       0       0       0       0       0       0
  2268 ;;      Locals:         0       0       0       0       0       0       0
  2269 ;;      Temps:          0       0       0       0       0       0       0
  2270 ;;      Totals:         0       0       0       0       0       0       0
  2271 ;;Total ram usage:        0 bytes
  2272 ;; Hardware stack levels used:    1
  2273 ;; Hardware stack levels required when called:    3
  2274 ;; This function calls:
  2275 ;;		Absolute function
  2276 ;;		_dispatcher_change_context_isr
  2277 ;;		i2_timer0_reset
  2278 ;; This function is called by:
  2279 ;;		_global_isr
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text15
  2284  000DA8                     __ptext15:
  2285                           	opt stack 0
  2286  000DA8                     _timer0_isr:
  2287                           	opt stack 21
  2288                           
  2289                           ;timers.c: 52: timer0_reset();
  2290                           
  2291                           ;incstack = 0
  2292  000DA8  EC1D  F007         	call	i2_timer0_reset	;wreg free
  2293                           
  2294                           ;timers.c: 54: if( _timer0_callback ) {
  2295  000DAC  5042               	movf	__timer0_callback,w,c
  2296  000DAE  1043               	iorwf	__timer0_callback+1,w,c
  2297  000DB0  B4D8               	btfsc	status,2,c
  2298  000DB2  0012               	return	
  2299                           
  2300                           ;timers.c: 55: _timer0_callback();
  2301  000DB4  D801               	call	i2u67_48
  2302  000DB6  0012               	return	
  2303  000DB8                     i2u67_48:
  2304  000DB8  0005               	push	
  2305  000DBA  6EFA               	movwf	pclath,c
  2306  000DBC  5042               	movf	__timer0_callback,w,c
  2307  000DBE  6EFD               	movwf	tosl,c
  2308  000DC0  5043               	movf	__timer0_callback+1,w,c
  2309  000DC2  6EFE               	movwf	tosh,c
  2310  000DC4  50F8               	movf	tblptru,w,c
  2311  000DC6  6EFF               	movwf	tosu,c
  2312  000DC8  50FA               	movf	pclath,w,c
  2313  000DCA  0012               	return		;indir
  2314  000DCC                     __end_of_timer0_isr:
  2315                           	opt stack 0
  2316                           tosu	equ	0xFFF
  2317                           tosh	equ	0xFFE
  2318                           tosl	equ	0xFFD
  2319                           stkptr	equ	0xFFC
  2320                           pclatu	equ	0xFFB
  2321                           pclath	equ	0xFFA
  2322                           tblptru	equ	0xFF8
  2323                           tblptrh	equ	0xFF7
  2324                           tblptrl	equ	0xFF6
  2325                           tablat	equ	0xFF5
  2326                           prodh	equ	0xFF4
  2327                           prodl	equ	0xFF3
  2328                           intcon	equ	0xFF2
  2329                           intcon2	equ	0xFF1
  2330                           postinc0	equ	0xFEE
  2331                           fsr0h	equ	0xFEA
  2332                           fsr0l	equ	0xFE9
  2333                           wreg	equ	0xFE8
  2334                           postdec1	equ	0xFE5
  2335                           fsr1h	equ	0xFE2
  2336                           fsr1l	equ	0xFE1
  2337                           bsr	equ	0xFE0
  2338                           indf2	equ	0xFDF
  2339                           postinc2	equ	0xFDE
  2340                           postdec2	equ	0xFDD
  2341                           fsr2h	equ	0xFDA
  2342                           fsr2l	equ	0xFD9
  2343                           status	equ	0xFD8
  2344                           
  2345 ;; *************** function i2_timer0_reset *****************
  2346 ;; Defined at:
  2347 ;;		line 8 in file "kernel/timers.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		None
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/0
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2361 ;;      Params:         0       0       0       0       0       0       0
  2362 ;;      Locals:         0       0       0       0       0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0
  2364 ;;      Totals:         0       0       0       0       0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; This function calls:
  2368 ;;		Nothing
  2369 ;; This function is called by:
  2370 ;;		_timer0_isr
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text16
  2375  000E3A                     __ptext16:
  2376                           	opt stack 0
  2377  000E3A                     i2_timer0_reset:
  2378                           	opt stack 23
  2379                           
  2380                           ;timers.c: 10: INTCONbits.TMR0IF = 0;
  2381                           
  2382                           ;incstack = 0
  2383  000E3A  94F2               	bcf	intcon,2,c	;volatile
  2384                           
  2385                           ;timers.c: 12: TMR0 = _timer0_delay_us;
  2386  000E3C  C0F5  FFD6         	movff	__timer0_delay_us,4054	;volatile
  2387  000E40  C0F6  FFD7         	movff	__timer0_delay_us+1,4055	;volatile
  2388  000E44  0012               	return		;funcret
  2389  000E46                     __end_ofi2_timer0_reset:
  2390                           	opt stack 0
  2391                           tosu	equ	0xFFF
  2392                           tosh	equ	0xFFE
  2393                           tosl	equ	0xFFD
  2394                           stkptr	equ	0xFFC
  2395                           pclatu	equ	0xFFB
  2396                           pclath	equ	0xFFA
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           intcon	equ	0xFF2
  2404                           intcon2	equ	0xFF1
  2405                           postinc0	equ	0xFEE
  2406                           fsr0h	equ	0xFEA
  2407                           fsr0l	equ	0xFE9
  2408                           wreg	equ	0xFE8
  2409                           postdec1	equ	0xFE5
  2410                           fsr1h	equ	0xFE2
  2411                           fsr1l	equ	0xFE1
  2412                           bsr	equ	0xFE0
  2413                           indf2	equ	0xFDF
  2414                           postinc2	equ	0xFDE
  2415                           postdec2	equ	0xFDD
  2416                           fsr2h	equ	0xFDA
  2417                           fsr2l	equ	0xFD9
  2418                           status	equ	0xFD8
  2419                           
  2420 ;; *************** function _dispatcher_change_context_isr *****************
  2421 ;; Defined at:
  2422 ;;		line 48 in file "kernel/dispatcher.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  next            2   22[COMRAM] PTR struct task_s
  2427 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2437 ;;      Params:         0       0       0       0       0       0       0
  2438 ;;      Locals:         2       0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0
  2440 ;;      Totals:         2       0       0       0       0       0       0
  2441 ;;Total ram usage:        2 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    2
  2444 ;; This function calls:
  2445 ;;		_scheduler_round_robin
  2446 ;;		_task_running
  2447 ;;		i2_task_ready
  2448 ;; This function is called by:
  2449 ;;		_dispatcher_start
  2450 ;;		_timer0_isr
  2451 ;; This function uses a non-reentrant model
  2452 ;;
  2453                           
  2454                           	psect	text17
  2455  000C22                     __ptext17:
  2456                           	opt stack 0
  2457  000C22                     _dispatcher_change_context_isr:
  2458                           	opt stack 21
  2459                           
  2460                           ;dispatcher.c: 50: task_t* next = dispatcher.callback();
  2461                           
  2462                           ;incstack = 0
  2463  000C22  EE24  F046         	lfsr	2,_dispatcher+315
  2464  000C26  D801               	call	i2u65_48
  2465  000C28  D00A               	goto	i2u65_49
  2466  000C2A                     i2u65_48:
  2467  000C2A  0005               	push	
  2468  000C2C  6EFA               	movwf	pclath,c
  2469  000C2E  50DE               	movf	postinc2,w,c
  2470  000C30  6EFD               	movwf	tosl,c
  2471  000C32  50DE               	movf	postinc2,w,c
  2472  000C34  6EFE               	movwf	tosh,c
  2473  000C36  50F8               	movf	tblptru,w,c
  2474  000C38  6EFF               	movwf	tosu,c
  2475  000C3A  50FA               	movf	pclath,w,c
  2476  000C3C  0012               	return		;indir
  2477  000C3E                     i2u65_49:
  2478  000C3E  C007  F017         	movff	?_scheduler_round_robin,dispatcher_change_context_isr@next
  2479  000C42  C008  F018         	movff	?_scheduler_round_robin+1,dispatcher_change_context_isr@next+1
  2480                           
  2481                           ;dispatcher.c: 52: task_ready( dispatcher.running );
  2482  000C46  C444  F001         	movff	_dispatcher+313,i2task_ready@handle
  2483  000C4A  C445  F002         	movff	_dispatcher+314,i2task_ready@handle+1
  2484  000C4E  ECFE  F006         	call	i2_task_ready	;wreg free
  2485                           
  2486                           ;dispatcher.c: 54: dispatcher.running = next;
  2487  000C52  C017  F444         	movff	dispatcher_change_context_isr@next,_dispatcher+313
  2488  000C56  C018  F445         	movff	dispatcher_change_context_isr@next+1,_dispatcher+314
  2489                           
  2490                           ;dispatcher.c: 56: task_running( dispatcher.running );
  2491  000C5A  C444  F001         	movff	_dispatcher+313,task_running@handle
  2492  000C5E  C445  F002         	movff	_dispatcher+314,task_running@handle+1
  2493  000C62  EC07  F007         	call	_task_running	;wreg free
  2494  000C66  0012               	return		;funcret
  2495  000C68                     __end_of_dispatcher_change_context_isr:
  2496                           	opt stack 0
  2497                           tosu	equ	0xFFF
  2498                           tosh	equ	0xFFE
  2499                           tosl	equ	0xFFD
  2500                           stkptr	equ	0xFFC
  2501                           pclatu	equ	0xFFB
  2502                           pclath	equ	0xFFA
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           prodh	equ	0xFF4
  2508                           prodl	equ	0xFF3
  2509                           intcon	equ	0xFF2
  2510                           intcon2	equ	0xFF1
  2511                           postinc0	equ	0xFEE
  2512                           fsr0h	equ	0xFEA
  2513                           fsr0l	equ	0xFE9
  2514                           wreg	equ	0xFE8
  2515                           postdec1	equ	0xFE5
  2516                           fsr1h	equ	0xFE2
  2517                           fsr1l	equ	0xFE1
  2518                           bsr	equ	0xFE0
  2519                           indf2	equ	0xFDF
  2520                           postinc2	equ	0xFDE
  2521                           postdec2	equ	0xFDD
  2522                           fsr2h	equ	0xFDA
  2523                           fsr2l	equ	0xFD9
  2524                           status	equ	0xFD8
  2525                           
  2526 ;; *************** function i2_task_ready *****************
  2527 ;; Defined at:
  2528 ;;		line 24 in file "kernel/task.c"
  2529 ;; Parameters:    Size  Location     Type
  2530 ;;  handle          2    0[COMRAM] PTR struct task_s
  2531 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;                  1    wreg      void 
  2536 ;; Registers used:
  2537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2538 ;; Tracked objects:
  2539 ;;		On entry : 0/0
  2540 ;;		On exit  : 0/0
  2541 ;;		Unchanged: 0/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2543 ;;      Params:         2       0       0       0       0       0       0
  2544 ;;      Locals:         0       0       0       0       0       0       0
  2545 ;;      Temps:          0       0       0       0       0       0       0
  2546 ;;      Totals:         2       0       0       0       0       0       0
  2547 ;;Total ram usage:        2 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; This function calls:
  2550 ;;		Nothing
  2551 ;; This function is called by:
  2552 ;;		_dispatcher_change_context_isr
  2553 ;; This function uses a non-reentrant model
  2554 ;;
  2555                           
  2556                           	psect	text18
  2557  000DFC                     __ptext18:
  2558                           	opt stack 0
  2559  000DFC                     i2_task_ready:
  2560                           	opt stack 22
  2561                           
  2562                           ;task.c: 25: handle->state = task_state_ready;
  2563                           
  2564                           ;incstack = 0
  2565  000DFC  EE20 F004          	lfsr	2,4
  2566  000E00  5001               	movf	i2task_ready@handle,w,c
  2567  000E02  26D9               	addwf	fsr2l,f,c
  2568  000E04  5002               	movf	i2task_ready@handle+1,w,c
  2569  000E06  22DA               	addwfc	fsr2h,f,c
  2570  000E08  0E00               	movlw	0
  2571  000E0A  6EDF               	movwf	indf2,c
  2572  000E0C  0012               	return		;funcret
  2573  000E0E                     __end_ofi2_task_ready:
  2574                           	opt stack 0
  2575                           tosu	equ	0xFFF
  2576                           tosh	equ	0xFFE
  2577                           tosl	equ	0xFFD
  2578                           stkptr	equ	0xFFC
  2579                           pclatu	equ	0xFFB
  2580                           pclath	equ	0xFFA
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           prodh	equ	0xFF4
  2586                           prodl	equ	0xFF3
  2587                           intcon	equ	0xFF2
  2588                           intcon2	equ	0xFF1
  2589                           postinc0	equ	0xFEE
  2590                           fsr0h	equ	0xFEA
  2591                           fsr0l	equ	0xFE9
  2592                           wreg	equ	0xFE8
  2593                           postdec1	equ	0xFE5
  2594                           fsr1h	equ	0xFE2
  2595                           fsr1l	equ	0xFE1
  2596                           bsr	equ	0xFE0
  2597                           indf2	equ	0xFDF
  2598                           postinc2	equ	0xFDE
  2599                           postdec2	equ	0xFDD
  2600                           fsr2h	equ	0xFDA
  2601                           fsr2l	equ	0xFD9
  2602                           status	equ	0xFD8
  2603                           
  2604 ;; *************** function _task_running *****************
  2605 ;; Defined at:
  2606 ;;		line 28 in file "kernel/task.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  handle          2    0[COMRAM] PTR struct task_s
  2609 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2621 ;;      Params:         2       0       0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0
  2624 ;;      Totals:         2       0       0       0       0       0       0
  2625 ;;Total ram usage:        2 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; This function calls:
  2628 ;;		Nothing
  2629 ;; This function is called by:
  2630 ;;		_dispatcher_change_context_isr
  2631 ;; This function uses a non-reentrant model
  2632 ;;
  2633                           
  2634                           	psect	text19
  2635  000E0E                     __ptext19:
  2636                           	opt stack 0
  2637  000E0E                     _task_running:
  2638                           	opt stack 22
  2639                           
  2640                           ;task.c: 29: handle->state = task_state_running;
  2641                           
  2642                           ;incstack = 0
  2643  000E0E  EE20 F004          	lfsr	2,4
  2644  000E12  5001               	movf	task_running@handle,w,c
  2645  000E14  26D9               	addwf	fsr2l,f,c
  2646  000E16  5002               	movf	task_running@handle+1,w,c
  2647  000E18  22DA               	addwfc	fsr2h,f,c
  2648  000E1A  0E01               	movlw	1
  2649  000E1C  6EDF               	movwf	indf2,c
  2650  000E1E  0012               	return		;funcret
  2651  000E20                     __end_of_task_running:
  2652                           	opt stack 0
  2653                           tosu	equ	0xFFF
  2654                           tosh	equ	0xFFE
  2655                           tosl	equ	0xFFD
  2656                           stkptr	equ	0xFFC
  2657                           pclatu	equ	0xFFB
  2658                           pclath	equ	0xFFA
  2659                           tblptru	equ	0xFF8
  2660                           tblptrh	equ	0xFF7
  2661                           tblptrl	equ	0xFF6
  2662                           tablat	equ	0xFF5
  2663                           prodh	equ	0xFF4
  2664                           prodl	equ	0xFF3
  2665                           intcon	equ	0xFF2
  2666                           intcon2	equ	0xFF1
  2667                           postinc0	equ	0xFEE
  2668                           fsr0h	equ	0xFEA
  2669                           fsr0l	equ	0xFE9
  2670                           wreg	equ	0xFE8
  2671                           postdec1	equ	0xFE5
  2672                           fsr1h	equ	0xFE2
  2673                           fsr1l	equ	0xFE1
  2674                           bsr	equ	0xFE0
  2675                           indf2	equ	0xFDF
  2676                           postinc2	equ	0xFDE
  2677                           postdec2	equ	0xFDD
  2678                           fsr2h	equ	0xFDA
  2679                           fsr2l	equ	0xFD9
  2680                           status	equ	0xFD8
  2681                           
  2682 ;; *************** function _scheduler_round_robin *****************
  2683 ;; Defined at:
  2684 ;;		line 18 in file "kernel/scheduler.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  j               2   16[COMRAM] int 
  2689 ;;  i               2   18[COMRAM] int 
  2690 ;;  i               2   20[COMRAM] int 
  2691 ;;  next            2   14[COMRAM] PTR struct task_s
  2692 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2693 ;;  offset          2   12[COMRAM] int 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  2    6[COMRAM] PTR struct task_s
  2696 ;; Registers used:
  2697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2703 ;;      Params:         2       0       0       0       0       0       0
  2704 ;;      Locals:        10       0       0       0       0       0       0
  2705 ;;      Temps:          4       0       0       0       0       0       0
  2706 ;;      Totals:        16       0       0       0       0       0       0
  2707 ;;Total ram usage:       16 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    1
  2710 ;; This function calls:
  2711 ;;		___awmod
  2712 ;;		___wmul
  2713 ;; This function is called by:
  2714 ;;		_dispatcher_init
  2715 ;;		_dispatcher_change_context_isr
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text20
  2720  0008D6                     __ptext20:
  2721                           	opt stack 0
  2722  0008D6                     _scheduler_round_robin:
  2723                           	opt stack 21
  2724                           
  2725                           ;scheduler.c: 19: int offset = -1;
  2726                           
  2727                           ;incstack = 0
  2728  0008D6  680D               	setf	scheduler_round_robin@offset,c
  2729  0008D8  680E               	setf	scheduler_round_robin@offset+1,c
  2730                           
  2731                           ;scheduler.c: 20: for( int i = 0; i < 3; i++ ) {
  2732  0008DA  0E00               	movlw	0
  2733  0008DC  6E16               	movwf	scheduler_round_robin@i+1,c
  2734  0008DE  0E00               	movlw	0
  2735  0008E0  6E15               	movwf	scheduler_round_robin@i,c
  2736  0008E2                     i2l1415:
  2737  0008E2  BE16               	btfsc	scheduler_round_robin@i+1,7,c
  2738  0008E4  D006               	goto	i2l1419
  2739  0008E6  5016               	movf	scheduler_round_robin@i+1,w,c
  2740  0008E8  E127               	bnz	i2l1427
  2741  0008EA  0E03               	movlw	3
  2742  0008EC  5C15               	subwf	scheduler_round_robin@i,w,c
  2743  0008EE  B0D8               	btfsc	status,0,c
  2744  0008F0  D023               	goto	i2l1427
  2745  0008F2                     i2l1419:
  2746                           
  2747                           ;scheduler.c: 21: if( (&dispatcher.tasks[i]) == dispatcher.running ) {
  2748  0008F2  EE24  F044         	lfsr	2,_dispatcher+313
  2749  0008F6  C015  F001         	movff	scheduler_round_robin@i,___wmul@multiplier
  2750  0008FA  C016  F002         	movff	scheduler_round_robin@i+1,___wmul@multiplier+1
  2751  0008FE  0E00               	movlw	0
  2752  000900  6E04               	movwf	___wmul@multiplicand+1,c
  2753  000902  0E68               	movlw	104
  2754  000904  6E03               	movwf	___wmul@multiplicand,c
  2755  000906  ECC1  F006         	call	___wmul	;wreg free
  2756  00090A  0E0B               	movlw	low _dispatcher
  2757  00090C  6E0B               	movwf	(??_scheduler_round_robin+2)& (0+255),c
  2758  00090E  0E03               	movlw	high _dispatcher
  2759  000910  6E0C               	movwf	(??_scheduler_round_robin+3)& (0+255),c
  2760  000912  5001               	movf	?___wmul,w,c
  2761  000914  260B               	addwf	??_scheduler_round_robin+2,f,c
  2762  000916  5002               	movf	?___wmul+1,w,c
  2763  000918  220C               	addwfc	??_scheduler_round_robin+3,f,c
  2764  00091A  50DE               	movf	postinc2,w,c
  2765  00091C  180B               	xorwf	??_scheduler_round_robin+2,w,c
  2766  00091E  E109               	bnz	i2l1423
  2767  000920  50DE               	movf	postinc2,w,c
  2768  000922  180C               	xorwf	??_scheduler_round_robin+3,w,c
  2769  000924  A4D8               	btfss	status,2,c
  2770  000926  D005               	goto	i2l1423
  2771                           
  2772                           ;scheduler.c: 22: offset = i;
  2773  000928  C015  F00D         	movff	scheduler_round_robin@i,scheduler_round_robin@offset
  2774  00092C  C016  F00E         	movff	scheduler_round_robin@i+1,scheduler_round_robin@offset+1
  2775                           
  2776                           ;scheduler.c: 23: break;
  2777  000930  D003               	goto	i2l1427
  2778  000932                     i2l1423:
  2779  000932  4A15               	infsnz	scheduler_round_robin@i,f,c
  2780  000934  2A16               	incf	scheduler_round_robin@i+1,f,c
  2781  000936  D7D5               	goto	i2l1415
  2782  000938                     i2l1427:
  2783                           
  2784                           ;scheduler.c: 24: }
  2785                           ;scheduler.c: 25: }
  2786                           ;scheduler.c: 29: task_t* next = &idle;
  2787  000938  0E80               	movlw	low _idle
  2788  00093A  6E0F               	movwf	scheduler_round_robin@next,c
  2789  00093C  0E00               	movlw	high _idle
  2790  00093E  6E10               	movwf	scheduler_round_robin@next+1,c
  2791                           
  2792                           ;scheduler.c: 30: for( int i = 0; i < 3; i++ ) {
  2793  000940  0E00               	movlw	0
  2794  000942  6E14               	movwf	scheduler_round_robin@i_743+1,c
  2795  000944  0E00               	movlw	0
  2796  000946  6E13               	movwf	scheduler_round_robin@i_743,c
  2797  000948                     i2l1431:
  2798  000948  BE14               	btfsc	scheduler_round_robin@i_743+1,7,c
  2799  00094A  D006               	goto	i2l1435
  2800  00094C  5014               	movf	scheduler_round_robin@i_743+1,w,c
  2801  00094E  E145               	bnz	i2l1445
  2802  000950  0E03               	movlw	3
  2803  000952  5C13               	subwf	scheduler_round_robin@i_743,w,c
  2804  000954  B0D8               	btfsc	status,0,c
  2805  000956  D041               	goto	i2l1445
  2806  000958                     i2l1435:
  2807                           
  2808                           ;scheduler.c: 33: int j = (offset+1+i) % 3;
  2809  000958  5013               	movf	scheduler_round_robin@i_743,w,c
  2810  00095A  240D               	addwf	scheduler_round_robin@offset,w,c
  2811  00095C  6E09               	movwf	??_scheduler_round_robin& (0+255),c
  2812  00095E  5014               	movf	scheduler_round_robin@i_743+1,w,c
  2813  000960  200E               	addwfc	scheduler_round_robin@offset+1,w,c
  2814  000962  6E0A               	movwf	(??_scheduler_round_robin+1)& (0+255),c
  2815  000964  0E01               	movlw	1
  2816  000966  2409               	addwf	??_scheduler_round_robin,w,c
  2817  000968  6E01               	movwf	___awmod@dividend,c
  2818  00096A  0E00               	movlw	0
  2819  00096C  200A               	addwfc	??_scheduler_round_robin+1,w,c
  2820  00096E  6E02               	movwf	___awmod@dividend+1,c
  2821  000970  0E00               	movlw	0
  2822  000972  6E04               	movwf	___awmod@divisor+1,c
  2823  000974  0E03               	movlw	3
  2824  000976  6E03               	movwf	___awmod@divisor,c
  2825  000978  EC90  F005         	call	___awmod	;wreg free
  2826  00097C  C001  F011         	movff	?___awmod,scheduler_round_robin@j
  2827  000980  C002  F012         	movff	?___awmod+1,scheduler_round_robin@j+1
  2828                           
  2829                           ;scheduler.c: 34: if( dispatcher.tasks[j].state == task_state_ready ) {
  2830  000984  C011  F001         	movff	scheduler_round_robin@j,___wmul@multiplier
  2831  000988  C012  F002         	movff	scheduler_round_robin@j+1,___wmul@multiplier+1
  2832  00098C  0E00               	movlw	0
  2833  00098E  6E04               	movwf	___wmul@multiplicand+1,c
  2834  000990  0E68               	movlw	104
  2835  000992  6E03               	movwf	___wmul@multiplicand,c
  2836  000994  ECC1  F006         	call	___wmul	;wreg free
  2837  000998  0E04               	movlw	4
  2838  00099A  2601               	addwf	?___wmul,f,c
  2839  00099C  0E00               	movlw	0
  2840  00099E  2202               	addwfc	?___wmul+1,f,c
  2841  0009A0  0E0B               	movlw	low _dispatcher
  2842  0009A2  2401               	addwf	?___wmul,w,c
  2843  0009A4  6ED9               	movwf	fsr2l,c
  2844  0009A6  0E03               	movlw	high _dispatcher
  2845  0009A8  2002               	addwfc	?___wmul+1,w,c
  2846  0009AA  6EDA               	movwf	fsr2h,c
  2847  0009AC  50DF               	movf	indf2,w,c
  2848  0009AE  A4D8               	btfss	status,2,c
  2849  0009B0  D011               	goto	i2l1441
  2850                           
  2851                           ;scheduler.c: 35: next = &dispatcher.tasks[j];
  2852  0009B2  C011  F001         	movff	scheduler_round_robin@j,___wmul@multiplier
  2853  0009B6  C012  F002         	movff	scheduler_round_robin@j+1,___wmul@multiplier+1
  2854  0009BA  0E00               	movlw	0
  2855  0009BC  6E04               	movwf	___wmul@multiplicand+1,c
  2856  0009BE  0E68               	movlw	104
  2857  0009C0  6E03               	movwf	___wmul@multiplicand,c
  2858  0009C2  ECC1  F006         	call	___wmul	;wreg free
  2859  0009C6  0E0B               	movlw	low _dispatcher
  2860  0009C8  2401               	addwf	?___wmul,w,c
  2861  0009CA  6E0F               	movwf	scheduler_round_robin@next,c
  2862  0009CC  0E03               	movlw	high _dispatcher
  2863  0009CE  2002               	addwfc	?___wmul+1,w,c
  2864  0009D0  6E10               	movwf	scheduler_round_robin@next+1,c
  2865                           
  2866                           ;scheduler.c: 36: break;
  2867  0009D2  D003               	goto	i2l1445
  2868  0009D4                     i2l1441:
  2869  0009D4  4A13               	infsnz	scheduler_round_robin@i_743,f,c
  2870  0009D6  2A14               	incf	scheduler_round_robin@i_743+1,f,c
  2871  0009D8  D7B7               	goto	i2l1431
  2872  0009DA                     i2l1445:
  2873                           
  2874                           ;scheduler.c: 37: }
  2875                           ;scheduler.c: 38: }
  2876                           ;scheduler.c: 40: return next;
  2877  0009DA  C00F  F007         	movff	scheduler_round_robin@next,?_scheduler_round_robin
  2878  0009DE  C010  F008         	movff	scheduler_round_robin@next+1,?_scheduler_round_robin+1
  2879  0009E2  0012               	return	
  2880  0009E4                     __end_of_scheduler_round_robin:
  2881                           	opt stack 0
  2882                           tosu	equ	0xFFF
  2883                           tosh	equ	0xFFE
  2884                           tosl	equ	0xFFD
  2885                           stkptr	equ	0xFFC
  2886                           pclatu	equ	0xFFB
  2887                           pclath	equ	0xFFA
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           prodh	equ	0xFF4
  2893                           prodl	equ	0xFF3
  2894                           intcon	equ	0xFF2
  2895                           intcon2	equ	0xFF1
  2896                           postinc0	equ	0xFEE
  2897                           fsr0h	equ	0xFEA
  2898                           fsr0l	equ	0xFE9
  2899                           wreg	equ	0xFE8
  2900                           postdec1	equ	0xFE5
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           bsr	equ	0xFE0
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           postdec2	equ	0xFDD
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function ___wmul *****************
  2912 ;; Defined at:
  2913 ;;		line 15 in file "/home/bruno/Programs/microchip/xc8/v1.37/sources/common/Umul16.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  multiplier      2    0[COMRAM] unsigned int 
  2916 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  product         2    4[COMRAM] unsigned int 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  2    0[COMRAM] unsigned int 
  2921 ;; Registers used:
  2922 ;;		wreg, status,2, status,0, prodl, prodh
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2928 ;;      Params:         4       0       0       0       0       0       0
  2929 ;;      Locals:         2       0       0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0
  2931 ;;      Totals:         6       0       0       0       0       0       0
  2932 ;;Total ram usage:        6 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_scheduler_round_robin
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text21
  2942  000D82                     __ptext21:
  2943                           	opt stack 0
  2944  000D82                     ___wmul:
  2945                           	opt stack 21
  2946                           
  2947                           ;incstack = 0
  2948  000D82  5001               	movf	___wmul@multiplier,w,c
  2949  000D84  0203               	mulwf	___wmul@multiplicand,c
  2950  000D86  CFF3 F005          	movff	prodl,___wmul@product
  2951  000D8A  CFF4 F006          	movff	prodh,___wmul@product+1
  2952  000D8E  5001               	movf	___wmul@multiplier,w,c
  2953  000D90  0204               	mulwf	___wmul@multiplicand+1,c
  2954  000D92  50F3               	movf	prodl,w,c
  2955  000D94  2606               	addwf	___wmul@product+1,f,c
  2956  000D96  5002               	movf	___wmul@multiplier+1,w,c
  2957  000D98  0203               	mulwf	___wmul@multiplicand,c
  2958  000D9A  50F3               	movf	prodl,w,c
  2959  000D9C  2606               	addwf	___wmul@product+1,f,c
  2960  000D9E  C005  F001         	movff	___wmul@product,?___wmul
  2961  000DA2  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2962  000DA6  0012               	return	
  2963  000DA8                     __end_of___wmul:
  2964                           	opt stack 0
  2965                           tosu	equ	0xFFF
  2966                           tosh	equ	0xFFE
  2967                           tosl	equ	0xFFD
  2968                           stkptr	equ	0xFFC
  2969                           pclatu	equ	0xFFB
  2970                           pclath	equ	0xFFA
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           prodh	equ	0xFF4
  2976                           prodl	equ	0xFF3
  2977                           intcon	equ	0xFF2
  2978                           intcon2	equ	0xFF1
  2979                           postinc0	equ	0xFEE
  2980                           fsr0h	equ	0xFEA
  2981                           fsr0l	equ	0xFE9
  2982                           wreg	equ	0xFE8
  2983                           postdec1	equ	0xFE5
  2984                           fsr1h	equ	0xFE2
  2985                           fsr1l	equ	0xFE1
  2986                           bsr	equ	0xFE0
  2987                           indf2	equ	0xFDF
  2988                           postinc2	equ	0xFDE
  2989                           postdec2	equ	0xFDD
  2990                           fsr2h	equ	0xFDA
  2991                           fsr2l	equ	0xFD9
  2992                           status	equ	0xFD8
  2993                           
  2994 ;; *************** function ___awmod *****************
  2995 ;; Defined at:
  2996 ;;		line 8 in file "/home/bruno/Programs/microchip/xc8/v1.37/sources/common/awmod.c"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;  dividend        2    0[COMRAM] int 
  2999 ;;  divisor         2    2[COMRAM] int 
  3000 ;; Auto vars:     Size  Location     Type
  3001 ;;  sign            1    5[COMRAM] unsigned char 
  3002 ;;  counter         1    4[COMRAM] unsigned char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  2    0[COMRAM] int 
  3005 ;; Registers used:
  3006 ;;		wreg, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3012 ;;      Params:         4       0       0       0       0       0       0
  3013 ;;      Locals:         2       0       0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0
  3015 ;;      Totals:         6       0       0       0       0       0       0
  3016 ;;Total ram usage:        6 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; This function calls:
  3019 ;;		Nothing
  3020 ;; This function is called by:
  3021 ;;		_scheduler_round_robin
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text22
  3026  000B20                     __ptext22:
  3027                           	opt stack 0
  3028  000B20                     ___awmod:
  3029                           	opt stack 21
  3030                           
  3031                           ;incstack = 0
  3032  000B20  0E00               	movlw	0
  3033  000B22  6E06               	movwf	___awmod@sign,c
  3034  000B24  AE02               	btfss	___awmod@dividend+1,7,c
  3035  000B26  D006               	goto	i2l1357
  3036  000B28  6C01               	negf	___awmod@dividend,c
  3037  000B2A  1E02               	comf	___awmod@dividend+1,f,c
  3038  000B2C  B0D8               	btfsc	status,0,c
  3039  000B2E  2A02               	incf	___awmod@dividend+1,f,c
  3040  000B30  0E01               	movlw	1
  3041  000B32  6E06               	movwf	___awmod@sign,c
  3042  000B34                     i2l1357:
  3043  000B34  AE04               	btfss	___awmod@divisor+1,7,c
  3044  000B36  D004               	goto	i2l1361
  3045  000B38  6C03               	negf	___awmod@divisor,c
  3046  000B3A  1E04               	comf	___awmod@divisor+1,f,c
  3047  000B3C  B0D8               	btfsc	status,0,c
  3048  000B3E  2A04               	incf	___awmod@divisor+1,f,c
  3049  000B40                     i2l1361:
  3050  000B40  5003               	movf	___awmod@divisor,w,c
  3051  000B42  1004               	iorwf	___awmod@divisor+1,w,c
  3052  000B44  B4D8               	btfsc	status,2,c
  3053  000B46  D018               	goto	i2l1377
  3054  000B48  0E01               	movlw	1
  3055  000B4A  6E05               	movwf	___awmod@counter,c
  3056  000B4C  D004               	goto	i2l1367
  3057  000B4E                     i2l1365:
  3058  000B4E  90D8               	bcf	status,0,c
  3059  000B50  3603               	rlcf	___awmod@divisor,f,c
  3060  000B52  3604               	rlcf	___awmod@divisor+1,f,c
  3061  000B54  2A05               	incf	___awmod@counter,f,c
  3062  000B56                     i2l1367:
  3063  000B56  AE04               	btfss	___awmod@divisor+1,7,c
  3064  000B58  D7FA               	goto	i2l1365
  3065  000B5A                     i2l1369:
  3066  000B5A  5003               	movf	___awmod@divisor,w,c
  3067  000B5C  5C01               	subwf	___awmod@dividend,w,c
  3068  000B5E  5004               	movf	___awmod@divisor+1,w,c
  3069  000B60  5802               	subwfb	___awmod@dividend+1,w,c
  3070  000B62  A0D8               	btfss	status,0,c
  3071  000B64  D004               	goto	i2l1373
  3072  000B66  5003               	movf	___awmod@divisor,w,c
  3073  000B68  5E01               	subwf	___awmod@dividend,f,c
  3074  000B6A  5004               	movf	___awmod@divisor+1,w,c
  3075  000B6C  5A02               	subwfb	___awmod@dividend+1,f,c
  3076  000B6E                     i2l1373:
  3077  000B6E  90D8               	bcf	status,0,c
  3078  000B70  3204               	rrcf	___awmod@divisor+1,f,c
  3079  000B72  3203               	rrcf	___awmod@divisor,f,c
  3080  000B74  2E05               	decfsz	___awmod@counter,f,c
  3081  000B76  D7F1               	goto	i2l1369
  3082  000B78                     i2l1377:
  3083  000B78  5006               	movf	___awmod@sign,w,c
  3084  000B7A  B4D8               	btfsc	status,2,c
  3085  000B7C  D004               	goto	i2l1381
  3086  000B7E  6C01               	negf	___awmod@dividend,c
  3087  000B80  1E02               	comf	___awmod@dividend+1,f,c
  3088  000B82  B0D8               	btfsc	status,0,c
  3089  000B84  2A02               	incf	___awmod@dividend+1,f,c
  3090  000B86                     i2l1381:
  3091  000B86  C001  F001         	movff	___awmod@dividend,?___awmod
  3092  000B8A  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3093  000B8E  0012               	return	
  3094  000B90                     __end_of___awmod:
  3095                           	opt stack 0
  3096                           tosu	equ	0xFFF
  3097                           tosh	equ	0xFFE
  3098                           tosl	equ	0xFFD
  3099                           stkptr	equ	0xFFC
  3100                           pclatu	equ	0xFFB
  3101                           pclath	equ	0xFFA
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon	equ	0xFF2
  3109                           intcon2	equ	0xFF1
  3110                           postinc0	equ	0xFEE
  3111                           fsr0h	equ	0xFEA
  3112                           fsr0l	equ	0xFE9
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1h	equ	0xFE2
  3116                           fsr1l	equ	0xFE1
  3117                           bsr	equ	0xFE0
  3118                           indf2	equ	0xFDF
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           fsr2h	equ	0xFDA
  3122                           fsr2l	equ	0xFD9
  3123                           status	equ	0xFD8
  3124                           tosu	equ	0xFFF
  3125                           tosh	equ	0xFFE
  3126                           tosl	equ	0xFFD
  3127                           stkptr	equ	0xFFC
  3128                           pclatu	equ	0xFFB
  3129                           pclath	equ	0xFFA
  3130                           tblptru	equ	0xFF8
  3131                           tblptrh	equ	0xFF7
  3132                           tblptrl	equ	0xFF6
  3133                           tablat	equ	0xFF5
  3134                           prodh	equ	0xFF4
  3135                           prodl	equ	0xFF3
  3136                           intcon	equ	0xFF2
  3137                           intcon2	equ	0xFF1
  3138                           postinc0	equ	0xFEE
  3139                           fsr0h	equ	0xFEA
  3140                           fsr0l	equ	0xFE9
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1h	equ	0xFE2
  3144                           fsr1l	equ	0xFE1
  3145                           bsr	equ	0xFE0
  3146                           indf2	equ	0xFDF
  3147                           postinc2	equ	0xFDE
  3148                           postdec2	equ	0xFDD
  3149                           fsr2h	equ	0xFDA
  3150                           fsr2l	equ	0xFD9
  3151                           status	equ	0xFD8
  3152                           
  3153                           	psect	text23
  3154  000000                     __ptext23:
  3155                           	opt stack 0
  3156                           tosu	equ	0xFFF
  3157                           tosh	equ	0xFFE
  3158                           tosl	equ	0xFFD
  3159                           stkptr	equ	0xFFC
  3160                           pclatu	equ	0xFFB
  3161                           pclath	equ	0xFFA
  3162                           tblptru	equ	0xFF8
  3163                           tblptrh	equ	0xFF7
  3164                           tblptrl	equ	0xFF6
  3165                           tablat	equ	0xFF5
  3166                           prodh	equ	0xFF4
  3167                           prodl	equ	0xFF3
  3168                           intcon	equ	0xFF2
  3169                           intcon2	equ	0xFF1
  3170                           postinc0	equ	0xFEE
  3171                           fsr0h	equ	0xFEA
  3172                           fsr0l	equ	0xFE9
  3173                           wreg	equ	0xFE8
  3174                           postdec1	equ	0xFE5
  3175                           fsr1h	equ	0xFE2
  3176                           fsr1l	equ	0xFE1
  3177                           bsr	equ	0xFE0
  3178                           indf2	equ	0xFDF
  3179                           postinc2	equ	0xFDE
  3180                           postdec2	equ	0xFDD
  3181                           fsr2h	equ	0xFDA
  3182                           fsr2l	equ	0xFD9
  3183                           status	equ	0xFD8
  3184                           
  3185                           	psect	rparam
  3186  0000                     tosu	equ	0xFFF
  3187                           tosh	equ	0xFFE
  3188                           tosl	equ	0xFFD
  3189                           stkptr	equ	0xFFC
  3190                           pclatu	equ	0xFFB
  3191                           pclath	equ	0xFFA
  3192                           tblptru	equ	0xFF8
  3193                           tblptrh	equ	0xFF7
  3194                           tblptrl	equ	0xFF6
  3195                           tablat	equ	0xFF5
  3196                           prodh	equ	0xFF4
  3197                           prodl	equ	0xFF3
  3198                           intcon	equ	0xFF2
  3199                           intcon2	equ	0xFF1
  3200                           postinc0	equ	0xFEE
  3201                           fsr0h	equ	0xFEA
  3202                           fsr0l	equ	0xFE9
  3203                           wreg	equ	0xFE8
  3204                           postdec1	equ	0xFE5
  3205                           fsr1h	equ	0xFE2
  3206                           fsr1l	equ	0xFE1
  3207                           bsr	equ	0xFE0
  3208                           indf2	equ	0xFDF
  3209                           postinc2	equ	0xFDE
  3210                           postdec2	equ	0xFDD
  3211                           fsr2h	equ	0xFDA
  3212                           fsr2l	equ	0xFD9
  3213                           status	equ	0xFD8
  3214                           
  3215                           	psect	temp
  3216  000044                     btemp:
  3217                           	opt stack 0
  3218  000044                     	ds	1
  3219  0000                     int$flags	set	btemp
  3220                           tosu	equ	0xFFF
  3221                           tosh	equ	0xFFE
  3222                           tosl	equ	0xFFD
  3223                           stkptr	equ	0xFFC
  3224                           pclatu	equ	0xFFB
  3225                           pclath	equ	0xFFA
  3226                           tblptru	equ	0xFF8
  3227                           tblptrh	equ	0xFF7
  3228                           tblptrl	equ	0xFF6
  3229                           tablat	equ	0xFF5
  3230                           prodh	equ	0xFF4
  3231                           prodl	equ	0xFF3
  3232                           intcon	equ	0xFF2
  3233                           intcon2	equ	0xFF1
  3234                           postinc0	equ	0xFEE
  3235                           fsr0h	equ	0xFEA
  3236                           fsr0l	equ	0xFE9
  3237                           wreg	equ	0xFE8
  3238                           postdec1	equ	0xFE5
  3239                           fsr1h	equ	0xFE2
  3240                           fsr1l	equ	0xFE1
  3241                           bsr	equ	0xFE0
  3242                           indf2	equ	0xFDF
  3243                           postinc2	equ	0xFDE
  3244                           postdec2	equ	0xFDD
  3245                           fsr2h	equ	0xFDA
  3246                           fsr2l	equ	0xFD9
  3247                           status	equ	0xFD8


Data Sizes:
    Strings     125
    Constant    18
    Data        0
    BSS         938
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      67
    BANK0           128     13     119
    BANK1           256     11      11
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    s_heap.next.next	PTR struct block_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.next	PTR struct block_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    dispatcher.callback	PTR FTN()void  size(2) Largest target is 0
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp_S449dispatcher_s$callback	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    ?__find_free_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    ?_malloc.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    ?_scheduler_round_robin.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    ?_dispatcher_add_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    print_blocks@l_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _merge_free_blocks@l_curr.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _merge_free_blocks@l_next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _merge_free_blocks@l_curr.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@a_block.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@l_new.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@a_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@l_new.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp___find_free_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _find_free_block@l_current.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    free@l_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_previous.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_previous.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_block.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp__malloc.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_free.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp___find_free_block	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    S833block_s$next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_blocks	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    task_running@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_running@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    task_ready@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_ready@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    task_create@callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_3(), task_2(), task_1(), 

    task_create@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_create@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    sp__scheduler_round_robin.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__scheduler_round_robin	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher.tasks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    scheduler_round_robin@next.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    scheduler_round_robin@next	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher_change_context_isr@next.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__dispatcher.callback	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher_change_context_isr@next	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    sp__dispatcher_add_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__dispatcher_add_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    dispatcher_add_task@task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    dispatcher.running.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    idle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@n_stack	PTR struct task_context_stack_s size(2) Largest target is 2
		 -> dispatcher.stack(BIGRAM[94]), idle.stack(BANK0[94]), dispatcher.context.stack(BIGRAM[94]), idle.context.stack(BANK0[94]), 
		 -> global_isr@n_context(COMRAM[2]), 

    global_isr@n_context	PTR struct task_context_s size(2) Largest target is 318
		 -> dispatcher.context(BIGRAM[97]), idle.context(BANK0[97]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    global_isr@n_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@n_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    global_isr@p_stack	PTR struct task_context_stack_s size(2) Largest target is 2
		 -> dispatcher.stack(BIGRAM[94]), idle.stack(BANK0[94]), dispatcher.context.stack(BIGRAM[94]), idle.context.stack(BANK0[94]), 
		 -> global_isr@p_context(COMRAM[2]), 

    global_isr@p_context	PTR struct task_context_s size(2) Largest target is 318
		 -> dispatcher.context(BIGRAM[97]), idle.context(BANK0[97]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    S442task_s$callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@p_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@p_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    S449dispatcher_s$callback	PTR FTN()PTR struct task_s size(2) Largest target is 3
		 -> scheduler_round_robin(), 

    dispatcher.callback	PTR FTN()PTR struct task_s size(2) Largest target is 3
		 -> scheduler_round_robin(), 

    S449dispatcher_s$running	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher.running	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    timer0_init@callback	PTR FTN()void  size(2) Largest target is 1
		 -> dispatcher_change_context_isr(), 

    _timer0_callback	PTR FTN()void  size(2) Largest target is 1
		 -> dispatcher_change_context_isr(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _task_1 in COMRAM

    None.

Critical Paths under _task_2 in COMRAM

    None.

Critical Paths under _task_3 in COMRAM

    None.

Critical Paths under _task_idle_callback in COMRAM

    None.

Critical Paths under _global_isr in COMRAM

    _timer0_isr->_dispatcher_change_context_isr
    _dispatcher_change_context_isr->_scheduler_round_robin
    _scheduler_round_robin->___awmod
    _scheduler_round_robin->___wmul

Critical Paths under _main in BANK0

    _task_create->_dispatcher_add_task
    _dispatcher_start->_timer0_init

Critical Paths under _task_1 in BANK0

    None.

Critical Paths under _task_2 in BANK0

    None.

Critical Paths under _task_3 in BANK0

    None.

Critical Paths under _task_idle_callback in BANK0

    None.

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_task_create

Critical Paths under _task_1 in BANK1

    None.

Critical Paths under _task_2 in BANK1

    None.

Critical Paths under _task_3 in BANK1

    None.

Critical Paths under _task_idle_callback in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _task_1 in BANK2

    None.

Critical Paths under _task_2 in BANK2

    None.

Critical Paths under _task_3 in BANK2

    None.

Critical Paths under _task_idle_callback in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _task_1 in BANK3

    None.

Critical Paths under _task_2 in BANK3

    None.

Critical Paths under _task_3 in BANK3

    None.

Critical Paths under _task_idle_callback in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _task_1 in BANK4

    None.

Critical Paths under _task_2 in BANK4

    None.

Critical Paths under _task_3 in BANK4

    None.

Critical Paths under _task_idle_callback in BANK4

    None.

Critical Paths under _global_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _task_1 in BANK5

    None.

Critical Paths under _task_2 in BANK5

    None.

Critical Paths under _task_3 in BANK5

    None.

Critical Paths under _task_idle_callback in BANK5

    None.

Critical Paths under _global_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1850
                          _nojo_init
                         _nojo_start
                        _task_create
 ---------------------------------------------------------------------------------
 (1) _task_create                                         11     5      6    1580
                                              0 BANK1     11     5      6
                _dispatcher_add_task
                         _task_ready
 ---------------------------------------------------------------------------------
 (2) _task_ready                                           2     0      2     204
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _dispatcher_add_task                                  5     3      2      34
                                              8 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nojo_start                                           0     0      0     270
                   _dispatcher_start
 ---------------------------------------------------------------------------------
 (2) _dispatcher_start                                     0     0      0     270
                        _timer0_init
 ---------------------------------------------------------------------------------
 (3) _timer0_init                                          4     0      4     270
                                              8 BANK0      4     0      4
                       _timer0_reset
 ---------------------------------------------------------------------------------
 (4) _timer0_reset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nojo_init                                            0     0      0       0
                    _dispatcher_init
 ---------------------------------------------------------------------------------
 (2) _dispatcher_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_1                                               3     3      0      46
                                             59 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_2                                               3     3      0      68
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_3                                               3     3      0      46
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_idle_callback                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _global_isr                                          35    35      0    2298
                                             24 COMRAM    35    35      0
                         _timer0_isr
 ---------------------------------------------------------------------------------
 (7) _timer0_isr                                           0     0      0    1752
                   Absolute function *
      _dispatcher_change_context_isr *
                     i2_timer0_reset
 ---------------------------------------------------------------------------------
 (8) i2_timer0_reset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _dispatcher_change_context_isr                        2     2      0    1752
                                             22 COMRAM     2     2      0
              _scheduler_round_robin *
                       _task_running
                       i2_task_ready
 ---------------------------------------------------------------------------------
 (9) i2_task_ready                                         2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _task_running                                         2     0      2     111
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _scheduler_round_robin                               16    14      2    1570
                                              6 COMRAM    16    14      2
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     845
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4     474
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nojo_init
     _dispatcher_init
   _nojo_start
     _dispatcher_start
       _timer0_init
         _timer0_reset
   _task_create
     _dispatcher_add_task
     _task_ready

 _task_1 (ROOT)

 _task_2 (ROOT)

 _task_3 (ROOT)

 _task_idle_callback (ROOT)

 _global_isr (ROOT)
   _timer0_isr
     Absolute function(Fake) *
     _dispatcher_change_context_isr *
       _scheduler_round_robin *
         ___awmod
         ___wmul
       _task_running *
       i2_task_ready *
     i2_timer0_reset *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     33D      17       54.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B       B       7        4.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      43       1       53.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5      15        0.0%
DATA                 0      0     402       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Nov  1 16:57:54 2016

                                    l41 0B1C                     ___wmul@multiplicand 0003  
                                   l141 0E4E                                     _BSR 000FE0  
                          ___awmod@sign 0006                                     prod 000FF3  
                                   tosl 000FFD                                     wreg 000FE8  
                  __end_ofi2_task_ready 0E0E          ?_dispatcher_change_context_isr 0001  
                          __CFG_WDT$OFF 000000                                    l1531 0B94  
                                  l1535 0BC0                                    l1703 0C08  
                                  l1685 0CB0                                    l1689 0CD0  
                                  l1699 0BDE                                    STR_1 0655  
                                  STR_2 0613                                    STR_3 067F  
                                  _TMR0 000FD6                                    _TOSH 000FFE  
                                  _TOSL 000FFD                                    _WREG 000FE8  
                                  _TOSU 000FFF                                    __BSR 003F  
                      global_isr@n_task 0031                                    _idle 0080  
                                  _main 0AA8                        global_isr@p_task 002F  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    btemp 0044  
                                  pclat 000FFA                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0016  
           scheduler_round_robin@offset 000D                            ___param_bank 000010  
                      ?_dispatcher_init 0001                                   ?_main 0001  
                       __end_of___awmod 0B90                                   i2l103 0890  
                                 u72_20 0BA0                                   u73_28 0BA4  
                                 u83_20 0CBA                                   u84_28 0CBC  
                                 u87_20 0BEA                                   u88_28 0BEE  
                           global_isr@i 002E                          i2_timer0_reset 0E3A  
                                 __WREG 0041                       global_isr@n_stack 0038  
                       __end_of_dpowers 060B                       global_isr@p_stack 0033  
                                 pclath 000FFA                                   tablat 000FF5  
                                 status 000FD8                         __initialization 0CEA  
               ??_scheduler_round_robin 0009                            __end_of_main 0B20  
                   task_create@callback 0104                                  ??_main 00F5  
                __end_ofi2_timer0_reset 0E46                           __activetblptr 000002  
                     ?_dispatcher_start 0001                     _dispatcher_add_task 0D54  
                    ??_dispatcher_start 00F4                                  i2l1431 0948  
                                i2l1423 0932                                  i2l1415 08E2  
                                i2l1361 0B40                                  i2l1441 09D4  
                                i2l1435 0958                                  i2l1427 0938  
                                i2l1419 08F2                                  i2l1381 0B86  
                                i2l1373 0B6E                                  i2l1365 0B4E  
                                i2l1357 0B34                                  i2l1445 09DA  
                                i2l1605 087E                                  i2l1367 0B56  
                                i2l1369 0B5A                                  i2l1377 0B78  
                                i2l1573 072A                                  i2l1577 0790  
                                i2l1579 079C                                  i2l1597 07F6  
                                _STATUS 000FD8                                  _STKPTR 000FFC  
                          ?_task_create 0100                    ?_dispatcher_add_task 00F0  
                   task_create@priority 0102                                  ___wmul 0D82  
                             ??___awmod 0005                            ?_timer0_init 00F0  
                                _s_heap 010B                                  clear_0 0CF2  
                                clear_1 0D04                                  _task_1 0CAC  
                                _task_2 0BDA                                  _task_3 0B90  
                       ___awmod@divisor 0003                   __size_ofi2_task_ready 0012  
                       ___awmod@counter 0005                         ?i2_timer0_reset 0001  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                    _task_idle_callback 0E4E                              __accesstop 0080  
               __end_of__initialization 0D14                         __CFG_PBADEN$OFF 000000  
                         ___rparam_used 000001                   ??_dispatcher_add_task 00F2  
                   ?_task_idle_callback 0001                            i2_task_ready 0DFC  
                        __pcstackCOMRAM 0001                         __CFG_OSC$INTIO7 000000  
                  ??_task_idle_callback 00F0                  scheduler_round_robin@i 0015  
                scheduler_round_robin@j 0011                              __pbssBANK0 0080  
                            __pnvCOMRAM 0042         ??_dispatcher_change_context_isr 0017  
                               ?___wmul 0001                      __size_of_nojo_init 000E  
                               ?_task_1 0001                                 ?_task_2 0001  
                               ?_task_3 0001                                 i2u81_40 0838  
                               i2u81_45 0830                                 i2u65_48 0C2A  
                               i2u65_49 0C3E                                 i2u67_48 0DB8  
                            _dispatcher 030B                              _global_isr 0008  
                               __STATUS 0040                                 __Hparam 0000  
                               __Lparam 0000                    __size_of_task_create 00C4  
                         ?_task_running 0001                     global_isr@n_context 003A  
                               ___awmod 0B20                         __size_of___wmul 0026  
        __size_of_scheduler_round_robin 010E                            __psmallconst 0600  
         __end_of_scheduler_round_robin 09E4                     global_isr@p_context 0036  
                               __pcinit 0CEA                                 __ramtop 0600  
                       __size_of_task_1 003E                         __size_of_task_2 0048  
                       __size_of_task_3 004A                    __size_of_timer0_init 0032  
                         ?_timer0_reset 0001                                 __ptext0 0AA8  
                               __ptext1 09E4                                 __ptext2 0DE8  
                               __ptext3 0D54                                 __ptext4 0E46  
                               __ptext5 0DCC                                 __ptext6 0D22  
                               __ptext7 0E2E                                 __ptext8 0E20  
                               __ptext9 0C68                               _T0CONbits 000FD5  
                     __end_of_hexpowers 0613                                 _dpowers 0601  
                      ___awmod@dividend 0001                __size_of_dispatcher_init 0044  
                        __pintcode_body 0692                    end_of_initialization 0D14  
                     __end_of_nojo_init 0E2E                           __Lmediumconst 0000  
                               int_func 0692               __size_of_dispatcher_start 001C  
                               task_1@i 00E8                                 task_2@i 00EB  
                               task_3@i 00EE                              _nojo_start 0E46  
                        ??_task_running 0003                              _task_ready 0DE8  
                               postdec1 000FE5                                 postdec2 000FDD  
                            _timer0_isr 0DA8                                 postinc0 000FEE  
                               postinc2 000FDE                        ??i2_timer0_reset 0001  
                        ??_timer0_reset 00F0                               _PORTDbits 000F83  
                             _TRISDbits 000F95                             ?_global_isr 0001  
                       global_isr@i_581 0035              scheduler_round_robin@i_743 0013  
                      task_ready@handle 00F0                       task_create@handle 0109  
                        __end_of___wmul 0DA8                          __end_of_task_1 0CEA  
                        __end_of_task_2 0C22                          __end_of_task_3 0BDA  
                   start_initialization 0CEA             __end_of_dispatcher_add_task 0D82  
                     ??_dispatcher_init 00F0                             ?_nojo_start 0001  
                           ?_task_ready 00F0                             ?_timer0_isr 0001  
                              ??___wmul 0005                                ??_task_1 003C  
                              ??_task_2 00EA                                ??_task_3 00ED  
                   __size_of_global_isr 08CE                             __pbssBIGRAM 010B  
                           __pbssCOMRAM 003D             __size_of_task_idle_callback 0004  
                         __pcstackBANK0 00E8                           __pcstackBANK1 0100  
                  __end_of_task_running 0E20                    __end_of_timer0_reset 0E3A  
                      _dispatcher_start 0DCC                               __pnvBANK0 00F5  
                         task_create@id 0100                               __pintcode 0008  
                              ?___awmod 0001                             __smallconst 0600  
                   __size_of_nojo_start 0008                     __size_of_task_ready 0014  
                             _hexpowers 060B                     __size_of_timer0_isr 0024  
                        ___wmul@product 0005                           ??_task_create 0106  
                              _LATDbits 000F8C                               _nojo_init 0E20  
                         ??_timer0_init 00F4                       ___wmul@multiplier 0001  
                 _scheduler_round_robin 08D6                             _INTCON2bits 000FF1  
                          ??_global_isr 0019                              ?_nojo_init 0001  
                              __Hrparam 0000                           ?i2_task_ready 0001  
                              __Lrparam 0000                     __end_of_task_create 0AA8  
                      __size_of___awmod 0070                   __size_of_task_running 0012  
                    __end_of_global_isr 08D6                         _dispatcher_init 0C68  
                   __end_of_timer0_init 0D54                      task_running@handle 0001  
               dispatcher_add_task@task 00F3                                __ptext10 0CAC  
                              __ptext11 0BDA                                __ptext20 08D6  
                              __ptext12 0B90                                __ptext21 0D82  
                              __ptext13 0E4E                                __ptext22 0B20  
                              __ptext23 0000                                __ptext15 0DA8  
                              __ptext16 0E3A                                __ptext17 0C22  
                              __ptext18 0DFC                                __ptext19 0E0E  
                 __size_of_timer0_reset 000C                           __size_of_main 0078  
                              _s_blocks 003D                            ??_nojo_start 00F4  
                        ??i2_task_ready 0003                            ??_task_ready 00F2  
                          _task_running 0E0E                            ??_timer0_isr 0019  
                              int$flags 0044                     timer0_init@callback 00F2  
                    i2task_ready@handle 0001                     timer0_init@delay_us 00F0  
                ?_scheduler_round_robin 0007                __end_of_dispatcher_start 0DE8  
 __end_of_dispatcher_change_context_isr 0C68  __size_of_dispatcher_change_context_isr 0046  
         _dispatcher_change_context_isr 0C22                            _timer0_reset 0E2E  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
               __size_ofi2_timer0_reset 000C                      __end_of_nojo_start 0E4E  
                    __end_of_task_ready 0DFC       dispatcher_change_context_isr@next 0017  
                              intlevel1 0000                                intlevel2 0000  
                    __end_of_timer0_isr 0DCC                             _task_create 09E4  
                           ??_nojo_init 00F0                              _OSCCONbits 000FD3  
          __size_of_dispatcher_add_task 002E                 __end_of_dispatcher_init 0CAC  
                           _timer0_init 0D22              __end_of_task_idle_callback 0E52  
             scheduler_round_robin@next 000F                        __timer0_callback 0042  
                      __timer0_delay_us 00F5  
