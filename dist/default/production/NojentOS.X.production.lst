

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Nov  1 17:11:07 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	nvCOMRAM
    44  000042                     __pnvCOMRAM:
    45                           	opt stack 0
    46  000042                     __timer0_callback:
    47                           	opt stack 0
    48  000042                     	ds	2
    49                           
    50                           	psect	nvBANK0
    51  0000F5                     __pnvBANK0:
    52                           	opt stack 0
    53  0000F5                     __timer0_delay_us:
    54                           	opt stack 0
    55  0000F5                     	ds	2
    56  0000                     _TMR0	set	4054
    57  0000                     _BSR	set	4064
    58  0000                     _INTCON2bits	set	4081
    59  0000                     _INTCONbits	set	4082
    60  0000                     _LATDbits	set	3980
    61  0000                     _OSCCONbits	set	4051
    62  0000                     _OSCTUNEbits	set	3995
    63  0000                     _PORTDbits	set	3971
    64  0000                     _STATUS	set	4056
    65  0000                     _STKPTR	set	4092
    66  0000                     _T0CONbits	set	4053
    67  0000                     _TOSH	set	4094
    68  0000                     _TOSL	set	4093
    69  0000                     _TOSU	set	4095
    70  0000                     _TRISDbits	set	3989
    71  0000                     _WREG	set	4072
    72                           
    73                           ; #config settings
    74  0000                     
    75                           	psect	cinit
    76  000672                     __pcinit:
    77                           	opt stack 0
    78  000672                     start_initialization:
    79                           	opt stack 0
    80  000672                     __initialization:
    81                           	opt stack 0
    82                           
    83                           ; Clear objects allocated to BIGRAM (829 bytes)
    84  000672  EE01  F00B         	lfsr	0,__pbssBIGRAM
    85  000676  EE13 F03D          	lfsr	1,829
    86  00067A                     clear_0:
    87  00067A  6AEE               	clrf	postinc0,c
    88  00067C  50E5               	movf	postdec1,w,c
    89  00067E  50E1               	movf	fsr1l,w,c
    90  000680  E1FC               	bnz	clear_0
    91  000682  50E2               	movf	fsr1h,w,c
    92  000684  E1FA               	bnz	clear_0
    93                           
    94                           ; Clear objects allocated to BANK0 (104 bytes)
    95  000686  EE00  F080         	lfsr	0,__pbssBANK0
    96  00068A  0E68               	movlw	104
    97  00068C                     clear_1:
    98  00068C  6AEE               	clrf	postinc0,c
    99  00068E  06E8               	decf	wreg,f,c
   100  000690  E1FD               	bnz	clear_1
   101                           
   102                           ; Clear objects allocated to COMRAM (5 bytes)
   103  000692  6A41               	clrf	(__pbssCOMRAM+4)& (0+255),c
   104  000694  6A40               	clrf	(__pbssCOMRAM+3)& (0+255),c
   105  000696  6A3F               	clrf	(__pbssCOMRAM+2)& (0+255),c
   106  000698  6A3E               	clrf	(__pbssCOMRAM+1)& (0+255),c
   107  00069A  6A3D               	clrf	__pbssCOMRAM& (0+255),c
   108  00069C                     end_of_initialization:
   109                           	opt stack 0
   110  00069C                     __end_of__initialization:
   111                           	opt stack 0
   112  00069C  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   113  00069E  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   114  0006A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   115  0006A2  6EF8               	movwf	tblptru,c
   116  0006A4  0100               	movlb	0
   117  0006A6  EF18  F002         	goto	_main	;jump to C main() function
   118                           tblptru	equ	0xFF8
   119                           postinc0	equ	0xFEE
   120                           wreg	equ	0xFE8
   121                           postdec1	equ	0xFE5
   122                           fsr1h	equ	0xFE2
   123                           fsr1l	equ	0xFE1
   124                           
   125                           	psect	bssCOMRAM
   126  00003D                     __pbssCOMRAM:
   127                           	opt stack 0
   128  00003D                     _s_blocks:
   129                           	opt stack 0
   130  00003D                     	ds	2
   131  00003F                     __BSR:
   132                           	opt stack 0
   133  00003F                     	ds	1
   134  000040                     __STATUS:
   135                           	opt stack 0
   136  000040                     	ds	1
   137  000041                     __WREG:
   138                           	opt stack 0
   139  000041                     	ds	1
   140                           tblptru	equ	0xFF8
   141                           postinc0	equ	0xFEE
   142                           wreg	equ	0xFE8
   143                           postdec1	equ	0xFE5
   144                           fsr1h	equ	0xFE2
   145                           fsr1l	equ	0xFE1
   146                           
   147                           	psect	bssBANK0
   148  000080                     __pbssBANK0:
   149                           	opt stack 0
   150  000080                     _idle:
   151                           	opt stack 0
   152  000080                     	ds	104
   153                           tblptru	equ	0xFF8
   154                           postinc0	equ	0xFEE
   155                           wreg	equ	0xFE8
   156                           postdec1	equ	0xFE5
   157                           fsr1h	equ	0xFE2
   158                           fsr1l	equ	0xFE1
   159                           
   160                           	psect	bssBIGRAM
   161  00010B                     __pbssBIGRAM:
   162                           	opt stack 0
   163  00010B                     _s_heap:
   164                           	opt stack 0
   165  00010B                     	ds	512
   166  00030B                     _dispatcher:
   167                           	opt stack 0
   168  00030B                     	ds	317
   169                           tblptru	equ	0xFF8
   170                           postinc0	equ	0xFEE
   171                           wreg	equ	0xFE8
   172                           postdec1	equ	0xFE5
   173                           fsr1h	equ	0xFE2
   174                           fsr1l	equ	0xFE1
   175                           
   176                           	psect	cstackBANK1
   177  000100                     __pcstackBANK1:
   178                           	opt stack 0
   179  000100                     task_create@id:
   180                           	opt stack 0
   181                           
   182                           ; 2 bytes @ 0x0
   183  000100                     	ds	2
   184  000102                     task_create@priority:
   185                           	opt stack 0
   186                           
   187                           ; 2 bytes @ 0x2
   188  000102                     	ds	2
   189  000104                     task_create@callback:
   190                           	opt stack 0
   191                           
   192                           ; 2 bytes @ 0x4
   193  000104                     	ds	2
   194  000106                     ??_task_create:
   195                           
   196                           ; 1 bytes @ 0x6
   197  000106                     	ds	3
   198  000109                     task_create@handle:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x9
   202  000109                     	ds	2
   203                           tblptru	equ	0xFF8
   204                           postinc0	equ	0xFEE
   205                           wreg	equ	0xFE8
   206                           postdec1	equ	0xFE5
   207                           fsr1h	equ	0xFE2
   208                           fsr1l	equ	0xFE1
   209                           
   210                           	psect	cstackBANK0
   211  0000E8                     __pcstackBANK0:
   212                           	opt stack 0
   213  0000E8                     task_1@i:
   214                           	opt stack 0
   215                           
   216                           ; 2 bytes @ 0x0
   217  0000E8                     	ds	2
   218  0000EA                     ??_task_2:
   219                           
   220                           ; 1 bytes @ 0x2
   221  0000EA                     	ds	1
   222  0000EB                     task_2@i:
   223                           	opt stack 0
   224                           
   225                           ; 2 bytes @ 0x3
   226  0000EB                     	ds	2
   227  0000ED                     ??_task_3:
   228                           
   229                           ; 1 bytes @ 0x5
   230  0000ED                     	ds	1
   231  0000EE                     task_3@i:
   232                           	opt stack 0
   233                           
   234                           ; 2 bytes @ 0x6
   235  0000EE                     	ds	2
   236  0000F0                     ?_dispatcher_add_task:
   237                           	opt stack 0
   238  0000F0                     timer0_init@delay_us:
   239                           	opt stack 0
   240  0000F0                     task_ready@handle:
   241                           	opt stack 0
   242                           
   243                           ; 2 bytes @ 0x8
   244  0000F0                     	ds	2
   245  0000F2                     ??_dispatcher_add_task:
   246  0000F2                     timer0_init@callback:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0xA
   250  0000F2                     	ds	1
   251  0000F3                     dispatcher_add_task@task:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0xB
   255  0000F3                     	ds	1
   256  0000F4                     
   257                           ; 1 bytes @ 0xC
   258  0000F4                     	ds	1
   259  0000F5                     tblptru	equ	0xFF8
   260                           postinc0	equ	0xFEE
   261                           wreg	equ	0xFE8
   262                           postdec1	equ	0xFE5
   263                           fsr1h	equ	0xFE2
   264                           fsr1l	equ	0xFE1
   265                           
   266                           ; 1 bytes @ 0xD
   267                           
   268                           	psect	cstackCOMRAM
   269  000001                     __pcstackCOMRAM:
   270                           	opt stack 0
   271  000001                     ?___wmul:
   272                           	opt stack 0
   273  000001                     ?___awmod:
   274                           	opt stack 0
   275  000001                     task_running@handle:
   276                           	opt stack 0
   277  000001                     ___wmul@multiplier:
   278                           	opt stack 0
   279  000001                     ___awmod@dividend:
   280                           	opt stack 0
   281  000001                     i2task_ready@handle:
   282                           	opt stack 0
   283                           
   284                           ; 2 bytes @ 0x0
   285  000001                     	ds	2
   286  000003                     ___wmul@multiplicand:
   287                           	opt stack 0
   288  000003                     ___awmod@divisor:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0x2
   292  000003                     	ds	2
   293  000005                     ___awmod@counter:
   294                           	opt stack 0
   295  000005                     ___wmul@product:
   296                           	opt stack 0
   297                           
   298                           ; 2 bytes @ 0x4
   299  000005                     	ds	1
   300  000006                     ___awmod@sign:
   301                           	opt stack 0
   302                           
   303                           ; 1 bytes @ 0x5
   304  000006                     	ds	1
   305  000007                     ?_scheduler_round_robin:
   306                           	opt stack 0
   307                           
   308                           ; 2 bytes @ 0x6
   309  000007                     	ds	2
   310  000009                     ??_scheduler_round_robin:
   311                           
   312                           ; 1 bytes @ 0x8
   313  000009                     	ds	4
   314  00000D                     scheduler_round_robin@offset:
   315                           	opt stack 0
   316                           
   317                           ; 2 bytes @ 0xC
   318  00000D                     	ds	2
   319  00000F                     scheduler_round_robin@next:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xE
   323  00000F                     	ds	2
   324  000011                     scheduler_round_robin@j:
   325                           	opt stack 0
   326                           
   327                           ; 2 bytes @ 0x10
   328  000011                     	ds	2
   329  000013                     scheduler_round_robin@i_743:
   330                           	opt stack 0
   331                           
   332                           ; 2 bytes @ 0x12
   333  000013                     	ds	2
   334  000015                     scheduler_round_robin@i:
   335                           	opt stack 0
   336                           
   337                           ; 2 bytes @ 0x14
   338  000015                     	ds	2
   339  000017                     dispatcher_change_context_isr@next:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x16
   343  000017                     	ds	2
   344  000019                     ??_global_isr:
   345                           
   346                           ; 1 bytes @ 0x18
   347  000019                     	ds	21
   348  00002E                     global_isr@i:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x2D
   352  00002E                     	ds	1
   353  00002F                     global_isr@p_task:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x2E
   357  00002F                     	ds	2
   358  000031                     global_isr@n_task:
   359                           	opt stack 0
   360                           
   361                           ; 2 bytes @ 0x30
   362  000031                     	ds	2
   363  000033                     global_isr@p_stack:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x32
   367  000033                     	ds	2
   368  000035                     global_isr@i_581:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x34
   372  000035                     	ds	1
   373  000036                     global_isr@p_context:
   374                           	opt stack 0
   375                           
   376                           ; 2 bytes @ 0x35
   377  000036                     	ds	2
   378  000038                     global_isr@n_stack:
   379                           	opt stack 0
   380                           
   381                           ; 2 bytes @ 0x37
   382  000038                     	ds	2
   383  00003A                     global_isr@n_context:
   384                           	opt stack 0
   385                           
   386                           ; 2 bytes @ 0x39
   387  00003A                     	ds	2
   388  00003C                     ??_task_1:
   389                           
   390                           ; 1 bytes @ 0x3B
   391  00003C                     	ds	1
   392                           tblptru	equ	0xFF8
   393                           postinc0	equ	0xFEE
   394                           wreg	equ	0xFE8
   395                           postdec1	equ	0xFE5
   396                           fsr1h	equ	0xFE2
   397                           fsr1l	equ	0xFE1
   398                           
   399 ;;
   400 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   401 ;;
   402 ;; *************** function _main *****************
   403 ;; Defined at:
   404 ;;		line 41 in file "main.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;		None
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      void 
   411 ;; Registers used:
   412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : 0/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   418 ;;      Params:         0       0       0       0       0       0       0
   419 ;;      Locals:         0       0       0       0       0       0       0
   420 ;;      Temps:          0       0       0       0       0       0       0
   421 ;;      Totals:         0       0       0       0       0       0       0
   422 ;;Total ram usage:        0 bytes
   423 ;; Hardware stack levels required when called:   10
   424 ;; This function calls:
   425 ;;		_nojo_init
   426 ;;		_nojo_start
   427 ;;		_task_create
   428 ;; This function is called by:
   429 ;;		Startup code after reset
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433                           	psect	text0
   434  000430                     __ptext0:
   435                           	opt stack 0
   436  000430                     _main:
   437                           	opt stack 21
   438                           
   439                           ;main.c: 43: nojo_init();
   440                           
   441                           ;incstack = 0
   442  000430  ECD4  F003         	call	_nojo_init	;# 
   443                           
   444                           ;main.c: 47: task_create( 1, 200, task_1 );
   445  000434  0E00               	movlw	0
   446  000436  0101               	movlb	1	; () banked
   447  000438  6F01               	movwf	(task_create@id+1)& (0+255),b
   448  00043A  0E01               	movlw	1
   449  00043C  6F00               	movwf	task_create@id& (0+255),b
   450  00043E  0E00               	movlw	0
   451  000440  0101               	movlb	1	; () banked
   452  000442  6F03               	movwf	(task_create@priority+1)& (0+255),b
   453  000444  0EC8               	movlw	200
   454  000446  6F02               	movwf	task_create@priority& (0+255),b
   455  000448  0E34               	movlw	low _task_1
   456  00044A  0101               	movlb	1	; () banked
   457  00044C  6F04               	movwf	task_create@callback& (0+255),b
   458  00044E  0E06               	movlw	high _task_1
   459  000450  0101               	movlb	1	; () banked
   460  000452  6F05               	movwf	(task_create@callback+1)& (0+255),b
   461  000454  ECB6  F001         	call	_task_create	;wreg free
   462                           
   463                           ;main.c: 48: task_create( 2, 100, task_2 );
   464  000458  0E00               	movlw	0
   465  00045A  0101               	movlb	1	; () banked
   466  00045C  6F01               	movwf	(task_create@id+1)& (0+255),b
   467  00045E  0E02               	movlw	2
   468  000460  6F00               	movwf	task_create@id& (0+255),b
   469  000462  0E00               	movlw	0
   470  000464  0101               	movlb	1	; () banked
   471  000466  6F03               	movwf	(task_create@priority+1)& (0+255),b
   472  000468  0E64               	movlw	100
   473  00046A  6F02               	movwf	task_create@priority& (0+255),b
   474  00046C  0E62               	movlw	low _task_2
   475  00046E  0101               	movlb	1	; () banked
   476  000470  6F04               	movwf	task_create@callback& (0+255),b
   477  000472  0E05               	movlw	high _task_2
   478  000474  0101               	movlb	1	; () banked
   479  000476  6F05               	movwf	(task_create@callback+1)& (0+255),b
   480  000478  ECB6  F001         	call	_task_create	;wreg free
   481                           
   482                           ;main.c: 49: task_create( 3, 50, task_3 );
   483  00047C  0E00               	movlw	0
   484  00047E  0101               	movlb	1	; () banked
   485  000480  6F01               	movwf	(task_create@id+1)& (0+255),b
   486  000482  0E03               	movlw	3
   487  000484  6F00               	movwf	task_create@id& (0+255),b
   488  000486  0E00               	movlw	0
   489  000488  0101               	movlb	1	; () banked
   490  00048A  6F03               	movwf	(task_create@priority+1)& (0+255),b
   491  00048C  0E32               	movlw	50
   492  00048E  6F02               	movwf	task_create@priority& (0+255),b
   493  000490  0E18               	movlw	low _task_3
   494  000492  0101               	movlb	1	; () banked
   495  000494  6F04               	movwf	task_create@callback& (0+255),b
   496  000496  0E05               	movlw	high _task_3
   497  000498  0101               	movlb	1	; () banked
   498  00049A  6F05               	movwf	(task_create@callback+1)& (0+255),b
   499  00049C  ECB6  F001         	call	_task_create	;wreg free
   500                           
   501                           ;main.c: 51: nojo_start();
   502  0004A0  ECE7  F003         	call	_nojo_start	;wreg free
   503  0004A4                     l41:
   504  0004A4  F000               	nop		;# 
   505  0004A6  D7FE               	goto	l41
   506  0004A8                     __end_of_main:
   507                           	opt stack 0
   508                           tblptru	equ	0xFF8
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           postdec1	equ	0xFE5
   512                           fsr1h	equ	0xFE2
   513                           fsr1l	equ	0xFE1
   514                           
   515 ;; *************** function _task_create *****************
   516 ;; Defined at:
   517 ;;		line 5 in file "kernel/task.c"
   518 ;; Parameters:    Size  Location     Type
   519 ;;  id              2    0[BANK1 ] unsigned int 
   520 ;;  priority        2    2[BANK1 ] unsigned int 
   521 ;;  callback        2    4[BANK1 ] PTR FTN()void 
   522 ;;		 -> task_3(1), task_2(1), task_1(1), 
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  handle          2    9[BANK1 ] PTR struct task_s
   525 ;;		 -> dispatcher.tasks(312), dispatcher(317), 
   526 ;; Return value:  Size  Location     Type
   527 ;;                  1    wreg      void 
   528 ;; Registers used:
   529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : 0/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   535 ;;      Params:         0       0       6       0       0       0       0
   536 ;;      Locals:         0       0       2       0       0       0       0
   537 ;;      Temps:          0       0       3       0       0       0       0
   538 ;;      Totals:         0       0      11       0       0       0       0
   539 ;;Total ram usage:       11 bytes
   540 ;; Hardware stack levels used:    1
   541 ;; Hardware stack levels required when called:    7
   542 ;; This function calls:
   543 ;;		_dispatcher_add_task
   544 ;;		_task_ready
   545 ;; This function is called by:
   546 ;;		_main
   547 ;; This function uses a non-reentrant model
   548 ;;
   549                           
   550                           	psect	text1
   551  00036C                     __ptext1:
   552                           	opt stack 0
   553  00036C                     _task_create:
   554                           	opt stack 23
   555                           
   556                           ;task.c: 8: task_t* handle = dispatcher_add_task();
   557                           
   558                           ;incstack = 0
   559  00036C  EC6E  F003         	call	_dispatcher_add_task	;wreg free
   560  000370  C0F0  F109         	movff	?_dispatcher_add_task,task_create@handle
   561  000374  C0F1  F10A         	movff	?_dispatcher_add_task+1,task_create@handle+1
   562                           
   563                           ;task.c: 10: handle->id = id;
   564  000378  C109  FFD9         	movff	task_create@handle,fsr2l
   565  00037C  C10A  FFDA         	movff	task_create@handle+1,fsr2h
   566  000380  C100  FFDE         	movff	task_create@id,postinc2
   567  000384  C101  FFDD         	movff	task_create@id+1,postdec2
   568                           
   569                           ;task.c: 11: handle->priority = priority;
   570  000388  0101               	movlb	1	; () banked
   571  00038A  EE20 F002          	lfsr	2,2
   572  00038E  5109               	movf	task_create@handle& (0+255),w,b
   573  000390  26D9               	addwf	fsr2l,f,c
   574  000392  510A               	movf	(task_create@handle+1)& (0+255),w,b
   575  000394  22DA               	addwfc	fsr2h,f,c
   576  000396  C102  FFDE         	movff	task_create@priority,postinc2
   577  00039A  C103  FFDD         	movff	task_create@priority+1,postdec2
   578                           
   579                           ; BSR set to: 1
   580                           ;task.c: 12: handle->callback = callback;
   581  00039E  0101               	movlb	1	; () banked
   582  0003A0  EE20 F005          	lfsr	2,5
   583  0003A4  5109               	movf	task_create@handle& (0+255),w,b
   584  0003A6  26D9               	addwf	fsr2l,f,c
   585  0003A8  510A               	movf	(task_create@handle+1)& (0+255),w,b
   586  0003AA  22DA               	addwfc	fsr2h,f,c
   587  0003AC  C104  FFDE         	movff	task_create@callback,postinc2
   588  0003B0  C105  FFDD         	movff	task_create@callback+1,postdec2
   589                           
   590                           ; BSR set to: 1
   591                           ;task.c: 15: handle->context.work = WREG;
   592  0003B4  0101               	movlb	1	; () banked
   593  0003B6  EE20 F007          	lfsr	2,7
   594  0003BA  5109               	movf	task_create@handle& (0+255),w,b
   595  0003BC  26D9               	addwf	fsr2l,f,c
   596  0003BE  510A               	movf	(task_create@handle+1)& (0+255),w,b
   597  0003C0  22DA               	addwfc	fsr2h,f,c
   598  0003C2  CFE8 FFDF          	movff	wreg,indf2	;volatile
   599                           
   600                           ; BSR set to: 1
   601                           ;task.c: 16: handle->context.bsr = BSR;
   602  0003C6  0101               	movlb	1	; () banked
   603  0003C8  EE20 F008          	lfsr	2,8
   604  0003CC  5109               	movf	task_create@handle& (0+255),w,b
   605  0003CE  26D9               	addwf	fsr2l,f,c
   606  0003D0  510A               	movf	(task_create@handle+1)& (0+255),w,b
   607  0003D2  22DA               	addwfc	fsr2h,f,c
   608  0003D4  CFE0 FFDF          	movff	bsr,indf2	;volatile
   609                           
   610                           ; BSR set to: 1
   611                           ;task.c: 17: handle->context.status = STATUS;
   612  0003D8  0101               	movlb	1	; () banked
   613  0003DA  EE20 F009          	lfsr	2,9
   614  0003DE  5109               	movf	task_create@handle& (0+255),w,b
   615  0003E0  26D9               	addwf	fsr2l,f,c
   616  0003E2  510A               	movf	(task_create@handle+1)& (0+255),w,b
   617  0003E4  22DA               	addwfc	fsr2h,f,c
   618  0003E6  CFD8 FFDF          	movff	status,indf2	;volatile
   619                           
   620                           ; BSR set to: 1
   621                           ;task.c: 18: handle->context.stack.size = 1;
   622  0003EA  0101               	movlb	1	; () banked
   623  0003EC  EE20 F067          	lfsr	2,103
   624  0003F0  5109               	movf	task_create@handle& (0+255),w,b
   625  0003F2  26D9               	addwf	fsr2l,f,c
   626  0003F4  510A               	movf	(task_create@handle+1)& (0+255),w,b
   627  0003F6  22DA               	addwfc	fsr2h,f,c
   628  0003F8  0E01               	movlw	1
   629  0003FA  6EDF               	movwf	indf2,c
   630                           
   631                           ; BSR set to: 1
   632                           ;task.c: 19: handle->context.stack.values[0] = (uint24_t)callback;
   633  0003FC  C104  F106         	movff	task_create@callback,??_task_create
   634  000400  C105  F107         	movff	task_create@callback+1,??_task_create+1
   635  000404  0101               	movlb	1	; () banked
   636  000406  6B08               	clrf	(??_task_create+2)& (0+255),b
   637  000408  0101               	movlb	1	; () banked
   638  00040A  EE20 F00A          	lfsr	2,10
   639  00040E  5109               	movf	task_create@handle& (0+255),w,b
   640  000410  26D9               	addwf	fsr2l,f,c
   641  000412  510A               	movf	(task_create@handle+1)& (0+255),w,b
   642  000414  22DA               	addwfc	fsr2h,f,c
   643  000416  C106  FFDE         	movff	??_task_create,postinc2
   644  00041A  C107  FFDE         	movff	??_task_create+1,postinc2
   645  00041E  C108  FFDE         	movff	??_task_create+2,postinc2
   646                           
   647                           ; BSR set to: 1
   648                           ;task.c: 21: task_ready( handle );
   649  000422  C109  F0F0         	movff	task_create@handle,task_ready@handle
   650  000426  C10A  F0F1         	movff	task_create@handle+1,task_ready@handle+1
   651  00042A  ECB8  F003         	call	_task_ready	;wreg free
   652  00042E  0012               	return		;funcret
   653  000430                     __end_of_task_create:
   654                           	opt stack 0
   655                           tblptru	equ	0xFF8
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           postdec1	equ	0xFE5
   659                           fsr1h	equ	0xFE2
   660                           fsr1l	equ	0xFE1
   661                           bsr	equ	0xFE0
   662                           indf2	equ	0xFDF
   663                           postinc2	equ	0xFDE
   664                           postdec2	equ	0xFDD
   665                           fsr2h	equ	0xFDA
   666                           fsr2l	equ	0xFD9
   667                           status	equ	0xFD8
   668                           
   669 ;; *************** function _task_ready *****************
   670 ;; Defined at:
   671 ;;		line 24 in file "kernel/task.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;  handle          2    8[BANK0 ] PTR struct task_s
   674 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         0       2       0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:         0       2       0       0       0       0       0
   690 ;;Total ram usage:        2 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    6
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_task_create
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text2
   701  000770                     __ptext2:
   702                           	opt stack 0
   703  000770                     _task_ready:
   704                           	opt stack 23
   705                           
   706                           ;task.c: 25: handle->state = task_state_ready;
   707                           
   708                           ;incstack = 0
   709  000770  0100               	movlb	0	; () banked
   710  000772  EE20 F004          	lfsr	2,4
   711  000776  51F0               	movf	task_ready@handle& (0+255),w,b
   712  000778  26D9               	addwf	fsr2l,f,c
   713  00077A  51F1               	movf	(task_ready@handle+1)& (0+255),w,b
   714  00077C  22DA               	addwfc	fsr2h,f,c
   715  00077E  0E00               	movlw	0
   716  000780  6EDF               	movwf	indf2,c
   717                           
   718                           ; BSR set to: 0
   719  000782  0012               	return		;funcret
   720  000784                     __end_of_task_ready:
   721                           	opt stack 0
   722                           tblptru	equ	0xFF8
   723                           postinc0	equ	0xFEE
   724                           wreg	equ	0xFE8
   725                           postdec1	equ	0xFE5
   726                           fsr1h	equ	0xFE2
   727                           fsr1l	equ	0xFE1
   728                           bsr	equ	0xFE0
   729                           indf2	equ	0xFDF
   730                           postinc2	equ	0xFDE
   731                           postdec2	equ	0xFDD
   732                           fsr2h	equ	0xFDA
   733                           fsr2l	equ	0xFD9
   734                           status	equ	0xFD8
   735                           
   736 ;; *************** function _dispatcher_add_task *****************
   737 ;; Defined at:
   738 ;;		line 39 in file "kernel/dispatcher.c"
   739 ;; Parameters:    Size  Location     Type
   740 ;;		None
   741 ;; Auto vars:     Size  Location     Type
   742 ;;  task            2   11[BANK0 ] PTR struct task_s
   743 ;;		 -> dispatcher.tasks(312), dispatcher(317), 
   744 ;; Return value:  Size  Location     Type
   745 ;;                  2    8[BANK0 ] PTR struct task_s
   746 ;; Registers used:
   747 ;;		wreg, status,2, status,0, prodl, prodh
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   753 ;;      Params:         0       2       0       0       0       0       0
   754 ;;      Locals:         0       2       0       0       0       0       0
   755 ;;      Temps:          0       1       0       0       0       0       0
   756 ;;      Totals:         0       5       0       0       0       0       0
   757 ;;Total ram usage:        5 bytes
   758 ;; Hardware stack levels used:    1
   759 ;; Hardware stack levels required when called:    6
   760 ;; This function calls:
   761 ;;		Nothing
   762 ;; This function is called by:
   763 ;;		_task_create
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text3
   768  0006DC                     __ptext3:
   769                           	opt stack 0
   770  0006DC                     _dispatcher_add_task:
   771                           	opt stack 23
   772                           
   773                           ;dispatcher.c: 40: task_t* task = &dispatcher.tasks[dispatcher.size];
   774                           
   775                           ; BSR set to: 0
   776                           ;incstack = 0
   777  0006DC  C443  F0F2         	movff	_dispatcher+312,??_dispatcher_add_task
   778  0006E0  0100               	movlb	0	; () banked
   779  0006E2  51F2               	movf	??_dispatcher_add_task& (0+255),w,b
   780  0006E4  0D68               	mullw	104
   781  0006E6  0E0B               	movlw	low _dispatcher
   782  0006E8  24F3               	addwf	prodl,w,c
   783  0006EA  0100               	movlb	0	; () banked
   784  0006EC  6FF3               	movwf	dispatcher_add_task@task& (0+255),b
   785  0006EE  0E03               	movlw	high _dispatcher
   786  0006F0  20F4               	addwfc	prodh,w,c
   787  0006F2  0100               	movlb	0	; () banked
   788  0006F4  6FF4               	movwf	(dispatcher_add_task@task+1)& (0+255),b
   789                           
   790                           ; BSR set to: 0
   791                           ;dispatcher.c: 41: dispatcher.size++;
   792  0006F6  C443  FFE8         	movff	_dispatcher+312,wreg
   793  0006FA  0F01               	addlw	1
   794  0006FC  CFE8 F443          	movff	wreg,_dispatcher+312
   795                           
   796                           ; BSR set to: 0
   797                           ;dispatcher.c: 42: return task;
   798  000700  C0F3  F0F0         	movff	dispatcher_add_task@task,?_dispatcher_add_task
   799  000704  C0F4  F0F1         	movff	dispatcher_add_task@task+1,?_dispatcher_add_task+1
   800  000708  0012               	return	
   801  00070A                     __end_of_dispatcher_add_task:
   802                           	opt stack 0
   803                           tblptru	equ	0xFF8
   804                           prodh	equ	0xFF4
   805                           prodl	equ	0xFF3
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           postdec1	equ	0xFE5
   809                           fsr1h	equ	0xFE2
   810                           fsr1l	equ	0xFE1
   811                           bsr	equ	0xFE0
   812                           indf2	equ	0xFDF
   813                           postinc2	equ	0xFDE
   814                           postdec2	equ	0xFDD
   815                           fsr2h	equ	0xFDA
   816                           fsr2l	equ	0xFD9
   817                           status	equ	0xFD8
   818                           
   819 ;; *************** function _nojo_start *****************
   820 ;; Defined at:
   821 ;;		line 23 in file "nojentOS.c"
   822 ;; Parameters:    Size  Location     Type
   823 ;;		None
   824 ;; Auto vars:     Size  Location     Type
   825 ;;		None
   826 ;; Return value:  Size  Location     Type
   827 ;;                  1    wreg      void 
   828 ;; Registers used:
   829 ;;		wreg, status,2, status,0, cstack
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   835 ;;      Params:         0       0       0       0       0       0       0
   836 ;;      Locals:         0       0       0       0       0       0       0
   837 ;;      Temps:          0       0       0       0       0       0       0
   838 ;;      Totals:         0       0       0       0       0       0       0
   839 ;;Total ram usage:        0 bytes
   840 ;; Hardware stack levels used:    1
   841 ;; Hardware stack levels required when called:    9
   842 ;; This function calls:
   843 ;;		_dispatcher_start
   844 ;; This function is called by:
   845 ;;		_main
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text4
   850  0007CE                     __ptext4:
   851                           	opt stack 0
   852  0007CE                     _nojo_start:
   853                           	opt stack 21
   854                           
   855                           ;nojentOS.c: 24: dispatcher_start();
   856                           
   857                           ; BSR set to: 0
   858                           ;incstack = 0
   859  0007CE  ECAA  F003         	call	_dispatcher_start	;wreg free
   860                           
   861                           ;nojentOS.c: 26: do{ INTCONbits.GIE = 1; }while(0);
   862  0007D2  8EF2               	bsf	intcon,7,c	;volatile
   863  0007D4  0012               	return	
   864  0007D6                     __end_of_nojo_start:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           prodh	equ	0xFF4
   868                           prodl	equ	0xFF3
   869                           intcon	equ	0xFF2
   870                           postinc0	equ	0xFEE
   871                           wreg	equ	0xFE8
   872                           postdec1	equ	0xFE5
   873                           fsr1h	equ	0xFE2
   874                           fsr1l	equ	0xFE1
   875                           bsr	equ	0xFE0
   876                           indf2	equ	0xFDF
   877                           postinc2	equ	0xFDE
   878                           postdec2	equ	0xFDD
   879                           fsr2h	equ	0xFDA
   880                           fsr2l	equ	0xFD9
   881                           status	equ	0xFD8
   882                           
   883 ;; *************** function _dispatcher_start *****************
   884 ;; Defined at:
   885 ;;		line 35 in file "kernel/dispatcher.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, status,2, status,0, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   899 ;;      Params:         0       0       0       0       0       0       0
   900 ;;      Locals:         0       0       0       0       0       0       0
   901 ;;      Temps:          0       0       0       0       0       0       0
   902 ;;      Totals:         0       0       0       0       0       0       0
   903 ;;Total ram usage:        0 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; Hardware stack levels required when called:    8
   906 ;; This function calls:
   907 ;;		_timer0_init
   908 ;; This function is called by:
   909 ;;		_nojo_start
   910 ;; This function uses a non-reentrant model
   911 ;;
   912                           
   913                           	psect	text5
   914  000754                     __ptext5:
   915                           	opt stack 0
   916  000754                     _dispatcher_start:
   917                           	opt stack 21
   918                           
   919                           ;dispatcher.c: 36: timer0_init( 10000, dispatcher_change_context_isr );
   920                           
   921                           ;incstack = 0
   922  000754  0E27               	movlw	39
   923  000756  0100               	movlb	0	; () banked
   924  000758  6FF1               	movwf	(timer0_init@delay_us+1)& (0+255),b
   925  00075A  0E10               	movlw	16
   926  00075C  6FF0               	movwf	timer0_init@delay_us& (0+255),b
   927  00075E  0EAA               	movlw	low _dispatcher_change_context_isr
   928  000760  0100               	movlb	0	; () banked
   929  000762  6FF2               	movwf	timer0_init@callback& (0+255),b
   930  000764  0E05               	movlw	high _dispatcher_change_context_isr
   931  000766  0100               	movlb	0	; () banked
   932  000768  6FF3               	movwf	(timer0_init@callback+1)& (0+255),b
   933  00076A  EC55  F003         	call	_timer0_init	;wreg free
   934  00076E  0012               	return		;funcret
   935  000770                     __end_of_dispatcher_start:
   936                           	opt stack 0
   937                           tblptru	equ	0xFF8
   938                           prodh	equ	0xFF4
   939                           prodl	equ	0xFF3
   940                           intcon	equ	0xFF2
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           postdec1	equ	0xFE5
   944                           fsr1h	equ	0xFE2
   945                           fsr1l	equ	0xFE1
   946                           bsr	equ	0xFE0
   947                           indf2	equ	0xFDF
   948                           postinc2	equ	0xFDE
   949                           postdec2	equ	0xFDD
   950                           fsr2h	equ	0xFDA
   951                           fsr2l	equ	0xFD9
   952                           status	equ	0xFD8
   953                           
   954 ;; *************** function _timer0_init *****************
   955 ;; Defined at:
   956 ;;		line 15 in file "kernel/timers.c"
   957 ;; Parameters:    Size  Location     Type
   958 ;;  delay_us        2    8[BANK0 ] unsigned int 
   959 ;;  callback        2   10[BANK0 ] PTR FTN()void 
   960 ;;		 -> dispatcher_change_context_isr(1), 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  1    wreg      void 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 0/0
   969 ;;		On exit  : 0/0
   970 ;;		Unchanged: 0/0
   971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   972 ;;      Params:         0       4       0       0       0       0       0
   973 ;;      Locals:         0       0       0       0       0       0       0
   974 ;;      Temps:          0       0       0       0       0       0       0
   975 ;;      Totals:         0       4       0       0       0       0       0
   976 ;;Total ram usage:        4 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    7
   979 ;; This function calls:
   980 ;;		_timer0_reset
   981 ;; This function is called by:
   982 ;;		_dispatcher_start
   983 ;; This function uses a non-reentrant model
   984 ;;
   985                           
   986                           	psect	text6
   987  0006AA                     __ptext6:
   988                           	opt stack 0
   989  0006AA                     _timer0_init:
   990                           	opt stack 21
   991                           
   992                           ;timers.c: 17: T0CONbits.TMR0ON = 0;
   993                           
   994                           ;incstack = 0
   995  0006AA  9ED5               	bcf	4053,7,c	;volatile
   996                           
   997                           ;timers.c: 19: INTCONbits.TMR0IE = 0;
   998  0006AC  9AF2               	bcf	intcon,5,c	;volatile
   999                           
  1000                           ;timers.c: 23: _timer0_delay_us = delay_us;
  1001  0006AE  C0F0  F0F5         	movff	timer0_init@delay_us,__timer0_delay_us
  1002  0006B2  C0F1  F0F6         	movff	timer0_init@delay_us+1,__timer0_delay_us+1
  1003                           
  1004                           ;timers.c: 25: _timer0_callback = callback;
  1005  0006B6  C0F2  F042         	movff	timer0_init@callback,__timer0_callback
  1006  0006BA  C0F3  F043         	movff	timer0_init@callback+1,__timer0_callback+1
  1007                           
  1008                           ;timers.c: 28: T0CONbits.T08BIT = 0;
  1009  0006BE  9CD5               	bcf	4053,6,c	;volatile
  1010                           
  1011                           ;timers.c: 30: T0CONbits.T0CS = 0;
  1012  0006C0  9AD5               	bcf	4053,5,c	;volatile
  1013                           
  1014                           ;timers.c: 32: T0CONbits.T0SE = 0;
  1015  0006C2  98D5               	bcf	4053,4,c	;volatile
  1016                           
  1017                           ;timers.c: 34: T0CONbits.PSA = 1;
  1018  0006C4  86D5               	bsf	4053,3,c	;volatile
  1019                           
  1020                           ;timers.c: 36: T0CONbits.T0PS = 0b010;
  1021  0006C6  50D5               	movf	4053,w,c	;volatile
  1022  0006C8  0BF8               	andlw	-8
  1023  0006CA  0902               	iorlw	2
  1024  0006CC  6ED5               	movwf	4053,c	;volatile
  1025                           
  1026                           ;timers.c: 38: INTCONbits.TMR0IF = 0;
  1027  0006CE  94F2               	bcf	intcon,2,c	;volatile
  1028                           
  1029                           ;timers.c: 40: INTCON2bits.TMR0IP = 1;
  1030  0006D0  84F1               	bsf	intcon2,2,c	;volatile
  1031                           
  1032                           ;timers.c: 43: timer0_reset();
  1033  0006D2  ECDB  F003         	call	_timer0_reset	;wreg free
  1034                           
  1035                           ;timers.c: 46: INTCONbits.TMR0IE = 1;
  1036  0006D6  8AF2               	bsf	intcon,5,c	;volatile
  1037                           
  1038                           ;timers.c: 48: T0CONbits.TMR0ON = 1;
  1039  0006D8  8ED5               	bsf	4053,7,c	;volatile
  1040  0006DA  0012               	return		;funcret
  1041  0006DC                     __end_of_timer0_init:
  1042                           	opt stack 0
  1043                           tblptru	equ	0xFF8
  1044                           prodh	equ	0xFF4
  1045                           prodl	equ	0xFF3
  1046                           intcon	equ	0xFF2
  1047                           intcon2	equ	0xFF1
  1048                           postinc0	equ	0xFEE
  1049                           wreg	equ	0xFE8
  1050                           postdec1	equ	0xFE5
  1051                           fsr1h	equ	0xFE2
  1052                           fsr1l	equ	0xFE1
  1053                           bsr	equ	0xFE0
  1054                           indf2	equ	0xFDF
  1055                           postinc2	equ	0xFDE
  1056                           postdec2	equ	0xFDD
  1057                           fsr2h	equ	0xFDA
  1058                           fsr2l	equ	0xFD9
  1059                           status	equ	0xFD8
  1060                           
  1061 ;; *************** function _timer0_reset *****************
  1062 ;; Defined at:
  1063 ;;		line 8 in file "kernel/timers.c"
  1064 ;; Parameters:    Size  Location     Type
  1065 ;;		None
  1066 ;; Auto vars:     Size  Location     Type
  1067 ;;		None
  1068 ;; Return value:  Size  Location     Type
  1069 ;;                  1    wreg      void 
  1070 ;; Registers used:
  1071 ;;		None
  1072 ;; Tracked objects:
  1073 ;;		On entry : 0/0
  1074 ;;		On exit  : 0/0
  1075 ;;		Unchanged: 0/0
  1076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1077 ;;      Params:         0       0       0       0       0       0       0
  1078 ;;      Locals:         0       0       0       0       0       0       0
  1079 ;;      Temps:          0       0       0       0       0       0       0
  1080 ;;      Totals:         0       0       0       0       0       0       0
  1081 ;;Total ram usage:        0 bytes
  1082 ;; Hardware stack levels used:    1
  1083 ;; Hardware stack levels required when called:    6
  1084 ;; This function calls:
  1085 ;;		Nothing
  1086 ;; This function is called by:
  1087 ;;		_timer0_init
  1088 ;; This function uses a non-reentrant model
  1089 ;;
  1090                           
  1091                           	psect	text7
  1092  0007B6                     __ptext7:
  1093                           	opt stack 0
  1094  0007B6                     _timer0_reset:
  1095                           	opt stack 21
  1096                           
  1097                           ;timers.c: 10: INTCONbits.TMR0IF = 0;
  1098                           
  1099                           ;incstack = 0
  1100  0007B6  94F2               	bcf	intcon,2,c	;volatile
  1101                           
  1102                           ;timers.c: 12: TMR0 = _timer0_delay_us;
  1103  0007B8  C0F5  FFD6         	movff	__timer0_delay_us,4054	;volatile
  1104  0007BC  C0F6  FFD7         	movff	__timer0_delay_us+1,4055	;volatile
  1105  0007C0  0012               	return		;funcret
  1106  0007C2                     __end_of_timer0_reset:
  1107                           	opt stack 0
  1108                           tblptru	equ	0xFF8
  1109                           prodh	equ	0xFF4
  1110                           prodl	equ	0xFF3
  1111                           intcon	equ	0xFF2
  1112                           intcon2	equ	0xFF1
  1113                           postinc0	equ	0xFEE
  1114                           wreg	equ	0xFE8
  1115                           postdec1	equ	0xFE5
  1116                           fsr1h	equ	0xFE2
  1117                           fsr1l	equ	0xFE1
  1118                           bsr	equ	0xFE0
  1119                           indf2	equ	0xFDF
  1120                           postinc2	equ	0xFDE
  1121                           postdec2	equ	0xFDD
  1122                           fsr2h	equ	0xFDA
  1123                           fsr2l	equ	0xFD9
  1124                           status	equ	0xFD8
  1125                           
  1126 ;; *************** function _nojo_init *****************
  1127 ;; Defined at:
  1128 ;;		line 15 in file "nojentOS.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;		None
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;		None
  1133 ;; Return value:  Size  Location     Type
  1134 ;;                  1    wreg      void 
  1135 ;; Registers used:
  1136 ;;		wreg, status,2, status,0, cstack
  1137 ;; Tracked objects:
  1138 ;;		On entry : 0/0
  1139 ;;		On exit  : 0/0
  1140 ;;		Unchanged: 0/0
  1141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1142 ;;      Params:         0       0       0       0       0       0       0
  1143 ;;      Locals:         0       0       0       0       0       0       0
  1144 ;;      Temps:          0       0       0       0       0       0       0
  1145 ;;      Totals:         0       0       0       0       0       0       0
  1146 ;;Total ram usage:        0 bytes
  1147 ;; Hardware stack levels used:    1
  1148 ;; Hardware stack levels required when called:    7
  1149 ;; This function calls:
  1150 ;;		_dispatcher_init
  1151 ;; This function is called by:
  1152 ;;		_main
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text8
  1157  0007A8                     __ptext8:
  1158                           	opt stack 0
  1159  0007A8                     _nojo_init:
  1160                           	opt stack 23
  1161                           
  1162                           ;nojentOS.c: 17: OSCCONbits.IRCF = 0b111;
  1163                           
  1164                           ;incstack = 0
  1165  0007A8  88D3               	bsf	4051,4,c	;volatile
  1166  0007AA  8AD3               	bsf	4051,5,c	;volatile
  1167  0007AC  8CD3               	bsf	4051,6,c	;volatile
  1168                           
  1169                           ;nojentOS.c: 18: OSCTUNEbits.PLLEN = 0;
  1170  0007AE  9C9B               	bcf	3995,6,c	;volatile
  1171                           
  1172                           ;nojentOS.c: 20: dispatcher_init();
  1173  0007B0  ECF8  F002         	call	_dispatcher_init	;wreg free
  1174  0007B4  0012               	return		;funcret
  1175  0007B6                     __end_of_nojo_init:
  1176                           	opt stack 0
  1177                           tblptru	equ	0xFF8
  1178                           prodh	equ	0xFF4
  1179                           prodl	equ	0xFF3
  1180                           intcon	equ	0xFF2
  1181                           intcon2	equ	0xFF1
  1182                           postinc0	equ	0xFEE
  1183                           wreg	equ	0xFE8
  1184                           postdec1	equ	0xFE5
  1185                           fsr1h	equ	0xFE2
  1186                           fsr1l	equ	0xFE1
  1187                           bsr	equ	0xFE0
  1188                           indf2	equ	0xFDF
  1189                           postinc2	equ	0xFDE
  1190                           postdec2	equ	0xFDD
  1191                           fsr2h	equ	0xFDA
  1192                           fsr2l	equ	0xFD9
  1193                           status	equ	0xFD8
  1194                           
  1195 ;; *************** function _dispatcher_init *****************
  1196 ;; Defined at:
  1197 ;;		line 18 in file "kernel/dispatcher.c"
  1198 ;; Parameters:    Size  Location     Type
  1199 ;;		None
  1200 ;; Auto vars:     Size  Location     Type
  1201 ;;		None
  1202 ;; Return value:  Size  Location     Type
  1203 ;;                  1    wreg      void 
  1204 ;; Registers used:
  1205 ;;		wreg, status,2, status,0
  1206 ;; Tracked objects:
  1207 ;;		On entry : 0/0
  1208 ;;		On exit  : 0/0
  1209 ;;		Unchanged: 0/0
  1210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1211 ;;      Params:         0       0       0       0       0       0       0
  1212 ;;      Locals:         0       0       0       0       0       0       0
  1213 ;;      Temps:          0       0       0       0       0       0       0
  1214 ;;      Totals:         0       0       0       0       0       0       0
  1215 ;;Total ram usage:        0 bytes
  1216 ;; Hardware stack levels used:    1
  1217 ;; Hardware stack levels required when called:    6
  1218 ;; This function calls:
  1219 ;;		Nothing
  1220 ;; This function is called by:
  1221 ;;		_nojo_init
  1222 ;; This function uses a non-reentrant model
  1223 ;;
  1224                           
  1225                           	psect	text9
  1226  0005F0                     __ptext9:
  1227                           	opt stack 0
  1228  0005F0                     _dispatcher_init:
  1229                           	opt stack 23
  1230                           
  1231                           ;dispatcher.c: 19: dispatcher.size = 0;
  1232                           
  1233                           ;incstack = 0
  1234  0005F0  0E00               	movlw	0
  1235  0005F2  CFE8 F443          	movff	wreg,_dispatcher+312
  1236                           
  1237                           ;dispatcher.c: 20: dispatcher.callback = scheduler_round_robin;
  1238  0005F6  0E5E               	movlw	low _scheduler_round_robin
  1239  0005F8  CFE8 F446          	movff	wreg,_dispatcher+315
  1240  0005FC  0E02               	movlw	high _scheduler_round_robin
  1241  0005FE  CFE8 F447          	movff	wreg,_dispatcher+316
  1242                           
  1243                           ;dispatcher.c: 22: idle.id = 255;
  1244  000602  0E00               	movlw	0
  1245  000604  0100               	movlb	0	; () banked
  1246  000606  6F81               	movwf	(_idle+1)& (0+255),b
  1247  000608  6980               	setf	_idle& (0+255),b
  1248                           
  1249                           ;dispatcher.c: 23: idle.priority = 0;
  1250  00060A  0E00               	movlw	0
  1251  00060C  0100               	movlb	0	; () banked
  1252  00060E  6F83               	movwf	(_idle+3)& (0+255),b
  1253  000610  0E00               	movlw	0
  1254  000612  6F82               	movwf	(_idle+2)& (0+255),b
  1255                           
  1256                           ;dispatcher.c: 24: idle.state = task_state_ready;
  1257  000614  0E00               	movlw	0
  1258  000616  0100               	movlb	0	; () banked
  1259  000618  6F84               	movwf	(_idle+4)& (0+255),b
  1260                           
  1261                           ; BSR set to: 0
  1262                           ;dispatcher.c: 25: idle.callback = task_idle_callback;
  1263  00061A  0ED6               	movlw	low _task_idle_callback
  1264  00061C  0100               	movlb	0	; () banked
  1265  00061E  6F85               	movwf	(_idle+5)& (0+255),b
  1266  000620  0E07               	movlw	high _task_idle_callback
  1267  000622  0100               	movlb	0	; () banked
  1268  000624  6F86               	movwf	(_idle+6)& (0+255),b
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;dispatcher.c: 32: dispatcher.running = &idle;
  1272  000626  0E80               	movlw	low _idle
  1273  000628  CFE8 F444          	movff	wreg,_dispatcher+313
  1274  00062C  0E00               	movlw	high _idle
  1275  00062E  CFE8 F445          	movff	wreg,_dispatcher+314
  1276                           
  1277                           ; BSR set to: 0
  1278  000632  0012               	return		;funcret
  1279  000634                     __end_of_dispatcher_init:
  1280                           	opt stack 0
  1281                           tblptru	equ	0xFF8
  1282                           prodh	equ	0xFF4
  1283                           prodl	equ	0xFF3
  1284                           intcon	equ	0xFF2
  1285                           intcon2	equ	0xFF1
  1286                           postinc0	equ	0xFEE
  1287                           wreg	equ	0xFE8
  1288                           postdec1	equ	0xFE5
  1289                           fsr1h	equ	0xFE2
  1290                           fsr1l	equ	0xFE1
  1291                           bsr	equ	0xFE0
  1292                           indf2	equ	0xFDF
  1293                           postinc2	equ	0xFDE
  1294                           postdec2	equ	0xFDD
  1295                           fsr2h	equ	0xFDA
  1296                           fsr2l	equ	0xFD9
  1297                           status	equ	0xFD8
  1298                           
  1299 ;; *************** function _task_1 *****************
  1300 ;; Defined at:
  1301 ;;		line 14 in file "main.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;		None
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  i               2    0[BANK0 ] unsigned int 
  1306 ;; Return value:  Size  Location     Type
  1307 ;;                  1    wreg      void 
  1308 ;; Registers used:
  1309 ;;		wreg, status,2, status,0
  1310 ;; Tracked objects:
  1311 ;;		On entry : 0/0
  1312 ;;		On exit  : 0/0
  1313 ;;		Unchanged: 0/0
  1314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1315 ;;      Params:         0       0       0       0       0       0       0
  1316 ;;      Locals:         0       2       0       0       0       0       0
  1317 ;;      Temps:          1       0       0       0       0       0       0
  1318 ;;      Totals:         1       2       0       0       0       0       0
  1319 ;;Total ram usage:        3 bytes
  1320 ;; Hardware stack levels used:    1
  1321 ;; Hardware stack levels required when called:    5
  1322 ;; This function calls:
  1323 ;;		Nothing
  1324 ;; This function is called by:
  1325 ;;		_main
  1326 ;; This function uses a non-reentrant model
  1327 ;;
  1328                           
  1329                           	psect	text10
  1330  000634                     __ptext10:
  1331                           	opt stack 0
  1332  000634                     _task_1:
  1333                           	opt stack 21
  1334                           
  1335                           ;main.c: 15: TRISDbits.RD0 = 0;
  1336                           
  1337                           ; BSR set to: 0
  1338                           ;incstack = 0
  1339  000634  9095               	bcf	3989,0,c	;volatile
  1340                           
  1341                           ;main.c: 16: PORTDbits.RD0 = 0;
  1342  000636  9083               	bcf	3971,0,c	;volatile
  1343  000638                     l1777:
  1344                           
  1345                           ;main.c: 18: PORTDbits.RD0 = !LATDbits.LATD0;
  1346  000638  B08C               	btfsc	3980,0,c	;volatile
  1347  00063A  D003               	goto	u90_20
  1348  00063C  6A3C               	clrf	??_task_1& (0+255),c
  1349  00063E  2A3C               	incf	??_task_1& (0+255),f,c
  1350  000640  D001               	goto	u91_28
  1351  000642                     u90_20:
  1352  000642  6A3C               	clrf	??_task_1& (0+255),c
  1353  000644                     u91_28:
  1354  000644  5083               	movf	3971,w,c	;volatile
  1355  000646  183C               	xorwf	??_task_1,w,c
  1356  000648  0BFE               	andlw	-2
  1357  00064A  183C               	xorwf	??_task_1,w,c
  1358  00064C  6E83               	movwf	3971,c	;volatile
  1359                           
  1360                           ;main.c: 19: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1361  00064E  0E00               	movlw	0
  1362  000650  0100               	movlb	0	; () banked
  1363  000652  6FE9               	movwf	(task_1@i+1)& (0+255),b
  1364  000654  0E00               	movlw	0
  1365  000656  6FE8               	movwf	task_1@i& (0+255),b
  1366  000658                     l1781:
  1367                           
  1368                           ; BSR set to: 0
  1369  000658  0E60               	movlw	96
  1370  00065A  0100               	movlb	0	; () banked
  1371  00065C  5DE8               	subwf	task_1@i& (0+255),w,b
  1372  00065E  0EEA               	movlw	234
  1373  000660  0100               	movlb	0	; () banked
  1374  000662  59E9               	subwfb	(task_1@i+1)& (0+255),w,b
  1375  000664  B0D8               	btfsc	status,0,c
  1376  000666  D7E8               	goto	l1777
  1377                           
  1378                           ; BSR set to: 0
  1379                           
  1380                           ; BSR set to: 0
  1381  000668  F000               	nop	
  1382  00066A  0100               	movlb	0	; () banked
  1383  00066C  4BE8               	infsnz	task_1@i& (0+255),f,b
  1384  00066E  2BE9               	incf	(task_1@i+1)& (0+255),f,b
  1385  000670  D7F3               	goto	l1781
  1386  000672                     __end_of_task_1:
  1387                           	opt stack 0
  1388                           tblptru	equ	0xFF8
  1389                           prodh	equ	0xFF4
  1390                           prodl	equ	0xFF3
  1391                           intcon	equ	0xFF2
  1392                           intcon2	equ	0xFF1
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1h	equ	0xFE2
  1397                           fsr1l	equ	0xFE1
  1398                           bsr	equ	0xFE0
  1399                           indf2	equ	0xFDF
  1400                           postinc2	equ	0xFDE
  1401                           postdec2	equ	0xFDD
  1402                           fsr2h	equ	0xFDA
  1403                           fsr2l	equ	0xFD9
  1404                           status	equ	0xFD8
  1405                           
  1406 ;; *************** function _task_2 *****************
  1407 ;; Defined at:
  1408 ;;		line 23 in file "main.c"
  1409 ;; Parameters:    Size  Location     Type
  1410 ;;		None
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  i               2    3[BANK0 ] unsigned int 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, status,2, status,0
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1422 ;;      Params:         0       0       0       0       0       0       0
  1423 ;;      Locals:         0       2       0       0       0       0       0
  1424 ;;      Temps:          0       1       0       0       0       0       0
  1425 ;;      Totals:         0       3       0       0       0       0       0
  1426 ;;Total ram usage:        3 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; Hardware stack levels required when called:    5
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_main
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436                           	psect	text11
  1437  000562                     __ptext11:
  1438                           	opt stack 0
  1439  000562                     _task_2:
  1440                           	opt stack 21
  1441                           
  1442                           ;main.c: 24: TRISDbits.RD1 = 0;
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;incstack = 0
  1446  000562  9295               	bcf	3989,1,c	;volatile
  1447                           
  1448                           ;main.c: 25: PORTDbits.RD1 = 0;
  1449  000564  9283               	bcf	3971,1,c	;volatile
  1450  000566                     l1791:
  1451                           
  1452                           ;main.c: 27: PORTDbits.RD1 = !LATDbits.LATD1;
  1453  000566  B28C               	btfsc	3980,1,c	;volatile
  1454  000568  D004               	goto	u94_20
  1455  00056A  0100               	movlb	0	; () banked
  1456  00056C  6BEA               	clrf	??_task_2& (0+255),b
  1457  00056E  2BEA               	incf	??_task_2& (0+255),f,b
  1458  000570  D002               	goto	u95_28
  1459  000572                     u94_20:
  1460  000572  0100               	movlb	0	; () banked
  1461  000574  6BEA               	clrf	??_task_2& (0+255),b
  1462  000576                     u95_28:
  1463  000576  0100               	movlb	0	; () banked
  1464  000578  47EA               	rlncf	??_task_2& (0+255),f,b
  1465  00057A  5083               	movf	3971,w,c	;volatile
  1466  00057C  0100               	movlb	0	; () banked
  1467  00057E  19EA               	xorwf	??_task_2& (0+255),w,b
  1468  000580  0BFD               	andlw	-3
  1469  000582  19EA               	xorwf	??_task_2& (0+255),w,b
  1470  000584  6E83               	movwf	3971,c	;volatile
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 28: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1474  000586  0E00               	movlw	0
  1475  000588  0100               	movlb	0	; () banked
  1476  00058A  6FEC               	movwf	(task_2@i+1)& (0+255),b
  1477  00058C  0E00               	movlw	0
  1478  00058E  6FEB               	movwf	task_2@i& (0+255),b
  1479  000590                     l1795:
  1480                           
  1481                           ; BSR set to: 0
  1482  000590  0E60               	movlw	96
  1483  000592  0100               	movlb	0	; () banked
  1484  000594  5DEB               	subwf	task_2@i& (0+255),w,b
  1485  000596  0EEA               	movlw	234
  1486  000598  0100               	movlb	0	; () banked
  1487  00059A  59EC               	subwfb	(task_2@i+1)& (0+255),w,b
  1488  00059C  B0D8               	btfsc	status,0,c
  1489  00059E  D7E3               	goto	l1791
  1490                           
  1491                           ; BSR set to: 0
  1492                           
  1493                           ; BSR set to: 0
  1494  0005A0  F000               	nop	
  1495  0005A2  0100               	movlb	0	; () banked
  1496  0005A4  4BEB               	infsnz	task_2@i& (0+255),f,b
  1497  0005A6  2BEC               	incf	(task_2@i+1)& (0+255),f,b
  1498  0005A8  D7F3               	goto	l1795
  1499  0005AA                     __end_of_task_2:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           prodh	equ	0xFF4
  1503                           prodl	equ	0xFF3
  1504                           intcon	equ	0xFF2
  1505                           intcon2	equ	0xFF1
  1506                           postinc0	equ	0xFEE
  1507                           wreg	equ	0xFE8
  1508                           postdec1	equ	0xFE5
  1509                           fsr1h	equ	0xFE2
  1510                           fsr1l	equ	0xFE1
  1511                           bsr	equ	0xFE0
  1512                           indf2	equ	0xFDF
  1513                           postinc2	equ	0xFDE
  1514                           postdec2	equ	0xFDD
  1515                           fsr2h	equ	0xFDA
  1516                           fsr2l	equ	0xFD9
  1517                           status	equ	0xFD8
  1518                           
  1519 ;; *************** function _task_3 *****************
  1520 ;; Defined at:
  1521 ;;		line 32 in file "main.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;		None
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  i               2    6[BANK0 ] unsigned int 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, status,2, status,0
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1535 ;;      Params:         0       0       0       0       0       0       0
  1536 ;;      Locals:         0       2       0       0       0       0       0
  1537 ;;      Temps:          0       1       0       0       0       0       0
  1538 ;;      Totals:         0       3       0       0       0       0       0
  1539 ;;Total ram usage:        3 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    5
  1542 ;; This function calls:
  1543 ;;		Nothing
  1544 ;; This function is called by:
  1545 ;;		_main
  1546 ;; This function uses a non-reentrant model
  1547 ;;
  1548                           
  1549                           	psect	text12
  1550  000518                     __ptext12:
  1551                           	opt stack 0
  1552  000518                     _task_3:
  1553                           	opt stack 21
  1554                           
  1555                           ;main.c: 33: TRISDbits.RD2 = 0;
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;incstack = 0
  1559  000518  9495               	bcf	3989,2,c	;volatile
  1560                           
  1561                           ;main.c: 34: PORTDbits.RD2 = 0;
  1562  00051A  9483               	bcf	3971,2,c	;volatile
  1563  00051C                     l1623:
  1564                           
  1565                           ;main.c: 36: PORTDbits.RD2 = !LATDbits.LATD2;
  1566  00051C  B48C               	btfsc	3980,2,c	;volatile
  1567  00051E  D004               	goto	u79_20
  1568  000520  0100               	movlb	0	; () banked
  1569  000522  6BED               	clrf	??_task_3& (0+255),b
  1570  000524  2BED               	incf	??_task_3& (0+255),f,b
  1571  000526  D002               	goto	u80_28
  1572  000528                     u79_20:
  1573  000528  0100               	movlb	0	; () banked
  1574  00052A  6BED               	clrf	??_task_3& (0+255),b
  1575  00052C                     u80_28:
  1576  00052C  0100               	movlb	0	; () banked
  1577  00052E  47ED               	rlncf	??_task_3& (0+255),f,b
  1578  000530  47ED               	rlncf	??_task_3& (0+255),f,b
  1579  000532  5083               	movf	3971,w,c	;volatile
  1580  000534  0100               	movlb	0	; () banked
  1581  000536  19ED               	xorwf	??_task_3& (0+255),w,b
  1582  000538  0BFB               	andlw	-5
  1583  00053A  19ED               	xorwf	??_task_3& (0+255),w,b
  1584  00053C  6E83               	movwf	3971,c	;volatile
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;main.c: 37: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1588  00053E  0E00               	movlw	0
  1589  000540  0100               	movlb	0	; () banked
  1590  000542  6FEF               	movwf	(task_3@i+1)& (0+255),b
  1591  000544  0E00               	movlw	0
  1592  000546  6FEE               	movwf	task_3@i& (0+255),b
  1593  000548                     l1627:
  1594                           
  1595                           ; BSR set to: 0
  1596  000548  0E60               	movlw	96
  1597  00054A  0100               	movlb	0	; () banked
  1598  00054C  5DEE               	subwf	task_3@i& (0+255),w,b
  1599  00054E  0EEA               	movlw	234
  1600  000550  0100               	movlb	0	; () banked
  1601  000552  59EF               	subwfb	(task_3@i+1)& (0+255),w,b
  1602  000554  B0D8               	btfsc	status,0,c
  1603  000556  D7E2               	goto	l1623
  1604                           
  1605                           ; BSR set to: 0
  1606                           
  1607                           ; BSR set to: 0
  1608  000558  F000               	nop	
  1609  00055A  0100               	movlb	0	; () banked
  1610  00055C  4BEE               	infsnz	task_3@i& (0+255),f,b
  1611  00055E  2BEF               	incf	(task_3@i+1)& (0+255),f,b
  1612  000560  D7F3               	goto	l1627
  1613  000562                     __end_of_task_3:
  1614                           	opt stack 0
  1615                           tblptru	equ	0xFF8
  1616                           prodh	equ	0xFF4
  1617                           prodl	equ	0xFF3
  1618                           intcon	equ	0xFF2
  1619                           intcon2	equ	0xFF1
  1620                           postinc0	equ	0xFEE
  1621                           wreg	equ	0xFE8
  1622                           postdec1	equ	0xFE5
  1623                           fsr1h	equ	0xFE2
  1624                           fsr1l	equ	0xFE1
  1625                           bsr	equ	0xFE0
  1626                           indf2	equ	0xFDF
  1627                           postinc2	equ	0xFDE
  1628                           postdec2	equ	0xFDD
  1629                           fsr2h	equ	0xFDA
  1630                           fsr2l	equ	0xFD9
  1631                           status	equ	0xFD8
  1632                           
  1633 ;; *************** function _task_idle_callback *****************
  1634 ;; Defined at:
  1635 ;;		line 12 in file "kernel/dispatcher.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		None
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1649 ;;      Params:         0       0       0       0       0       0       0
  1650 ;;      Locals:         0       0       0       0       0       0       0
  1651 ;;      Temps:          0       0       0       0       0       0       0
  1652 ;;      Totals:         0       0       0       0       0       0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    5
  1656 ;; This function calls:
  1657 ;;		Nothing
  1658 ;; This function is called by:
  1659 ;;		_dispatcher_init
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text13
  1664  0007D6                     __ptext13:
  1665                           	opt stack 0
  1666  0007D6                     _task_idle_callback:
  1667                           	opt stack 21
  1668  0007D6                     l141:
  1669  0007D6  F000               	nop		;# 
  1670  0007D8  D7FE               	goto	l141
  1671  0007DA                     __end_of_task_idle_callback:
  1672                           	opt stack 0
  1673                           tblptru	equ	0xFF8
  1674                           prodh	equ	0xFF4
  1675                           prodl	equ	0xFF3
  1676                           intcon	equ	0xFF2
  1677                           intcon2	equ	0xFF1
  1678                           postinc0	equ	0xFEE
  1679                           wreg	equ	0xFE8
  1680                           postdec1	equ	0xFE5
  1681                           fsr1h	equ	0xFE2
  1682                           fsr1l	equ	0xFE1
  1683                           bsr	equ	0xFE0
  1684                           indf2	equ	0xFDF
  1685                           postinc2	equ	0xFDE
  1686                           postdec2	equ	0xFDD
  1687                           fsr2h	equ	0xFDA
  1688                           fsr2l	equ	0xFD9
  1689                           status	equ	0xFD8
  1690                           
  1691 ;; *************** function _global_isr *****************
  1692 ;; Defined at:
  1693 ;;		line 21 in file "kernel/interrutps.h"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  i               1   52[COMRAM] unsigned char 
  1698 ;;  i               1   45[COMRAM] unsigned char 
  1699 ;;  n_context       2   57[COMRAM] PTR struct task_context_
  1700 ;;		 -> dispatcher.context(97), idle.context(97), idle(104), dispatcher(317), 
  1701 ;;  n_stack         2   55[COMRAM] PTR struct task_context_
  1702 ;;		 -> dispatcher.stack(94), idle.stack(94), dispatcher.context.stack(94), idle.context.stack(94), 
  1703 ;;		 -> global_isr@n_context(2), 
  1704 ;;  n_task          2   48[COMRAM] PTR struct task_s
  1705 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  1706 ;;  p_context       2   53[COMRAM] PTR struct task_context_
  1707 ;;		 -> dispatcher.context(97), idle.context(97), idle(104), dispatcher(317), 
  1708 ;;  p_stack         2   50[COMRAM] PTR struct task_context_
  1709 ;;		 -> dispatcher.stack(94), idle.stack(94), dispatcher.context.stack(94), idle.context.stack(94), 
  1710 ;;		 -> global_isr@p_context(2), 
  1711 ;;  p_task          2   46[COMRAM] PTR struct task_s
  1712 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1722 ;;      Params:         0       0       0       0       0       0       0
  1723 ;;      Locals:        14       0       0       0       0       0       0
  1724 ;;      Temps:         21       0       0       0       0       0       0
  1725 ;;      Totals:        35       0       0       0       0       0       0
  1726 ;;Total ram usage:       35 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    4
  1729 ;; This function calls:
  1730 ;;		_timer0_isr
  1731 ;; This function is called by:
  1732 ;;		Interrupt level 2
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	intcode
  1737  000008                     __pintcode:
  1738                           	opt stack 0
  1739  000008                     _global_isr:
  1740                           	opt stack 21
  1741                           
  1742                           ;incstack = 0
  1743  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1744  00000A  CFFA F020          	movff	pclath,??_global_isr+7
  1745  00000E  CFFB F021          	movff	pclatu,??_global_isr+8
  1746  000012  ED0D  F000         	call	int_func,f	;refresh shadow registers
  1747                           pclatu	equ	0xFFB
  1748                           pclath	equ	0xFFA
  1749                           tblptru	equ	0xFF8
  1750                           prodh	equ	0xFF4
  1751                           prodl	equ	0xFF3
  1752                           intcon	equ	0xFF2
  1753                           intcon2	equ	0xFF1
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postdec1	equ	0xFE5
  1757                           fsr1h	equ	0xFE2
  1758                           fsr1l	equ	0xFE1
  1759                           bsr	equ	0xFE0
  1760                           indf2	equ	0xFDF
  1761                           postinc2	equ	0xFDE
  1762                           postdec2	equ	0xFDD
  1763                           fsr2h	equ	0xFDA
  1764                           fsr2l	equ	0xFD9
  1765                           status	equ	0xFD8
  1766                           
  1767                           	psect	intcode_body
  1768  00001A                     __pintcode_body:
  1769                           	opt stack 21
  1770  00001A                     int_func:
  1771                           	opt stack 21
  1772  00001A  0006               	pop		; remove dummy address from shadow register refresh
  1773  00001C  CFE9 F022          	movff	fsr0l,??_global_isr+9
  1774  000020  CFEA F023          	movff	fsr0h,??_global_isr+10
  1775  000024  CFE1 F024          	movff	fsr1l,??_global_isr+11
  1776  000028  CFE2 F025          	movff	fsr1h,??_global_isr+12
  1777  00002C  CFD9 F026          	movff	fsr2l,??_global_isr+13
  1778  000030  CFDA F027          	movff	fsr2h,??_global_isr+14
  1779  000034  CFF3 F028          	movff	prodl,??_global_isr+15
  1780  000038  CFF4 F029          	movff	prodh,??_global_isr+16
  1781  00003C  CFF6 F02A          	movff	tblptrl,??_global_isr+17
  1782  000040  CFF7 F02B          	movff	tblptrh,??_global_isr+18
  1783  000044  CFF8 F02C          	movff	tblptru,??_global_isr+19
  1784  000048  CFF5 F02D          	movff	tablat,??_global_isr+20
  1785                           
  1786                           ;interrutps.h: 22: _WREG = WREG;
  1787  00004C  6E41               	movwf	__WREG,c
  1788                           
  1789                           ;interrutps.h: 23: _BSR = BSR;
  1790  00004E  CFE0 F03F          	movff	bsr,__BSR	;volatile
  1791                           
  1792                           ;interrutps.h: 24: _STATUS = STATUS;
  1793  000052  CFD8 F040          	movff	status,__STATUS	;volatile
  1794                           
  1795                           ;interrutps.h: 26: if( INTCONbits.TMR0IE && INTCONbits.TMR0IF ) {
  1796  000056  BAF2               	btfsc	intcon,5,c	;volatile
  1797  000058  A4F2               	btfss	intcon,2,c	;volatile
  1798  00005A  D0DE               	goto	i2l103
  1799                           
  1800                           ;interrutps.h: 29: task_t* p_task = (dispatcher.running);
  1801                           
  1802                           ;interrutps.h: 28: do {
  1803  00005C  C444  F02F         	movff	_dispatcher+313,global_isr@p_task
  1804  000060  C445  F030         	movff	_dispatcher+314,global_isr@p_task+1
  1805                           
  1806                           ;interrutps.h: 30: if( p_task == ((void*)0) ) { break; }
  1807  000064  502F               	movf	global_isr@p_task,w,c
  1808  000066  1030               	iorwf	global_isr@p_task+1,w,c
  1809  000068  B4D8               	btfsc	status,2,c
  1810  00006A  D05C               	goto	i2l1671
  1811                           
  1812                           ;interrutps.h: 31: task_context_t* p_context = &(p_task->context);
  1813  00006C  0E07               	movlw	7
  1814  00006E  242F               	addwf	global_isr@p_task,w,c
  1815  000070  6E36               	movwf	global_isr@p_context,c
  1816  000072  0E00               	movlw	0
  1817  000074  2030               	addwfc	global_isr@p_task+1,w,c
  1818  000076  6E37               	movwf	global_isr@p_context+1,c
  1819                           
  1820                           ;interrutps.h: 32: p_context->work = _WREG;
  1821  000078  C036  FFD9         	movff	global_isr@p_context,fsr2l
  1822  00007C  C037  FFDA         	movff	global_isr@p_context+1,fsr2h
  1823  000080  C041  FFDF         	movff	__WREG,indf2
  1824                           
  1825                           ;interrutps.h: 33: p_context->bsr = _BSR;
  1826  000084  EE20 F001          	lfsr	2,1
  1827  000088  5036               	movf	global_isr@p_context,w,c
  1828  00008A  26D9               	addwf	fsr2l,f,c
  1829  00008C  5037               	movf	global_isr@p_context+1,w,c
  1830  00008E  22DA               	addwfc	fsr2h,f,c
  1831  000090  C03F  FFDF         	movff	__BSR,indf2
  1832                           
  1833                           ;interrutps.h: 34: p_context->status = _STATUS;
  1834  000094  EE20 F002          	lfsr	2,2
  1835  000098  5036               	movf	global_isr@p_context,w,c
  1836  00009A  26D9               	addwf	fsr2l,f,c
  1837  00009C  5037               	movf	global_isr@p_context+1,w,c
  1838  00009E  22DA               	addwfc	fsr2h,f,c
  1839  0000A0  C040  FFDF         	movff	__STATUS,indf2
  1840                           
  1841                           ;interrutps.h: 35: task_context_stack_t* p_stack = &p_context->stack;
  1842  0000A4  0E03               	movlw	3
  1843  0000A6  2436               	addwf	global_isr@p_context,w,c
  1844  0000A8  6E33               	movwf	global_isr@p_stack,c
  1845  0000AA  0E00               	movlw	0
  1846  0000AC  2037               	addwfc	global_isr@p_context+1,w,c
  1847  0000AE  6E34               	movwf	global_isr@p_stack+1,c
  1848                           
  1849                           ;interrutps.h: 36: while( (STKPTR & 0b11111) > 0 ) {
  1850  0000B0  D033               	goto	i2l1669
  1851  0000B2                     i2l1665:
  1852                           
  1853                           ;interrutps.h: 37: uint8_t i = p_stack->size++;
  1854  0000B2  EE20 F05D          	lfsr	2,93
  1855  0000B6  5033               	movf	global_isr@p_stack,w,c
  1856  0000B8  26D9               	addwf	fsr2l,f,c
  1857  0000BA  5034               	movf	global_isr@p_stack+1,w,c
  1858  0000BC  22DA               	addwfc	fsr2h,f,c
  1859  0000BE  50DF               	movf	indf2,w,c
  1860  0000C0  6E2E               	movwf	global_isr@i,c
  1861  0000C2  EE20 F05D          	lfsr	2,93
  1862  0000C6  5033               	movf	global_isr@p_stack,w,c
  1863  0000C8  26D9               	addwf	fsr2l,f,c
  1864  0000CA  5034               	movf	global_isr@p_stack+1,w,c
  1865  0000CC  22DA               	addwfc	fsr2h,f,c
  1866  0000CE  2ADF               	incf	indf2,f,c
  1867                           
  1868                           ;interrutps.h: 38: p_stack->values[i] = (TOSU << 16) | (TOSH << 8) | TOSL;
  1869  0000D0  50FE               	movf	tosh,w,c	;volatile
  1870  0000D2  6E1A               	movwf	(??_global_isr+1)& (0+255),c
  1871  0000D4  6A19               	clrf	??_global_isr& (0+255),c
  1872  0000D6  50FF               	movf	tosu,w,c	;volatile
  1873  0000D8  6E1B               	movwf	(??_global_isr+2)& (0+255),c
  1874  0000DA  6A1C               	clrf	(??_global_isr+3)& (0+255),c
  1875  0000DC  5019               	movf	??_global_isr,w,c
  1876  0000DE  121B               	iorwf	??_global_isr+2,f,c
  1877  0000E0  501A               	movf	??_global_isr+1,w,c
  1878  0000E2  121C               	iorwf	??_global_isr+3,f,c
  1879  0000E4  50FD               	movf	tosl,w,c	;volatile
  1880  0000E6  121B               	iorwf	??_global_isr+2,f,c
  1881  0000E8  0E00               	movlw	0
  1882  0000EA  121C               	iorwf	??_global_isr+3,f,c
  1883  0000EC  C01B  F01D         	movff	??_global_isr+2,??_global_isr+4
  1884  0000F0  C01C  F01E         	movff	??_global_isr+3,??_global_isr+5
  1885  0000F4  6A1F               	clrf	(??_global_isr+6)& (0+255),c
  1886  0000F6  BE1E               	btfsc	(??_global_isr+5)& (0+255),7,c
  1887  0000F8  681F               	setf	(??_global_isr+6)& (0+255),c
  1888  0000FA  502E               	movf	global_isr@i,w,c
  1889  0000FC  0D03               	mullw	3
  1890  0000FE  50F3               	movf	prodl,w,c
  1891  000100  2433               	addwf	global_isr@p_stack,w,c
  1892  000102  6ED9               	movwf	fsr2l,c
  1893  000104  50F4               	movf	prodh,w,c
  1894  000106  2034               	addwfc	global_isr@p_stack+1,w,c
  1895  000108  6EDA               	movwf	fsr2h,c
  1896  00010A  C01D  FFDE         	movff	??_global_isr+4,postinc2
  1897  00010E  C01E  FFDE         	movff	??_global_isr+5,postinc2
  1898  000112  C01F  FFDE         	movff	??_global_isr+6,postinc2
  1899  000116  0006               	pop		;# 
  1900  000118                     i2l1669:
  1901  000118  CFFC F019          	movff	stkptr,??_global_isr	;volatile
  1902  00011C  0E1F               	movlw	31
  1903  00011E  1619               	andwf	??_global_isr,f,c
  1904  000120  A4D8               	btfss	status,2,c
  1905  000122  D7C7               	goto	i2l1665
  1906  000124                     i2l1671:
  1907                           
  1908                           ;interrutps.h: 40: }
  1909                           ;interrutps.h: 41: }while(0);
  1910                           ;interrutps.h: 43: timer0_isr();
  1911  000124  EC98  F003         	call	_timer0_isr	;wreg free
  1912                           
  1913                           ;interrutps.h: 46: task_t* n_task = (dispatcher.running);
  1914                           
  1915                           ;interrutps.h: 45: do {
  1916  000128  C444  F031         	movff	_dispatcher+313,global_isr@n_task
  1917  00012C  C445  F032         	movff	_dispatcher+314,global_isr@n_task+1
  1918                           
  1919                           ;interrutps.h: 47: if( n_task == ((void*)0) ) { break; }
  1920  000130  5031               	movf	global_isr@n_task,w,c
  1921  000132  1032               	iorwf	global_isr@n_task+1,w,c
  1922  000134  B4D8               	btfsc	status,2,c
  1923  000136  D070               	goto	i2l103
  1924                           
  1925                           ;interrutps.h: 48: task_context_t* n_context = &(n_task->context);
  1926  000138  0E07               	movlw	7
  1927  00013A  2431               	addwf	global_isr@n_task,w,c
  1928  00013C  6E3A               	movwf	global_isr@n_context,c
  1929  00013E  0E00               	movlw	0
  1930  000140  2032               	addwfc	global_isr@n_task+1,w,c
  1931  000142  6E3B               	movwf	global_isr@n_context+1,c
  1932                           
  1933                           ;interrutps.h: 49: _WREG = n_context->work;
  1934  000144  C03A  FFD9         	movff	global_isr@n_context,fsr2l
  1935  000148  C03B  FFDA         	movff	global_isr@n_context+1,fsr2h
  1936  00014C  50DF               	movf	indf2,w,c
  1937  00014E  6E41               	movwf	__WREG,c
  1938                           
  1939                           ;interrutps.h: 50: _BSR = n_context->bsr;
  1940  000150  EE20 F001          	lfsr	2,1
  1941  000154  503A               	movf	global_isr@n_context,w,c
  1942  000156  26D9               	addwf	fsr2l,f,c
  1943  000158  503B               	movf	global_isr@n_context+1,w,c
  1944  00015A  22DA               	addwfc	fsr2h,f,c
  1945  00015C  50DF               	movf	indf2,w,c
  1946  00015E  6E3F               	movwf	__BSR,c
  1947                           
  1948                           ;interrutps.h: 51: _STATUS = n_context->status;
  1949  000160  EE20 F002          	lfsr	2,2
  1950  000164  503A               	movf	global_isr@n_context,w,c
  1951  000166  26D9               	addwf	fsr2l,f,c
  1952  000168  503B               	movf	global_isr@n_context+1,w,c
  1953  00016A  22DA               	addwfc	fsr2h,f,c
  1954  00016C  50DF               	movf	indf2,w,c
  1955  00016E  6E40               	movwf	__STATUS,c
  1956                           
  1957                           ;interrutps.h: 52: task_context_stack_t* n_stack = &n_context->stack;
  1958  000170  0E03               	movlw	3
  1959  000172  243A               	addwf	global_isr@n_context,w,c
  1960  000174  6E38               	movwf	global_isr@n_stack,c
  1961  000176  0E00               	movlw	0
  1962  000178  203B               	addwfc	global_isr@n_context+1,w,c
  1963  00017A  6E39               	movwf	global_isr@n_stack+1,c
  1964                           
  1965                           ;interrutps.h: 53: while( n_stack->size > 0 ) {
  1966  00017C  D044               	goto	i2l1697
  1967  00017E                     i2l1689:
  1968                           
  1969                           ;interrutps.h: 54: uint8_t i = --n_stack->size;
  1970  00017E  EE20 F05D          	lfsr	2,93
  1971  000182  5038               	movf	global_isr@n_stack,w,c
  1972  000184  26D9               	addwf	fsr2l,f,c
  1973  000186  5039               	movf	global_isr@n_stack+1,w,c
  1974  000188  22DA               	addwfc	fsr2h,f,c
  1975  00018A  06DF               	decf	indf2,f,c
  1976  00018C  50DF               	movf	indf2,w,c
  1977  00018E  6E35               	movwf	global_isr@i_581,c
  1978  000190  0005               	push		;# 
  1979                           
  1980                           ;interrutps.h: 56: TOSU = n_stack->values[i] >> 16;
  1981  000192  0E10               	movlw	16
  1982  000194  6E19               	movwf	??_global_isr& (0+255),c
  1983  000196  5035               	movf	global_isr@i_581,w,c
  1984  000198  0D03               	mullw	3
  1985  00019A  50F3               	movf	prodl,w,c
  1986  00019C  2438               	addwf	global_isr@n_stack,w,c
  1987  00019E  6ED9               	movwf	fsr2l,c
  1988  0001A0  50F4               	movf	prodh,w,c
  1989  0001A2  2039               	addwfc	global_isr@n_stack+1,w,c
  1990  0001A4  6EDA               	movwf	fsr2h,c
  1991  0001A6  CFDE F01A          	movff	postinc2,??_global_isr+1
  1992  0001AA  CFDE F01B          	movff	postinc2,??_global_isr+2
  1993  0001AE  CFDE F01C          	movff	postinc2,??_global_isr+3
  1994  0001B2  2819               	incf	??_global_isr,w,c
  1995  0001B4  6E1D               	movwf	(??_global_isr+4)& (0+255),c
  1996  0001B6  D004               	goto	i2u88_40
  1997  0001B8                     i2u88_45:
  1998  0001B8  90D8               	bcf	status,0,c
  1999  0001BA  321C               	rrcf	??_global_isr+3,f,c
  2000  0001BC  321B               	rrcf	??_global_isr+2,f,c
  2001  0001BE  321A               	rrcf	??_global_isr+1,f,c
  2002  0001C0                     i2u88_40:
  2003  0001C0  2E1D               	decfsz	(??_global_isr+4)& (0+255),f,c
  2004  0001C2  D7FA               	goto	i2u88_45
  2005  0001C4  501A               	movf	??_global_isr+1,w,c
  2006  0001C6  6EFF               	movwf	tosu,c	;volatile
  2007                           
  2008                           ;interrutps.h: 57: TOSH = n_stack->values[i] >> 8;
  2009  0001C8  5035               	movf	global_isr@i_581,w,c
  2010  0001CA  0D03               	mullw	3
  2011  0001CC  50F3               	movf	prodl,w,c
  2012  0001CE  2438               	addwf	global_isr@n_stack,w,c
  2013  0001D0  6ED9               	movwf	fsr2l,c
  2014  0001D2  50F4               	movf	prodh,w,c
  2015  0001D4  2039               	addwfc	global_isr@n_stack+1,w,c
  2016  0001D6  6EDA               	movwf	fsr2h,c
  2017  0001D8  CFDE F019          	movff	postinc2,??_global_isr
  2018  0001DC  CFDE F01A          	movff	postinc2,??_global_isr+1
  2019  0001E0  CFDE F01B          	movff	postinc2,??_global_isr+2
  2020  0001E4  C01A  F019         	movff	??_global_isr+1,??_global_isr
  2021  0001E8  C01B  F01A         	movff	??_global_isr+2,??_global_isr+1
  2022  0001EC  6A1B               	clrf	??_global_isr+2,c
  2023  0001EE  5019               	movf	??_global_isr,w,c
  2024  0001F0  6EFE               	movwf	tosh,c	;volatile
  2025                           
  2026                           ;interrutps.h: 58: TOSL = n_stack->values[i] >> 0;
  2027  0001F2  5035               	movf	global_isr@i_581,w,c
  2028  0001F4  0D03               	mullw	3
  2029  0001F6  50F3               	movf	prodl,w,c
  2030  0001F8  2438               	addwf	global_isr@n_stack,w,c
  2031  0001FA  6ED9               	movwf	fsr2l,c
  2032  0001FC  50F4               	movf	prodh,w,c
  2033  0001FE  2039               	addwfc	global_isr@n_stack+1,w,c
  2034  000200  6EDA               	movwf	fsr2h,c
  2035  000202  50DF               	movf	indf2,w,c
  2036  000204  6EFD               	movwf	tosl,c	;volatile
  2037  000206                     i2l1697:
  2038  000206  EE20 F05D          	lfsr	2,93
  2039  00020A  5038               	movf	global_isr@n_stack,w,c
  2040  00020C  26D9               	addwf	fsr2l,f,c
  2041  00020E  5039               	movf	global_isr@n_stack+1,w,c
  2042  000210  22DA               	addwfc	fsr2h,f,c
  2043  000212  50DF               	movf	indf2,w,c
  2044  000214  A4D8               	btfss	status,2,c
  2045  000216  D7B3               	goto	i2l1689
  2046  000218                     i2l103:
  2047                           
  2048                           ;interrutps.h: 61: }
  2049                           ;interrutps.h: 62: } while(0);
  2050                           ;interrutps.h: 63: }
  2051                           ;interrutps.h: 64: BSR = _BSR;
  2052  000218  C03F  FFE0         	movff	__BSR,bsr	;volatile
  2053                           
  2054                           ;interrutps.h: 65: STATUS = _STATUS;
  2055  00021C  C040  FFD8         	movff	__STATUS,status	;volatile
  2056                           
  2057                           ;interrutps.h: 66: WREG = _WREG;
  2058  000220  5041               	movf	__WREG,w,c
  2059  000222  C02D  FFF5         	movff	??_global_isr+20,tablat
  2060  000226  C02C  FFF8         	movff	??_global_isr+19,tblptru
  2061  00022A  C02B  FFF7         	movff	??_global_isr+18,tblptrh
  2062  00022E  C02A  FFF6         	movff	??_global_isr+17,tblptrl
  2063  000232  C029  FFF4         	movff	??_global_isr+16,prodh
  2064  000236  C028  FFF3         	movff	??_global_isr+15,prodl
  2065  00023A  C027  FFDA         	movff	??_global_isr+14,fsr2h
  2066  00023E  C026  FFD9         	movff	??_global_isr+13,fsr2l
  2067  000242  C025  FFE2         	movff	??_global_isr+12,fsr1h
  2068  000246  C024  FFE1         	movff	??_global_isr+11,fsr1l
  2069  00024A  C023  FFEA         	movff	??_global_isr+10,fsr0h
  2070  00024E  C022  FFE9         	movff	??_global_isr+9,fsr0l
  2071  000252  C021  FFFB         	movff	??_global_isr+8,pclatu
  2072  000256  C020  FFFA         	movff	??_global_isr+7,pclath
  2073  00025A  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2074  00025C  0011               	retfie		f
  2075  00025E                     __end_of_global_isr:
  2076                           	opt stack 0
  2077                           tosu	equ	0xFFF
  2078                           tosh	equ	0xFFE
  2079                           tosl	equ	0xFFD
  2080                           stkptr	equ	0xFFC
  2081                           pclatu	equ	0xFFB
  2082                           pclath	equ	0xFFA
  2083                           tblptru	equ	0xFF8
  2084                           tblptrh	equ	0xFF7
  2085                           tblptrl	equ	0xFF6
  2086                           tablat	equ	0xFF5
  2087                           prodh	equ	0xFF4
  2088                           prodl	equ	0xFF3
  2089                           intcon	equ	0xFF2
  2090                           intcon2	equ	0xFF1
  2091                           postinc0	equ	0xFEE
  2092                           fsr0h	equ	0xFEA
  2093                           fsr0l	equ	0xFE9
  2094                           wreg	equ	0xFE8
  2095                           postdec1	equ	0xFE5
  2096                           fsr1h	equ	0xFE2
  2097                           fsr1l	equ	0xFE1
  2098                           bsr	equ	0xFE0
  2099                           indf2	equ	0xFDF
  2100                           postinc2	equ	0xFDE
  2101                           postdec2	equ	0xFDD
  2102                           fsr2h	equ	0xFDA
  2103                           fsr2l	equ	0xFD9
  2104                           status	equ	0xFD8
  2105                           
  2106 ;; *************** function _timer0_isr *****************
  2107 ;; Defined at:
  2108 ;;		line 51 in file "kernel/timers.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;		None
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;		None
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2122 ;;      Params:         0       0       0       0       0       0       0
  2123 ;;      Locals:         0       0       0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0
  2125 ;;      Totals:         0       0       0       0       0       0       0
  2126 ;;Total ram usage:        0 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:    3
  2129 ;; This function calls:
  2130 ;;		Absolute function
  2131 ;;		_dispatcher_change_context_isr
  2132 ;;		i2_timer0_reset
  2133 ;; This function is called by:
  2134 ;;		_global_isr
  2135 ;; This function uses a non-reentrant model
  2136 ;;
  2137                           
  2138                           	psect	text15
  2139  000730                     __ptext15:
  2140                           	opt stack 0
  2141  000730                     _timer0_isr:
  2142                           	opt stack 21
  2143                           
  2144                           ;timers.c: 52: timer0_reset();
  2145                           
  2146                           ;incstack = 0
  2147  000730  ECE1  F003         	call	i2_timer0_reset	;wreg free
  2148                           
  2149                           ;timers.c: 54: if( _timer0_callback ) {
  2150  000734  5042               	movf	__timer0_callback,w,c
  2151  000736  1043               	iorwf	__timer0_callback+1,w,c
  2152  000738  B4D8               	btfsc	status,2,c
  2153  00073A  0012               	return	
  2154                           
  2155                           ;timers.c: 55: _timer0_callback();
  2156  00073C  D801               	call	i2u74_48
  2157  00073E  0012               	return	
  2158  000740                     i2u74_48:
  2159  000740  0005               	push	
  2160  000742  6EFA               	movwf	pclath,c
  2161  000744  5042               	movf	__timer0_callback,w,c
  2162  000746  6EFD               	movwf	tosl,c
  2163  000748  5043               	movf	__timer0_callback+1,w,c
  2164  00074A  6EFE               	movwf	tosh,c
  2165  00074C  50F8               	movf	tblptru,w,c
  2166  00074E  6EFF               	movwf	tosu,c
  2167  000750  50FA               	movf	pclath,w,c
  2168  000752  0012               	return		;indir
  2169  000754                     __end_of_timer0_isr:
  2170                           	opt stack 0
  2171                           tosu	equ	0xFFF
  2172                           tosh	equ	0xFFE
  2173                           tosl	equ	0xFFD
  2174                           stkptr	equ	0xFFC
  2175                           pclatu	equ	0xFFB
  2176                           pclath	equ	0xFFA
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           prodh	equ	0xFF4
  2182                           prodl	equ	0xFF3
  2183                           intcon	equ	0xFF2
  2184                           intcon2	equ	0xFF1
  2185                           postinc0	equ	0xFEE
  2186                           fsr0h	equ	0xFEA
  2187                           fsr0l	equ	0xFE9
  2188                           wreg	equ	0xFE8
  2189                           postdec1	equ	0xFE5
  2190                           fsr1h	equ	0xFE2
  2191                           fsr1l	equ	0xFE1
  2192                           bsr	equ	0xFE0
  2193                           indf2	equ	0xFDF
  2194                           postinc2	equ	0xFDE
  2195                           postdec2	equ	0xFDD
  2196                           fsr2h	equ	0xFDA
  2197                           fsr2l	equ	0xFD9
  2198                           status	equ	0xFD8
  2199                           
  2200 ;; *************** function i2_timer0_reset *****************
  2201 ;; Defined at:
  2202 ;;		line 8 in file "kernel/timers.c"
  2203 ;; Parameters:    Size  Location     Type
  2204 ;;		None
  2205 ;; Auto vars:     Size  Location     Type
  2206 ;;		None
  2207 ;; Return value:  Size  Location     Type
  2208 ;;                  1    wreg      void 
  2209 ;; Registers used:
  2210 ;;		None
  2211 ;; Tracked objects:
  2212 ;;		On entry : 0/0
  2213 ;;		On exit  : 0/0
  2214 ;;		Unchanged: 0/0
  2215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2216 ;;      Params:         0       0       0       0       0       0       0
  2217 ;;      Locals:         0       0       0       0       0       0       0
  2218 ;;      Temps:          0       0       0       0       0       0       0
  2219 ;;      Totals:         0       0       0       0       0       0       0
  2220 ;;Total ram usage:        0 bytes
  2221 ;; Hardware stack levels used:    1
  2222 ;; This function calls:
  2223 ;;		Nothing
  2224 ;; This function is called by:
  2225 ;;		_timer0_isr
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text16
  2230  0007C2                     __ptext16:
  2231                           	opt stack 0
  2232  0007C2                     i2_timer0_reset:
  2233                           	opt stack 23
  2234                           
  2235                           ;timers.c: 10: INTCONbits.TMR0IF = 0;
  2236                           
  2237                           ;incstack = 0
  2238  0007C2  94F2               	bcf	intcon,2,c	;volatile
  2239                           
  2240                           ;timers.c: 12: TMR0 = _timer0_delay_us;
  2241  0007C4  C0F5  FFD6         	movff	__timer0_delay_us,4054	;volatile
  2242  0007C8  C0F6  FFD7         	movff	__timer0_delay_us+1,4055	;volatile
  2243  0007CC  0012               	return		;funcret
  2244  0007CE                     __end_ofi2_timer0_reset:
  2245                           	opt stack 0
  2246                           tosu	equ	0xFFF
  2247                           tosh	equ	0xFFE
  2248                           tosl	equ	0xFFD
  2249                           stkptr	equ	0xFFC
  2250                           pclatu	equ	0xFFB
  2251                           pclath	equ	0xFFA
  2252                           tblptru	equ	0xFF8
  2253                           tblptrh	equ	0xFF7
  2254                           tblptrl	equ	0xFF6
  2255                           tablat	equ	0xFF5
  2256                           prodh	equ	0xFF4
  2257                           prodl	equ	0xFF3
  2258                           intcon	equ	0xFF2
  2259                           intcon2	equ	0xFF1
  2260                           postinc0	equ	0xFEE
  2261                           fsr0h	equ	0xFEA
  2262                           fsr0l	equ	0xFE9
  2263                           wreg	equ	0xFE8
  2264                           postdec1	equ	0xFE5
  2265                           fsr1h	equ	0xFE2
  2266                           fsr1l	equ	0xFE1
  2267                           bsr	equ	0xFE0
  2268                           indf2	equ	0xFDF
  2269                           postinc2	equ	0xFDE
  2270                           postdec2	equ	0xFDD
  2271                           fsr2h	equ	0xFDA
  2272                           fsr2l	equ	0xFD9
  2273                           status	equ	0xFD8
  2274                           
  2275 ;; *************** function _dispatcher_change_context_isr *****************
  2276 ;; Defined at:
  2277 ;;		line 48 in file "kernel/dispatcher.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;		None
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;  next            2   22[COMRAM] PTR struct task_s
  2282 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2283 ;; Return value:  Size  Location     Type
  2284 ;;                  1    wreg      void 
  2285 ;; Registers used:
  2286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2287 ;; Tracked objects:
  2288 ;;		On entry : 0/0
  2289 ;;		On exit  : 0/0
  2290 ;;		Unchanged: 0/0
  2291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2292 ;;      Params:         0       0       0       0       0       0       0
  2293 ;;      Locals:         2       0       0       0       0       0       0
  2294 ;;      Temps:          0       0       0       0       0       0       0
  2295 ;;      Totals:         2       0       0       0       0       0       0
  2296 ;;Total ram usage:        2 bytes
  2297 ;; Hardware stack levels used:    1
  2298 ;; Hardware stack levels required when called:    2
  2299 ;; This function calls:
  2300 ;;		_scheduler_round_robin
  2301 ;;		_task_running
  2302 ;;		i2_task_ready
  2303 ;; This function is called by:
  2304 ;;		_dispatcher_start
  2305 ;;		_timer0_isr
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308                           
  2309                           	psect	text17
  2310  0005AA                     __ptext17:
  2311                           	opt stack 0
  2312  0005AA                     _dispatcher_change_context_isr:
  2313                           	opt stack 21
  2314                           
  2315                           ;dispatcher.c: 50: task_t* next = dispatcher.callback();
  2316                           
  2317                           ;incstack = 0
  2318  0005AA  EE24  F046         	lfsr	2,_dispatcher+315
  2319  0005AE  D801               	call	i2u72_48
  2320  0005B0  D00A               	goto	i2u72_49
  2321  0005B2                     i2u72_48:
  2322  0005B2  0005               	push	
  2323  0005B4  6EFA               	movwf	pclath,c
  2324  0005B6  50DE               	movf	postinc2,w,c
  2325  0005B8  6EFD               	movwf	tosl,c
  2326  0005BA  50DE               	movf	postinc2,w,c
  2327  0005BC  6EFE               	movwf	tosh,c
  2328  0005BE  50F8               	movf	tblptru,w,c
  2329  0005C0  6EFF               	movwf	tosu,c
  2330  0005C2  50FA               	movf	pclath,w,c
  2331  0005C4  0012               	return		;indir
  2332  0005C6                     i2u72_49:
  2333  0005C6  C007  F017         	movff	?_scheduler_round_robin,dispatcher_change_context_isr@next
  2334  0005CA  C008  F018         	movff	?_scheduler_round_robin+1,dispatcher_change_context_isr@next+1
  2335                           
  2336                           ;dispatcher.c: 52: task_ready( dispatcher.running );
  2337  0005CE  C444  F001         	movff	_dispatcher+313,i2task_ready@handle
  2338  0005D2  C445  F002         	movff	_dispatcher+314,i2task_ready@handle+1
  2339  0005D6  ECC2  F003         	call	i2_task_ready	;wreg free
  2340                           
  2341                           ;dispatcher.c: 54: dispatcher.running = next;
  2342  0005DA  C017  F444         	movff	dispatcher_change_context_isr@next,_dispatcher+313
  2343  0005DE  C018  F445         	movff	dispatcher_change_context_isr@next+1,_dispatcher+314
  2344                           
  2345                           ;dispatcher.c: 56: task_running( dispatcher.running );
  2346  0005E2  C444  F001         	movff	_dispatcher+313,task_running@handle
  2347  0005E6  C445  F002         	movff	_dispatcher+314,task_running@handle+1
  2348  0005EA  ECCB  F003         	call	_task_running	;wreg free
  2349  0005EE  0012               	return		;funcret
  2350  0005F0                     __end_of_dispatcher_change_context_isr:
  2351                           	opt stack 0
  2352                           tosu	equ	0xFFF
  2353                           tosh	equ	0xFFE
  2354                           tosl	equ	0xFFD
  2355                           stkptr	equ	0xFFC
  2356                           pclatu	equ	0xFFB
  2357                           pclath	equ	0xFFA
  2358                           tblptru	equ	0xFF8
  2359                           tblptrh	equ	0xFF7
  2360                           tblptrl	equ	0xFF6
  2361                           tablat	equ	0xFF5
  2362                           prodh	equ	0xFF4
  2363                           prodl	equ	0xFF3
  2364                           intcon	equ	0xFF2
  2365                           intcon2	equ	0xFF1
  2366                           postinc0	equ	0xFEE
  2367                           fsr0h	equ	0xFEA
  2368                           fsr0l	equ	0xFE9
  2369                           wreg	equ	0xFE8
  2370                           postdec1	equ	0xFE5
  2371                           fsr1h	equ	0xFE2
  2372                           fsr1l	equ	0xFE1
  2373                           bsr	equ	0xFE0
  2374                           indf2	equ	0xFDF
  2375                           postinc2	equ	0xFDE
  2376                           postdec2	equ	0xFDD
  2377                           fsr2h	equ	0xFDA
  2378                           fsr2l	equ	0xFD9
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function i2_task_ready *****************
  2382 ;; Defined at:
  2383 ;;		line 24 in file "kernel/task.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  handle          2    0[COMRAM] PTR struct task_s
  2386 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2398 ;;      Params:         2       0       0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0
  2401 ;;      Totals:         2       0       0       0       0       0       0
  2402 ;;Total ram usage:        2 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; This function calls:
  2405 ;;		Nothing
  2406 ;; This function is called by:
  2407 ;;		_dispatcher_change_context_isr
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text18
  2412  000784                     __ptext18:
  2413                           	opt stack 0
  2414  000784                     i2_task_ready:
  2415                           	opt stack 22
  2416                           
  2417                           ;task.c: 25: handle->state = task_state_ready;
  2418                           
  2419                           ;incstack = 0
  2420  000784  EE20 F004          	lfsr	2,4
  2421  000788  5001               	movf	i2task_ready@handle,w,c
  2422  00078A  26D9               	addwf	fsr2l,f,c
  2423  00078C  5002               	movf	i2task_ready@handle+1,w,c
  2424  00078E  22DA               	addwfc	fsr2h,f,c
  2425  000790  0E00               	movlw	0
  2426  000792  6EDF               	movwf	indf2,c
  2427  000794  0012               	return		;funcret
  2428  000796                     __end_ofi2_task_ready:
  2429                           	opt stack 0
  2430                           tosu	equ	0xFFF
  2431                           tosh	equ	0xFFE
  2432                           tosl	equ	0xFFD
  2433                           stkptr	equ	0xFFC
  2434                           pclatu	equ	0xFFB
  2435                           pclath	equ	0xFFA
  2436                           tblptru	equ	0xFF8
  2437                           tblptrh	equ	0xFF7
  2438                           tblptrl	equ	0xFF6
  2439                           tablat	equ	0xFF5
  2440                           prodh	equ	0xFF4
  2441                           prodl	equ	0xFF3
  2442                           intcon	equ	0xFF2
  2443                           intcon2	equ	0xFF1
  2444                           postinc0	equ	0xFEE
  2445                           fsr0h	equ	0xFEA
  2446                           fsr0l	equ	0xFE9
  2447                           wreg	equ	0xFE8
  2448                           postdec1	equ	0xFE5
  2449                           fsr1h	equ	0xFE2
  2450                           fsr1l	equ	0xFE1
  2451                           bsr	equ	0xFE0
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _task_running *****************
  2460 ;; Defined at:
  2461 ;;		line 28 in file "kernel/task.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;  handle          2    0[COMRAM] PTR struct task_s
  2464 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  1    wreg      void 
  2469 ;; Registers used:
  2470 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2476 ;;      Params:         2       0       0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0
  2478 ;;      Temps:          0       0       0       0       0       0       0
  2479 ;;      Totals:         2       0       0       0       0       0       0
  2480 ;;Total ram usage:        2 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_dispatcher_change_context_isr
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text19
  2490  000796                     __ptext19:
  2491                           	opt stack 0
  2492  000796                     _task_running:
  2493                           	opt stack 22
  2494                           
  2495                           ;task.c: 29: handle->state = task_state_running;
  2496                           
  2497                           ;incstack = 0
  2498  000796  EE20 F004          	lfsr	2,4
  2499  00079A  5001               	movf	task_running@handle,w,c
  2500  00079C  26D9               	addwf	fsr2l,f,c
  2501  00079E  5002               	movf	task_running@handle+1,w,c
  2502  0007A0  22DA               	addwfc	fsr2h,f,c
  2503  0007A2  0E01               	movlw	1
  2504  0007A4  6EDF               	movwf	indf2,c
  2505  0007A6  0012               	return		;funcret
  2506  0007A8                     __end_of_task_running:
  2507                           	opt stack 0
  2508                           tosu	equ	0xFFF
  2509                           tosh	equ	0xFFE
  2510                           tosl	equ	0xFFD
  2511                           stkptr	equ	0xFFC
  2512                           pclatu	equ	0xFFB
  2513                           pclath	equ	0xFFA
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           intcon2	equ	0xFF1
  2522                           postinc0	equ	0xFEE
  2523                           fsr0h	equ	0xFEA
  2524                           fsr0l	equ	0xFE9
  2525                           wreg	equ	0xFE8
  2526                           postdec1	equ	0xFE5
  2527                           fsr1h	equ	0xFE2
  2528                           fsr1l	equ	0xFE1
  2529                           bsr	equ	0xFE0
  2530                           indf2	equ	0xFDF
  2531                           postinc2	equ	0xFDE
  2532                           postdec2	equ	0xFDD
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _scheduler_round_robin *****************
  2538 ;; Defined at:
  2539 ;;		line 18 in file "kernel/scheduler.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;		None
  2542 ;; Auto vars:     Size  Location     Type
  2543 ;;  j               2   16[COMRAM] int 
  2544 ;;  i               2   18[COMRAM] int 
  2545 ;;  i               2   20[COMRAM] int 
  2546 ;;  next            2   14[COMRAM] PTR struct task_s
  2547 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2548 ;;  offset          2   12[COMRAM] int 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  2    6[COMRAM] PTR struct task_s
  2551 ;; Registers used:
  2552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2558 ;;      Params:         2       0       0       0       0       0       0
  2559 ;;      Locals:        10       0       0       0       0       0       0
  2560 ;;      Temps:          4       0       0       0       0       0       0
  2561 ;;      Totals:        16       0       0       0       0       0       0
  2562 ;;Total ram usage:       16 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    1
  2565 ;; This function calls:
  2566 ;;		___awmod
  2567 ;;		___wmul
  2568 ;; This function is called by:
  2569 ;;		_dispatcher_init
  2570 ;;		_dispatcher_change_context_isr
  2571 ;; This function uses a non-reentrant model
  2572 ;;
  2573                           
  2574                           	psect	text20
  2575  00025E                     __ptext20:
  2576                           	opt stack 0
  2577  00025E                     _scheduler_round_robin:
  2578                           	opt stack 21
  2579                           
  2580                           ;scheduler.c: 19: int offset = -1;
  2581                           
  2582                           ;incstack = 0
  2583  00025E  680D               	setf	scheduler_round_robin@offset,c
  2584  000260  680E               	setf	scheduler_round_robin@offset+1,c
  2585                           
  2586                           ;scheduler.c: 20: for( int i = 0; i < 3; i++ ) {
  2587  000262  0E00               	movlw	0
  2588  000264  6E16               	movwf	scheduler_round_robin@i+1,c
  2589  000266  0E00               	movlw	0
  2590  000268  6E15               	movwf	scheduler_round_robin@i,c
  2591  00026A                     i2l1507:
  2592  00026A  BE16               	btfsc	scheduler_round_robin@i+1,7,c
  2593  00026C  D006               	goto	i2l1511
  2594  00026E  5016               	movf	scheduler_round_robin@i+1,w,c
  2595  000270  E127               	bnz	i2l1519
  2596  000272  0E03               	movlw	3
  2597  000274  5C15               	subwf	scheduler_round_robin@i,w,c
  2598  000276  B0D8               	btfsc	status,0,c
  2599  000278  D023               	goto	i2l1519
  2600  00027A                     i2l1511:
  2601                           
  2602                           ;scheduler.c: 21: if( (&dispatcher.tasks[i]) == dispatcher.running ) {
  2603  00027A  EE24  F044         	lfsr	2,_dispatcher+313
  2604  00027E  C015  F001         	movff	scheduler_round_robin@i,___wmul@multiplier
  2605  000282  C016  F002         	movff	scheduler_round_robin@i+1,___wmul@multiplier+1
  2606  000286  0E00               	movlw	0
  2607  000288  6E04               	movwf	___wmul@multiplicand+1,c
  2608  00028A  0E68               	movlw	104
  2609  00028C  6E03               	movwf	___wmul@multiplicand,c
  2610  00028E  EC85  F003         	call	___wmul	;wreg free
  2611  000292  0E0B               	movlw	low _dispatcher
  2612  000294  6E0B               	movwf	(??_scheduler_round_robin+2)& (0+255),c
  2613  000296  0E03               	movlw	high _dispatcher
  2614  000298  6E0C               	movwf	(??_scheduler_round_robin+3)& (0+255),c
  2615  00029A  5001               	movf	?___wmul,w,c
  2616  00029C  260B               	addwf	??_scheduler_round_robin+2,f,c
  2617  00029E  5002               	movf	?___wmul+1,w,c
  2618  0002A0  220C               	addwfc	??_scheduler_round_robin+3,f,c
  2619  0002A2  50DE               	movf	postinc2,w,c
  2620  0002A4  180B               	xorwf	??_scheduler_round_robin+2,w,c
  2621  0002A6  E109               	bnz	i2l1515
  2622  0002A8  50DE               	movf	postinc2,w,c
  2623  0002AA  180C               	xorwf	??_scheduler_round_robin+3,w,c
  2624  0002AC  A4D8               	btfss	status,2,c
  2625  0002AE  D005               	goto	i2l1515
  2626                           
  2627                           ;scheduler.c: 22: offset = i;
  2628  0002B0  C015  F00D         	movff	scheduler_round_robin@i,scheduler_round_robin@offset
  2629  0002B4  C016  F00E         	movff	scheduler_round_robin@i+1,scheduler_round_robin@offset+1
  2630                           
  2631                           ;scheduler.c: 23: break;
  2632  0002B8  D003               	goto	i2l1519
  2633  0002BA                     i2l1515:
  2634  0002BA  4A15               	infsnz	scheduler_round_robin@i,f,c
  2635  0002BC  2A16               	incf	scheduler_round_robin@i+1,f,c
  2636  0002BE  D7D5               	goto	i2l1507
  2637  0002C0                     i2l1519:
  2638                           
  2639                           ;scheduler.c: 24: }
  2640                           ;scheduler.c: 25: }
  2641                           ;scheduler.c: 29: task_t* next = &idle;
  2642  0002C0  0E80               	movlw	low _idle
  2643  0002C2  6E0F               	movwf	scheduler_round_robin@next,c
  2644  0002C4  0E00               	movlw	high _idle
  2645  0002C6  6E10               	movwf	scheduler_round_robin@next+1,c
  2646                           
  2647                           ;scheduler.c: 30: for( int i = 0; i < 3; i++ ) {
  2648  0002C8  0E00               	movlw	0
  2649  0002CA  6E14               	movwf	scheduler_round_robin@i_743+1,c
  2650  0002CC  0E00               	movlw	0
  2651  0002CE  6E13               	movwf	scheduler_round_robin@i_743,c
  2652  0002D0                     i2l1523:
  2653  0002D0  BE14               	btfsc	scheduler_round_robin@i_743+1,7,c
  2654  0002D2  D006               	goto	i2l1527
  2655  0002D4  5014               	movf	scheduler_round_robin@i_743+1,w,c
  2656  0002D6  E145               	bnz	i2l1537
  2657  0002D8  0E03               	movlw	3
  2658  0002DA  5C13               	subwf	scheduler_round_robin@i_743,w,c
  2659  0002DC  B0D8               	btfsc	status,0,c
  2660  0002DE  D041               	goto	i2l1537
  2661  0002E0                     i2l1527:
  2662                           
  2663                           ;scheduler.c: 33: int j = (offset+1+i) % 3;
  2664  0002E0  5013               	movf	scheduler_round_robin@i_743,w,c
  2665  0002E2  240D               	addwf	scheduler_round_robin@offset,w,c
  2666  0002E4  6E09               	movwf	??_scheduler_round_robin& (0+255),c
  2667  0002E6  5014               	movf	scheduler_round_robin@i_743+1,w,c
  2668  0002E8  200E               	addwfc	scheduler_round_robin@offset+1,w,c
  2669  0002EA  6E0A               	movwf	(??_scheduler_round_robin+1)& (0+255),c
  2670  0002EC  0E01               	movlw	1
  2671  0002EE  2409               	addwf	??_scheduler_round_robin,w,c
  2672  0002F0  6E01               	movwf	___awmod@dividend,c
  2673  0002F2  0E00               	movlw	0
  2674  0002F4  200A               	addwfc	??_scheduler_round_robin+1,w,c
  2675  0002F6  6E02               	movwf	___awmod@dividend+1,c
  2676  0002F8  0E00               	movlw	0
  2677  0002FA  6E04               	movwf	___awmod@divisor+1,c
  2678  0002FC  0E03               	movlw	3
  2679  0002FE  6E03               	movwf	___awmod@divisor,c
  2680  000300  EC54  F002         	call	___awmod	;wreg free
  2681  000304  C001  F011         	movff	?___awmod,scheduler_round_robin@j
  2682  000308  C002  F012         	movff	?___awmod+1,scheduler_round_robin@j+1
  2683                           
  2684                           ;scheduler.c: 34: if( dispatcher.tasks[j].state == task_state_ready ) {
  2685  00030C  C011  F001         	movff	scheduler_round_robin@j,___wmul@multiplier
  2686  000310  C012  F002         	movff	scheduler_round_robin@j+1,___wmul@multiplier+1
  2687  000314  0E00               	movlw	0
  2688  000316  6E04               	movwf	___wmul@multiplicand+1,c
  2689  000318  0E68               	movlw	104
  2690  00031A  6E03               	movwf	___wmul@multiplicand,c
  2691  00031C  EC85  F003         	call	___wmul	;wreg free
  2692  000320  0E04               	movlw	4
  2693  000322  2601               	addwf	?___wmul,f,c
  2694  000324  0E00               	movlw	0
  2695  000326  2202               	addwfc	?___wmul+1,f,c
  2696  000328  0E0B               	movlw	low _dispatcher
  2697  00032A  2401               	addwf	?___wmul,w,c
  2698  00032C  6ED9               	movwf	fsr2l,c
  2699  00032E  0E03               	movlw	high _dispatcher
  2700  000330  2002               	addwfc	?___wmul+1,w,c
  2701  000332  6EDA               	movwf	fsr2h,c
  2702  000334  50DF               	movf	indf2,w,c
  2703  000336  A4D8               	btfss	status,2,c
  2704  000338  D011               	goto	i2l1533
  2705                           
  2706                           ;scheduler.c: 35: next = &dispatcher.tasks[j];
  2707  00033A  C011  F001         	movff	scheduler_round_robin@j,___wmul@multiplier
  2708  00033E  C012  F002         	movff	scheduler_round_robin@j+1,___wmul@multiplier+1
  2709  000342  0E00               	movlw	0
  2710  000344  6E04               	movwf	___wmul@multiplicand+1,c
  2711  000346  0E68               	movlw	104
  2712  000348  6E03               	movwf	___wmul@multiplicand,c
  2713  00034A  EC85  F003         	call	___wmul	;wreg free
  2714  00034E  0E0B               	movlw	low _dispatcher
  2715  000350  2401               	addwf	?___wmul,w,c
  2716  000352  6E0F               	movwf	scheduler_round_robin@next,c
  2717  000354  0E03               	movlw	high _dispatcher
  2718  000356  2002               	addwfc	?___wmul+1,w,c
  2719  000358  6E10               	movwf	scheduler_round_robin@next+1,c
  2720                           
  2721                           ;scheduler.c: 36: break;
  2722  00035A  D003               	goto	i2l1537
  2723  00035C                     i2l1533:
  2724  00035C  4A13               	infsnz	scheduler_round_robin@i_743,f,c
  2725  00035E  2A14               	incf	scheduler_round_robin@i_743+1,f,c
  2726  000360  D7B7               	goto	i2l1523
  2727  000362                     i2l1537:
  2728                           
  2729                           ;scheduler.c: 37: }
  2730                           ;scheduler.c: 38: }
  2731                           ;scheduler.c: 40: return next;
  2732  000362  C00F  F007         	movff	scheduler_round_robin@next,?_scheduler_round_robin
  2733  000366  C010  F008         	movff	scheduler_round_robin@next+1,?_scheduler_round_robin+1
  2734  00036A  0012               	return	
  2735  00036C                     __end_of_scheduler_round_robin:
  2736                           	opt stack 0
  2737                           tosu	equ	0xFFF
  2738                           tosh	equ	0xFFE
  2739                           tosl	equ	0xFFD
  2740                           stkptr	equ	0xFFC
  2741                           pclatu	equ	0xFFB
  2742                           pclath	equ	0xFFA
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           prodh	equ	0xFF4
  2748                           prodl	equ	0xFF3
  2749                           intcon	equ	0xFF2
  2750                           intcon2	equ	0xFF1
  2751                           postinc0	equ	0xFEE
  2752                           fsr0h	equ	0xFEA
  2753                           fsr0l	equ	0xFE9
  2754                           wreg	equ	0xFE8
  2755                           postdec1	equ	0xFE5
  2756                           fsr1h	equ	0xFE2
  2757                           fsr1l	equ	0xFE1
  2758                           bsr	equ	0xFE0
  2759                           indf2	equ	0xFDF
  2760                           postinc2	equ	0xFDE
  2761                           postdec2	equ	0xFDD
  2762                           fsr2h	equ	0xFDA
  2763                           fsr2l	equ	0xFD9
  2764                           status	equ	0xFD8
  2765                           
  2766 ;; *************** function ___wmul *****************
  2767 ;; Defined at:
  2768 ;;		line 15 in file "/home/bruno/Programs/microchip/xc8/v1.37/sources/common/Umul16.c"
  2769 ;; Parameters:    Size  Location     Type
  2770 ;;  multiplier      2    0[COMRAM] unsigned int 
  2771 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  product         2    4[COMRAM] unsigned int 
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  2    0[COMRAM] unsigned int 
  2776 ;; Registers used:
  2777 ;;		wreg, status,2, status,0, prodl, prodh
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2783 ;;      Params:         4       0       0       0       0       0       0
  2784 ;;      Locals:         2       0       0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0
  2786 ;;      Totals:         6       0       0       0       0       0       0
  2787 ;;Total ram usage:        6 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; This function calls:
  2790 ;;		Nothing
  2791 ;; This function is called by:
  2792 ;;		_scheduler_round_robin
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text21
  2797  00070A                     __ptext21:
  2798                           	opt stack 0
  2799  00070A                     ___wmul:
  2800                           	opt stack 21
  2801                           
  2802                           ;incstack = 0
  2803  00070A  5001               	movf	___wmul@multiplier,w,c
  2804  00070C  0203               	mulwf	___wmul@multiplicand,c
  2805  00070E  CFF3 F005          	movff	prodl,___wmul@product
  2806  000712  CFF4 F006          	movff	prodh,___wmul@product+1
  2807  000716  5001               	movf	___wmul@multiplier,w,c
  2808  000718  0204               	mulwf	___wmul@multiplicand+1,c
  2809  00071A  50F3               	movf	prodl,w,c
  2810  00071C  2606               	addwf	___wmul@product+1,f,c
  2811  00071E  5002               	movf	___wmul@multiplier+1,w,c
  2812  000720  0203               	mulwf	___wmul@multiplicand,c
  2813  000722  50F3               	movf	prodl,w,c
  2814  000724  2606               	addwf	___wmul@product+1,f,c
  2815  000726  C005  F001         	movff	___wmul@product,?___wmul
  2816  00072A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2817  00072E  0012               	return	
  2818  000730                     __end_of___wmul:
  2819                           	opt stack 0
  2820                           tosu	equ	0xFFF
  2821                           tosh	equ	0xFFE
  2822                           tosl	equ	0xFFD
  2823                           stkptr	equ	0xFFC
  2824                           pclatu	equ	0xFFB
  2825                           pclath	equ	0xFFA
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           prodh	equ	0xFF4
  2831                           prodl	equ	0xFF3
  2832                           intcon	equ	0xFF2
  2833                           intcon2	equ	0xFF1
  2834                           postinc0	equ	0xFEE
  2835                           fsr0h	equ	0xFEA
  2836                           fsr0l	equ	0xFE9
  2837                           wreg	equ	0xFE8
  2838                           postdec1	equ	0xFE5
  2839                           fsr1h	equ	0xFE2
  2840                           fsr1l	equ	0xFE1
  2841                           bsr	equ	0xFE0
  2842                           indf2	equ	0xFDF
  2843                           postinc2	equ	0xFDE
  2844                           postdec2	equ	0xFDD
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function ___awmod *****************
  2850 ;; Defined at:
  2851 ;;		line 8 in file "/home/bruno/Programs/microchip/xc8/v1.37/sources/common/awmod.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  dividend        2    0[COMRAM] int 
  2854 ;;  divisor         2    2[COMRAM] int 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  sign            1    5[COMRAM] unsigned char 
  2857 ;;  counter         1    4[COMRAM] unsigned char 
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  2    0[COMRAM] int 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2, status,0
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2867 ;;      Params:         4       0       0       0       0       0       0
  2868 ;;      Locals:         2       0       0       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0
  2870 ;;      Totals:         6       0       0       0       0       0       0
  2871 ;;Total ram usage:        6 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; This function calls:
  2874 ;;		Nothing
  2875 ;; This function is called by:
  2876 ;;		_scheduler_round_robin
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           	psect	text22
  2881  0004A8                     __ptext22:
  2882                           	opt stack 0
  2883  0004A8                     ___awmod:
  2884                           	opt stack 21
  2885                           
  2886                           ;incstack = 0
  2887  0004A8  0E00               	movlw	0
  2888  0004AA  6E06               	movwf	___awmod@sign,c
  2889  0004AC  AE02               	btfss	___awmod@dividend+1,7,c
  2890  0004AE  D006               	goto	i2l1449
  2891  0004B0  6C01               	negf	___awmod@dividend,c
  2892  0004B2  1E02               	comf	___awmod@dividend+1,f,c
  2893  0004B4  B0D8               	btfsc	status,0,c
  2894  0004B6  2A02               	incf	___awmod@dividend+1,f,c
  2895  0004B8  0E01               	movlw	1
  2896  0004BA  6E06               	movwf	___awmod@sign,c
  2897  0004BC                     i2l1449:
  2898  0004BC  AE04               	btfss	___awmod@divisor+1,7,c
  2899  0004BE  D004               	goto	i2l1453
  2900  0004C0  6C03               	negf	___awmod@divisor,c
  2901  0004C2  1E04               	comf	___awmod@divisor+1,f,c
  2902  0004C4  B0D8               	btfsc	status,0,c
  2903  0004C6  2A04               	incf	___awmod@divisor+1,f,c
  2904  0004C8                     i2l1453:
  2905  0004C8  5003               	movf	___awmod@divisor,w,c
  2906  0004CA  1004               	iorwf	___awmod@divisor+1,w,c
  2907  0004CC  B4D8               	btfsc	status,2,c
  2908  0004CE  D018               	goto	i2l1469
  2909  0004D0  0E01               	movlw	1
  2910  0004D2  6E05               	movwf	___awmod@counter,c
  2911  0004D4  D004               	goto	i2l1459
  2912  0004D6                     i2l1457:
  2913  0004D6  90D8               	bcf	status,0,c
  2914  0004D8  3603               	rlcf	___awmod@divisor,f,c
  2915  0004DA  3604               	rlcf	___awmod@divisor+1,f,c
  2916  0004DC  2A05               	incf	___awmod@counter,f,c
  2917  0004DE                     i2l1459:
  2918  0004DE  AE04               	btfss	___awmod@divisor+1,7,c
  2919  0004E0  D7FA               	goto	i2l1457
  2920  0004E2                     i2l1461:
  2921  0004E2  5003               	movf	___awmod@divisor,w,c
  2922  0004E4  5C01               	subwf	___awmod@dividend,w,c
  2923  0004E6  5004               	movf	___awmod@divisor+1,w,c
  2924  0004E8  5802               	subwfb	___awmod@dividend+1,w,c
  2925  0004EA  A0D8               	btfss	status,0,c
  2926  0004EC  D004               	goto	i2l1465
  2927  0004EE  5003               	movf	___awmod@divisor,w,c
  2928  0004F0  5E01               	subwf	___awmod@dividend,f,c
  2929  0004F2  5004               	movf	___awmod@divisor+1,w,c
  2930  0004F4  5A02               	subwfb	___awmod@dividend+1,f,c
  2931  0004F6                     i2l1465:
  2932  0004F6  90D8               	bcf	status,0,c
  2933  0004F8  3204               	rrcf	___awmod@divisor+1,f,c
  2934  0004FA  3203               	rrcf	___awmod@divisor,f,c
  2935  0004FC  2E05               	decfsz	___awmod@counter,f,c
  2936  0004FE  D7F1               	goto	i2l1461
  2937  000500                     i2l1469:
  2938  000500  5006               	movf	___awmod@sign,w,c
  2939  000502  B4D8               	btfsc	status,2,c
  2940  000504  D004               	goto	i2l1473
  2941  000506  6C01               	negf	___awmod@dividend,c
  2942  000508  1E02               	comf	___awmod@dividend+1,f,c
  2943  00050A  B0D8               	btfsc	status,0,c
  2944  00050C  2A02               	incf	___awmod@dividend+1,f,c
  2945  00050E                     i2l1473:
  2946  00050E  C001  F001         	movff	___awmod@dividend,?___awmod
  2947  000512  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2948  000516  0012               	return	
  2949  000518                     __end_of___awmod:
  2950                           	opt stack 0
  2951  0000                     tosu	equ	0xFFF
  2952                           tosh	equ	0xFFE
  2953                           tosl	equ	0xFFD
  2954                           stkptr	equ	0xFFC
  2955                           pclatu	equ	0xFFB
  2956                           pclath	equ	0xFFA
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           intcon	equ	0xFF2
  2964                           intcon2	equ	0xFF1
  2965                           postinc0	equ	0xFEE
  2966                           fsr0h	equ	0xFEA
  2967                           fsr0l	equ	0xFE9
  2968                           wreg	equ	0xFE8
  2969                           postdec1	equ	0xFE5
  2970                           fsr1h	equ	0xFE2
  2971                           fsr1l	equ	0xFE1
  2972                           bsr	equ	0xFE0
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           postdec2	equ	0xFDD
  2976                           fsr2h	equ	0xFDA
  2977                           fsr2l	equ	0xFD9
  2978                           status	equ	0xFD8
  2979                           tosu	equ	0xFFF
  2980                           tosh	equ	0xFFE
  2981                           tosl	equ	0xFFD
  2982                           stkptr	equ	0xFFC
  2983                           pclatu	equ	0xFFB
  2984                           pclath	equ	0xFFA
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           intcon2	equ	0xFF1
  2993                           postinc0	equ	0xFEE
  2994                           fsr0h	equ	0xFEA
  2995                           fsr0l	equ	0xFE9
  2996                           wreg	equ	0xFE8
  2997                           postdec1	equ	0xFE5
  2998                           fsr1h	equ	0xFE2
  2999                           fsr1l	equ	0xFE1
  3000                           bsr	equ	0xFE0
  3001                           indf2	equ	0xFDF
  3002                           postinc2	equ	0xFDE
  3003                           postdec2	equ	0xFDD
  3004                           fsr2h	equ	0xFDA
  3005                           fsr2l	equ	0xFD9
  3006                           status	equ	0xFD8
  3007                           
  3008                           	psect	text23
  3009  000000                     __ptext23:
  3010                           	opt stack 0
  3011                           tosu	equ	0xFFF
  3012                           tosh	equ	0xFFE
  3013                           tosl	equ	0xFFD
  3014                           stkptr	equ	0xFFC
  3015                           pclatu	equ	0xFFB
  3016                           pclath	equ	0xFFA
  3017                           tblptru	equ	0xFF8
  3018                           tblptrh	equ	0xFF7
  3019                           tblptrl	equ	0xFF6
  3020                           tablat	equ	0xFF5
  3021                           prodh	equ	0xFF4
  3022                           prodl	equ	0xFF3
  3023                           intcon	equ	0xFF2
  3024                           intcon2	equ	0xFF1
  3025                           postinc0	equ	0xFEE
  3026                           fsr0h	equ	0xFEA
  3027                           fsr0l	equ	0xFE9
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1h	equ	0xFE2
  3031                           fsr1l	equ	0xFE1
  3032                           bsr	equ	0xFE0
  3033                           indf2	equ	0xFDF
  3034                           postinc2	equ	0xFDE
  3035                           postdec2	equ	0xFDD
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040                           	psect	rparam
  3041  0000                     tosu	equ	0xFFF
  3042                           tosh	equ	0xFFE
  3043                           tosl	equ	0xFFD
  3044                           stkptr	equ	0xFFC
  3045                           pclatu	equ	0xFFB
  3046                           pclath	equ	0xFFA
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           prodh	equ	0xFF4
  3052                           prodl	equ	0xFF3
  3053                           intcon	equ	0xFF2
  3054                           intcon2	equ	0xFF1
  3055                           postinc0	equ	0xFEE
  3056                           fsr0h	equ	0xFEA
  3057                           fsr0l	equ	0xFE9
  3058                           wreg	equ	0xFE8
  3059                           postdec1	equ	0xFE5
  3060                           fsr1h	equ	0xFE2
  3061                           fsr1l	equ	0xFE1
  3062                           bsr	equ	0xFE0
  3063                           indf2	equ	0xFDF
  3064                           postinc2	equ	0xFDE
  3065                           postdec2	equ	0xFDD
  3066                           fsr2h	equ	0xFDA
  3067                           fsr2l	equ	0xFD9
  3068                           status	equ	0xFD8
  3069                           
  3070                           	psect	temp
  3071  000044                     btemp:
  3072                           	opt stack 0
  3073  000044                     	ds	1
  3074  0000                     int$flags	set	btemp
  3075                           tosu	equ	0xFFF
  3076                           tosh	equ	0xFFE
  3077                           tosl	equ	0xFFD
  3078                           stkptr	equ	0xFFC
  3079                           pclatu	equ	0xFFB
  3080                           pclath	equ	0xFFA
  3081                           tblptru	equ	0xFF8
  3082                           tblptrh	equ	0xFF7
  3083                           tblptrl	equ	0xFF6
  3084                           tablat	equ	0xFF5
  3085                           prodh	equ	0xFF4
  3086                           prodl	equ	0xFF3
  3087                           intcon	equ	0xFF2
  3088                           intcon2	equ	0xFF1
  3089                           postinc0	equ	0xFEE
  3090                           fsr0h	equ	0xFEA
  3091                           fsr0l	equ	0xFE9
  3092                           wreg	equ	0xFE8
  3093                           postdec1	equ	0xFE5
  3094                           fsr1h	equ	0xFE2
  3095                           fsr1l	equ	0xFE1
  3096                           bsr	equ	0xFE0
  3097                           indf2	equ	0xFDF
  3098                           postinc2	equ	0xFDE
  3099                           postdec2	equ	0xFDD
  3100                           fsr2h	equ	0xFDA
  3101                           fsr2l	equ	0xFD9
  3102                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         938
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     60      67
    BANK0           128     13     119
    BANK1           256     11      11
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    s_heap.next.data	PTR void  size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.next.next	PTR struct linked_list_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.last.data	PTR void  size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.last.next	PTR struct linked_list_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.data.last	PTR struct linked_list_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.data	PTR void  size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.next	PTR struct linked_list_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.last	PTR struct linked_list_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.next.next	PTR struct block_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_heap.next	PTR struct block_s size(2) Largest target is 0
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    dispatcher.callback	PTR FTN()void  size(2) Largest target is 0
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp_S449dispatcher_s$callback	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    ?__find_free_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    ?_malloc.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    ?_scheduler_round_robin.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    ?_dispatcher_add_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__linked_list_get_first	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_first@a_head.next.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_first@a_head.next.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_first@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_first@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp__linked_list_get_last	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_last@l_head_data.last.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_last@l_head_data.last.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_last@l_head_data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_last@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_last@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_by_index@iterator_ptr.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_by_index@iterator_ptr.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp__linked_list_get_by_index	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_by_index@l_head_data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_by_index@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_get_by_index@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@l_iter_new_first.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@l_iter_new_first.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@a_head.next.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@a_head.next.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@l_iter_delet.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@l_iter_delet.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@l_head_data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_first@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_head_data.last.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_head_data.last.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_iter_curr.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_iter_curr.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@a_head.next.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@a_head.next.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_iter_prev.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_iter_prev.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@l_head_data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_remove_last@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_head_data.last.next.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_head_data.last.next.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_head_data.last.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_head_data.last.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_head_data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@a_head.next.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@a_head.next.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_node.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_insert@l_node.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_create@a_head.data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    S922linked_list_s$data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_create@a_head.data	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    S922linked_list_s$next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_create@a_head.next	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    S926linked_list_head_data_s$last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    linked_list_create@l_head_data.last	PTR struct linked_list_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _merge_free_blocks@l_curr.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _merge_free_blocks@l_next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _merge_free_blocks@l_curr.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@a_block.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@l_new.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@a_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _split_free_block@l_new.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp___find_free_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    _find_free_block@l_current.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    free@l_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_previous.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_previous.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_block.next.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp__malloc.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_free.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp___find_free_block	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    S833block_s$next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    malloc@l_block.next	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    s_blocks	PTR struct block_s size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    sp__malloc	PTR void  size(2) Largest target is 512
		 -> s_heap(BIGRAM[512]), NULL(NULL[0]), 

    task_running@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_running@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    task_ready@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_ready@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    task_create@callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_3(), task_2(), task_1(), 

    task_create@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_create@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    sp__scheduler_round_robin.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__scheduler_round_robin	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher.tasks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    scheduler_round_robin@next.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    scheduler_round_robin@next	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher_change_context_isr@next.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__dispatcher.callback	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher_change_context_isr@next	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    sp__dispatcher_add_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__dispatcher_add_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    dispatcher_add_task@task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    dispatcher.running.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    idle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@n_stack	PTR struct task_context_stack_s size(2) Largest target is 2
		 -> dispatcher.stack(BIGRAM[94]), idle.stack(BANK0[94]), dispatcher.context.stack(BIGRAM[94]), idle.context.stack(BANK0[94]), 
		 -> global_isr@n_context(COMRAM[2]), 

    global_isr@n_context	PTR struct task_context_s size(2) Largest target is 318
		 -> dispatcher.context(BIGRAM[97]), idle.context(BANK0[97]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    global_isr@n_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@n_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    global_isr@p_stack	PTR struct task_context_stack_s size(2) Largest target is 2
		 -> dispatcher.stack(BIGRAM[94]), idle.stack(BANK0[94]), dispatcher.context.stack(BIGRAM[94]), idle.context.stack(BANK0[94]), 
		 -> global_isr@p_context(COMRAM[2]), 

    global_isr@p_context	PTR struct task_context_s size(2) Largest target is 318
		 -> dispatcher.context(BIGRAM[97]), idle.context(BANK0[97]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    S442task_s$callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@p_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@p_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    S449dispatcher_s$callback	PTR FTN()PTR struct task_s size(2) Largest target is 3
		 -> scheduler_round_robin(), 

    dispatcher.callback	PTR FTN()PTR struct task_s size(2) Largest target is 3
		 -> scheduler_round_robin(), 

    S449dispatcher_s$running	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher.running	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    timer0_init@callback	PTR FTN()void  size(2) Largest target is 1
		 -> dispatcher_change_context_isr(), 

    _timer0_callback	PTR FTN()void  size(2) Largest target is 1
		 -> dispatcher_change_context_isr(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _task_1 in COMRAM

    None.

Critical Paths under _task_2 in COMRAM

    None.

Critical Paths under _task_3 in COMRAM

    None.

Critical Paths under _task_idle_callback in COMRAM

    None.

Critical Paths under _global_isr in COMRAM

    _timer0_isr->_dispatcher_change_context_isr
    _dispatcher_change_context_isr->_scheduler_round_robin
    _scheduler_round_robin->___awmod
    _scheduler_round_robin->___wmul

Critical Paths under _main in BANK0

    _task_create->_dispatcher_add_task
    _dispatcher_start->_timer0_init

Critical Paths under _task_1 in BANK0

    None.

Critical Paths under _task_2 in BANK0

    None.

Critical Paths under _task_3 in BANK0

    None.

Critical Paths under _task_idle_callback in BANK0

    None.

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_task_create

Critical Paths under _task_1 in BANK1

    None.

Critical Paths under _task_2 in BANK1

    None.

Critical Paths under _task_3 in BANK1

    None.

Critical Paths under _task_idle_callback in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _task_1 in BANK2

    None.

Critical Paths under _task_2 in BANK2

    None.

Critical Paths under _task_3 in BANK2

    None.

Critical Paths under _task_idle_callback in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _task_1 in BANK3

    None.

Critical Paths under _task_2 in BANK3

    None.

Critical Paths under _task_3 in BANK3

    None.

Critical Paths under _task_idle_callback in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _task_1 in BANK4

    None.

Critical Paths under _task_2 in BANK4

    None.

Critical Paths under _task_3 in BANK4

    None.

Critical Paths under _task_idle_callback in BANK4

    None.

Critical Paths under _global_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _task_1 in BANK5

    None.

Critical Paths under _task_2 in BANK5

    None.

Critical Paths under _task_3 in BANK5

    None.

Critical Paths under _task_idle_callback in BANK5

    None.

Critical Paths under _global_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1850
                          _nojo_init
                         _nojo_start
                        _task_create
 ---------------------------------------------------------------------------------
 (1) _task_create                                         11     5      6    1580
                                              0 BANK1     11     5      6
                _dispatcher_add_task
                         _task_ready
 ---------------------------------------------------------------------------------
 (2) _task_ready                                           2     0      2     204
                                              8 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _dispatcher_add_task                                  5     3      2      34
                                              8 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nojo_start                                           0     0      0     270
                   _dispatcher_start
 ---------------------------------------------------------------------------------
 (2) _dispatcher_start                                     0     0      0     270
                        _timer0_init
 ---------------------------------------------------------------------------------
 (3) _timer0_init                                          4     0      4     270
                                              8 BANK0      4     0      4
                       _timer0_reset
 ---------------------------------------------------------------------------------
 (4) _timer0_reset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nojo_init                                            0     0      0       0
                    _dispatcher_init
 ---------------------------------------------------------------------------------
 (2) _dispatcher_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_1                                               3     3      0      46
                                             59 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_2                                               3     3      0      68
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_3                                               3     3      0      46
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_idle_callback                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _global_isr                                          35    35      0    2146
                                             24 COMRAM    35    35      0
                         _timer0_isr
 ---------------------------------------------------------------------------------
 (7) _timer0_isr                                           0     0      0    1600
                   Absolute function *
      _dispatcher_change_context_isr *
                     i2_timer0_reset
 ---------------------------------------------------------------------------------
 (8) i2_timer0_reset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _dispatcher_change_context_isr                        2     2      0    1600
                                             22 COMRAM     2     2      0
              _scheduler_round_robin *
                       _task_running
                       i2_task_ready
 ---------------------------------------------------------------------------------
 (9) i2_task_ready                                         2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _task_running                                         2     0      2     111
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _scheduler_round_robin                               16    14      2    1418
                                              6 COMRAM    16    14      2
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     693
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4     474
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nojo_init
     _dispatcher_init
   _nojo_start
     _dispatcher_start
       _timer0_init
         _timer0_reset
   _task_create
     _dispatcher_add_task
     _task_ready

 _task_1 (ROOT)

 _task_2 (ROOT)

 _task_3 (ROOT)

 _task_idle_callback (ROOT)

 _global_isr (ROOT)
   _timer0_isr
     Absolute function(Fake) *
     _dispatcher_change_context_isr *
       _scheduler_round_robin *
         ___awmod
         ___wmul
       _task_running *
       i2_task_ready *
     i2_timer0_reset *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     33D      17       54.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      B       B       7        4.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80      D      77       5       93.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3C      43       1       53.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C5      15        0.0%
DATA                 0      0     402       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Nov  1 17:11:07 2016

                                    l41 04A4                     ___wmul@multiplicand 0003  
                                   l141 07D6                                     _BSR 000FE0  
                          ___awmod@sign 0006                                     prod 000FF3  
                                   tosl 000FFD                                     wreg 000FE8  
                  __end_ofi2_task_ready 0796          ?_dispatcher_change_context_isr 0001  
                          __CFG_WDT$OFF 000000                                    l1623 051C  
                                  l1627 0548                                    l1781 0658  
                                  l1791 0566                                    l1777 0638  
                                  l1795 0590                                    _TMR0 000FD6  
                                  _TOSH 000FFE                                    _TOSL 000FFD  
                                  _WREG 000FE8                                    _TOSU 000FFF  
                                  __BSR 003F                        global_isr@n_task 0031  
                                  _idle 0080                                    _main 0430  
                      global_isr@p_task 002F                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  btemp 0044                                    pclat 000FFA  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0016             scheduler_round_robin@offset 000D  
                          ___param_bank 000010                        ?_dispatcher_init 0001  
                                 ?_main 0001                         __end_of___awmod 0518  
                                 i2l103 0218                                   u80_28 052C  
                                 u90_20 0642                                   u91_28 0644  
                                 u94_20 0572                                   u79_20 0528  
                                 u95_28 0576                             global_isr@i 002E  
                        i2_timer0_reset 07C2                                   __WREG 0041  
                     global_isr@n_stack 0038                       global_isr@p_stack 0033  
                                 pclath 000FFA                                   tablat 000FF5  
                                 status 000FD8                         __initialization 0672  
               ??_scheduler_round_robin 0009                            __end_of_main 04A8  
                   task_create@callback 0104                                  ??_main 00F5  
                __end_ofi2_timer0_reset 07CE                           __activetblptr 000002  
                     ?_dispatcher_start 0001                     _dispatcher_add_task 06DC  
                    ??_dispatcher_start 00F4                                  i2l1511 027A  
                                i2l1523 02D0                                  i2l1515 02BA  
                                i2l1507 026A                                  i2l1461 04E2  
                                i2l1453 04C8                                  i2l1533 035C  
                                i2l1527 02E0                                  i2l1519 02C0  
                                i2l1473 050E                                  i2l1465 04F6  
                                i2l1457 04D6                                  i2l1449 04BC  
                                i2l1537 0362                                  i2l1459 04DE  
                                i2l1469 0500                                  i2l1671 0124  
                                i2l1665 00B2                                  i2l1669 0118  
                                i2l1689 017E                                  i2l1697 0206  
                                _STATUS 000FD8                                  _STKPTR 000FFC  
                          ?_task_create 0100                    ?_dispatcher_add_task 00F0  
                   task_create@priority 0102                                  ___wmul 070A  
                             ??___awmod 0005                            ?_timer0_init 00F0  
                                _s_heap 010B                                  clear_0 067A  
                                clear_1 068C                                  _task_1 0634  
                                _task_2 0562                                  _task_3 0518  
                       ___awmod@divisor 0003                   __size_ofi2_task_ready 0012  
                       ___awmod@counter 0005                         ?i2_timer0_reset 0001  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                      _task_idle_callback 07D6  
                            __accesstop 0080                 __end_of__initialization 069C  
                       __CFG_PBADEN$OFF 000000                           ___rparam_used 000001  
                 ??_dispatcher_add_task 00F2                     ?_task_idle_callback 0001  
                          i2_task_ready 0784                          __pcstackCOMRAM 0001  
                       __CFG_OSC$INTIO7 000000                    ??_task_idle_callback 00F0  
                scheduler_round_robin@i 0015                  scheduler_round_robin@j 0011  
                            __pbssBANK0 0080                              __pnvCOMRAM 0042  
       ??_dispatcher_change_context_isr 0017                                 ?___wmul 0001  
                    __size_of_nojo_init 000E                                 ?_task_1 0001  
                               ?_task_2 0001                                 ?_task_3 0001  
                               i2u72_48 05B2                                 i2u72_49 05C6  
                               i2u74_48 0740                              _dispatcher 030B  
                               i2u88_40 01C0                                 i2u88_45 01B8  
                            _global_isr 0008                                 __STATUS 0040  
                               __Hparam 0000                                 __Lparam 0000  
                  __size_of_task_create 00C4                           ?_task_running 0001  
                   global_isr@n_context 003A                                 ___awmod 04A8  
                       __size_of___wmul 0026          __size_of_scheduler_round_robin 010E  
         __end_of_scheduler_round_robin 036C                     global_isr@p_context 0036  
                               __pcinit 0672                                 __ramtop 0600  
                       __size_of_task_1 003E                         __size_of_task_2 0048  
                       __size_of_task_3 004A                    __size_of_timer0_init 0032  
                         ?_timer0_reset 0001                                 __ptext0 0430  
                               __ptext1 036C                                 __ptext2 0770  
                               __ptext3 06DC                                 __ptext4 07CE  
                               __ptext5 0754                                 __ptext6 06AA  
                               __ptext7 07B6                                 __ptext8 07A8  
                               __ptext9 05F0                               _T0CONbits 000FD5  
                      ___awmod@dividend 0001                __size_of_dispatcher_init 0044  
                        __pintcode_body 001A                    end_of_initialization 069C  
                     __end_of_nojo_init 07B6                           __Lmediumconst 0000  
                               int_func 001A               __size_of_dispatcher_start 001C  
                               task_1@i 00E8                                 task_2@i 00EB  
                               task_3@i 00EE                              _nojo_start 07CE  
                        ??_task_running 0003                              _task_ready 0770  
                               postdec1 000FE5                                 postdec2 000FDD  
                            _timer0_isr 0730                                 postinc0 000FEE  
                               postinc2 000FDE                        ??i2_timer0_reset 0001  
                        ??_timer0_reset 00F0                               _PORTDbits 000F83  
                             _TRISDbits 000F95                             ?_global_isr 0001  
                       global_isr@i_581 0035              scheduler_round_robin@i_743 0013  
                      task_ready@handle 00F0                       task_create@handle 0109  
                        __end_of___wmul 0730                          __end_of_task_1 0672  
                        __end_of_task_2 05AA                          __end_of_task_3 0562  
                   start_initialization 0672             __end_of_dispatcher_add_task 070A  
                     ??_dispatcher_init 00F0                             ?_nojo_start 0001  
                           ?_task_ready 00F0                             ?_timer0_isr 0001  
                              ??___wmul 0005                                ??_task_1 003C  
                              ??_task_2 00EA                                ??_task_3 00ED  
                   __size_of_global_isr 0256                             __pbssBIGRAM 010B  
                           __pbssCOMRAM 003D             __size_of_task_idle_callback 0004  
                         __pcstackBANK0 00E8                           __pcstackBANK1 0100  
                  __end_of_task_running 07A8                    __end_of_timer0_reset 07C2  
                      _dispatcher_start 0754                               __pnvBANK0 00F5  
                         task_create@id 0100                               __pintcode 0008  
                              ?___awmod 0001                     __size_of_nojo_start 0008  
                   __size_of_task_ready 0014                     __size_of_timer0_isr 0024  
                        ___wmul@product 0005                           ??_task_create 0106  
                              _LATDbits 000F8C                               _nojo_init 07A8  
                         ??_timer0_init 00F4                       ___wmul@multiplier 0001  
                 _scheduler_round_robin 025E                             _INTCON2bits 000FF1  
                          ??_global_isr 0019                              ?_nojo_init 0001  
                              __Hrparam 0000                           ?i2_task_ready 0001  
                              __Lrparam 0000                     __end_of_task_create 0430  
                      __size_of___awmod 0070                   __size_of_task_running 0012  
                    __end_of_global_isr 025E                         _dispatcher_init 05F0  
                   __end_of_timer0_init 06DC                      task_running@handle 0001  
               dispatcher_add_task@task 00F3                                __ptext10 0634  
                              __ptext11 0562                                __ptext20 025E  
                              __ptext12 0518                                __ptext21 070A  
                              __ptext13 07D6                                __ptext22 04A8  
                              __ptext23 0000                                __ptext15 0730  
                              __ptext16 07C2                                __ptext17 05AA  
                              __ptext18 0784                                __ptext19 0796  
                 __size_of_timer0_reset 000C                           __size_of_main 0078  
                              _s_blocks 003D                            ??_nojo_start 00F4  
                        ??i2_task_ready 0003                            ??_task_ready 00F2  
                          _task_running 0796                            ??_timer0_isr 0019  
                              int$flags 0044                     timer0_init@callback 00F2  
                    i2task_ready@handle 0001                     timer0_init@delay_us 00F0  
                ?_scheduler_round_robin 0007                __end_of_dispatcher_start 0770  
 __end_of_dispatcher_change_context_isr 05F0  __size_of_dispatcher_change_context_isr 0046  
         _dispatcher_change_context_isr 05AA                            _timer0_reset 07B6  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
               __size_ofi2_timer0_reset 000C                      __end_of_nojo_start 07D6  
                    __end_of_task_ready 0784       dispatcher_change_context_isr@next 0017  
                              intlevel1 0000                                intlevel2 0000  
                    __end_of_timer0_isr 0754                             _task_create 036C  
                           ??_nojo_init 00F0                              _OSCCONbits 000FD3  
          __size_of_dispatcher_add_task 002E                 __end_of_dispatcher_init 0634  
                           _timer0_init 06AA              __end_of_task_idle_callback 07DA  
             scheduler_round_robin@next 000F                        __timer0_callback 0042  
                      __timer0_delay_us 00F5  
