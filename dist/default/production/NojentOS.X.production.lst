

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Nov  1 16:53:20 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    41                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    42  0000                     
    43                           	psect	nvCOMRAM
    44  000042                     __pnvCOMRAM:
    45                           	opt stack 0
    46  000042                     __timer0_callback:
    47                           	opt stack 0
    48  000042                     	ds	2
    49                           
    50                           	psect	nvBANK0
    51  0000F8                     __pnvBANK0:
    52                           	opt stack 0
    53  0000F8                     __timer0_delay_us:
    54                           	opt stack 0
    55  0000F8                     	ds	2
    56  0000                     _TMR0	set	4054
    57  0000                     _BSR	set	4064
    58  0000                     _INTCON2bits	set	4081
    59  0000                     _INTCONbits	set	4082
    60  0000                     _LATDbits	set	3980
    61  0000                     _OSCCONbits	set	4051
    62  0000                     _OSCTUNEbits	set	3995
    63  0000                     _PORTDbits	set	3971
    64  0000                     _STATUS	set	4056
    65  0000                     _STKPTR	set	4092
    66  0000                     _T0CONbits	set	4053
    67  0000                     _TOSH	set	4094
    68  0000                     _TOSL	set	4093
    69  0000                     _TOSU	set	4095
    70  0000                     _TRISDbits	set	3989
    71  0000                     _WREG	set	4072
    72                           
    73                           ; #config settings
    74  0000                     
    75                           	psect	cinit
    76  00066A                     __pcinit:
    77                           	opt stack 0
    78  00066A                     start_initialization:
    79                           	opt stack 0
    80  00066A                     __initialization:
    81                           	opt stack 0
    82                           
    83                           ; Clear objects allocated to BIGRAM (317 bytes)
    84  00066A  EE01  F006         	lfsr	0,__pbssBIGRAM
    85  00066E  EE11 F03D          	lfsr	1,317
    86  000672                     clear_0:
    87  000672  6AEE               	clrf	postinc0,c
    88  000674  50E5               	movf	postdec1,w,c
    89  000676  50E1               	movf	fsr1l,w,c
    90  000678  E1FC               	bnz	clear_0
    91  00067A  50E2               	movf	fsr1h,w,c
    92  00067C  E1FA               	bnz	clear_0
    93                           
    94                           ; Clear objects allocated to BANK0 (104 bytes)
    95  00067E  EE00  F080         	lfsr	0,__pbssBANK0
    96  000682  0E68               	movlw	104
    97  000684                     clear_1:
    98  000684  6AEE               	clrf	postinc0,c
    99  000686  06E8               	decf	wreg,f,c
   100  000688  E1FD               	bnz	clear_1
   101                           
   102                           ; Clear objects allocated to COMRAM (3 bytes)
   103  00068A  6A41               	clrf	(__pbssCOMRAM+2)& (0+255),c
   104  00068C  6A40               	clrf	(__pbssCOMRAM+1)& (0+255),c
   105  00068E  6A3F               	clrf	__pbssCOMRAM& (0+255),c
   106  000690                     end_of_initialization:
   107                           	opt stack 0
   108  000690                     __end_of__initialization:
   109                           	opt stack 0
   110  000690  9044               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   111  000692  9244               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   112  000694  0E00               	movlw	low (__Lmediumconst shr (0+16))
   113  000696  6EF8               	movwf	tblptru,c
   114  000698  0100               	movlb	0
   115  00069A  EF18  F002         	goto	_main	;jump to C main() function
   116                           tblptru	equ	0xFF8
   117                           postinc0	equ	0xFEE
   118                           wreg	equ	0xFE8
   119                           postdec1	equ	0xFE5
   120                           fsr1h	equ	0xFE2
   121                           fsr1l	equ	0xFE1
   122                           
   123                           	psect	bssCOMRAM
   124  00003F                     __pbssCOMRAM:
   125                           	opt stack 0
   126  00003F                     __BSR:
   127                           	opt stack 0
   128  00003F                     	ds	1
   129  000040                     __STATUS:
   130                           	opt stack 0
   131  000040                     	ds	1
   132  000041                     __WREG:
   133                           	opt stack 0
   134  000041                     	ds	1
   135                           tblptru	equ	0xFF8
   136                           postinc0	equ	0xFEE
   137                           wreg	equ	0xFE8
   138                           postdec1	equ	0xFE5
   139                           fsr1h	equ	0xFE2
   140                           fsr1l	equ	0xFE1
   141                           
   142                           	psect	bssBANK0
   143  000080                     __pbssBANK0:
   144                           	opt stack 0
   145  000080                     _idle:
   146                           	opt stack 0
   147  000080                     	ds	104
   148                           tblptru	equ	0xFF8
   149                           postinc0	equ	0xFEE
   150                           wreg	equ	0xFE8
   151                           postdec1	equ	0xFE5
   152                           fsr1h	equ	0xFE2
   153                           fsr1l	equ	0xFE1
   154                           
   155                           	psect	bssBIGRAM
   156  000106                     __pbssBIGRAM:
   157                           	opt stack 0
   158  000106                     _dispatcher:
   159                           	opt stack 0
   160  000106                     	ds	317
   161                           tblptru	equ	0xFF8
   162                           postinc0	equ	0xFEE
   163                           wreg	equ	0xFE8
   164                           postdec1	equ	0xFE5
   165                           fsr1h	equ	0xFE2
   166                           fsr1l	equ	0xFE1
   167                           
   168                           	psect	cstackBANK1
   169  000100                     __pcstackBANK1:
   170                           	opt stack 0
   171  000100                     task_create@id:
   172                           	opt stack 0
   173                           
   174                           ; 2 bytes @ 0x0
   175  000100                     	ds	2
   176  000102                     task_create@priority:
   177                           	opt stack 0
   178                           
   179                           ; 2 bytes @ 0x2
   180  000102                     	ds	2
   181  000104                     task_create@callback:
   182                           	opt stack 0
   183                           
   184                           ; 2 bytes @ 0x4
   185  000104                     	ds	2
   186                           tblptru	equ	0xFF8
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           postdec1	equ	0xFE5
   190                           fsr1h	equ	0xFE2
   191                           fsr1l	equ	0xFE1
   192                           
   193                           	psect	cstackBANK0
   194  0000E8                     __pcstackBANK0:
   195                           	opt stack 0
   196  0000E8                     ??_task_2:
   197                           
   198                           ; 1 bytes @ 0x0
   199  0000E8                     	ds	1
   200  0000E9                     task_2@i:
   201                           	opt stack 0
   202                           
   203                           ; 2 bytes @ 0x1
   204  0000E9                     	ds	2
   205  0000EB                     ??_task_3:
   206                           
   207                           ; 1 bytes @ 0x3
   208  0000EB                     	ds	1
   209  0000EC                     task_3@i:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x4
   213  0000EC                     	ds	2
   214  0000EE                     ?_dispatcher_add_task:
   215                           	opt stack 0
   216  0000EE                     timer0_init@delay_us:
   217                           	opt stack 0
   218  0000EE                     task_ready@handle:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x6
   222  0000EE                     	ds	2
   223  0000F0                     ??_dispatcher_add_task:
   224  0000F0                     timer0_init@callback:
   225                           	opt stack 0
   226                           
   227                           ; 2 bytes @ 0x8
   228  0000F0                     	ds	1
   229  0000F1                     dispatcher_add_task@task:
   230                           	opt stack 0
   231                           
   232                           ; 2 bytes @ 0x9
   233  0000F1                     	ds	1
   234  0000F2                     
   235                           ; 1 bytes @ 0xA
   236  0000F2                     	ds	1
   237  0000F3                     ??_task_create:
   238                           
   239                           ; 1 bytes @ 0xB
   240  0000F3                     	ds	3
   241  0000F6                     task_create@handle:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0xE
   245  0000F6                     	ds	2
   246  0000F8                     tblptru	equ	0xFF8
   247                           postinc0	equ	0xFEE
   248                           wreg	equ	0xFE8
   249                           postdec1	equ	0xFE5
   250                           fsr1h	equ	0xFE2
   251                           fsr1l	equ	0xFE1
   252                           
   253                           ; 1 bytes @ 0x10
   254                           
   255                           	psect	cstackCOMRAM
   256  000001                     __pcstackCOMRAM:
   257                           	opt stack 0
   258  000001                     ?___wmul:
   259                           	opt stack 0
   260  000001                     ?___awmod:
   261                           	opt stack 0
   262  000001                     task_running@handle:
   263                           	opt stack 0
   264  000001                     ___wmul@multiplier:
   265                           	opt stack 0
   266  000001                     ___awmod@dividend:
   267                           	opt stack 0
   268  000001                     i2task_ready@handle:
   269                           	opt stack 0
   270                           
   271                           ; 2 bytes @ 0x0
   272  000001                     	ds	2
   273  000003                     ___wmul@multiplicand:
   274                           	opt stack 0
   275  000003                     ___awmod@divisor:
   276                           	opt stack 0
   277                           
   278                           ; 2 bytes @ 0x2
   279  000003                     	ds	2
   280  000005                     ___awmod@counter:
   281                           	opt stack 0
   282  000005                     ___wmul@product:
   283                           	opt stack 0
   284                           
   285                           ; 2 bytes @ 0x4
   286  000005                     	ds	1
   287  000006                     ___awmod@sign:
   288                           	opt stack 0
   289                           
   290                           ; 1 bytes @ 0x5
   291  000006                     	ds	1
   292  000007                     ?_scheduler_round_robin:
   293                           	opt stack 0
   294                           
   295                           ; 2 bytes @ 0x6
   296  000007                     	ds	2
   297  000009                     ??_scheduler_round_robin:
   298                           
   299                           ; 1 bytes @ 0x8
   300  000009                     	ds	4
   301  00000D                     scheduler_round_robin@offset:
   302                           	opt stack 0
   303                           
   304                           ; 2 bytes @ 0xC
   305  00000D                     	ds	2
   306  00000F                     scheduler_round_robin@next:
   307                           	opt stack 0
   308                           
   309                           ; 2 bytes @ 0xE
   310  00000F                     	ds	2
   311  000011                     scheduler_round_robin@j:
   312                           	opt stack 0
   313                           
   314                           ; 2 bytes @ 0x10
   315  000011                     	ds	2
   316  000013                     scheduler_round_robin@i_743:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x12
   320  000013                     	ds	2
   321  000015                     scheduler_round_robin@i:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x14
   325  000015                     	ds	2
   326  000017                     dispatcher_change_context_isr@next:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x16
   330  000017                     	ds	2
   331  000019                     ??_global_isr:
   332                           
   333                           ; 1 bytes @ 0x18
   334  000019                     	ds	21
   335  00002E                     global_isr@i:
   336                           	opt stack 0
   337                           
   338                           ; 1 bytes @ 0x2D
   339  00002E                     	ds	1
   340  00002F                     global_isr@p_task:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x2E
   344  00002F                     	ds	2
   345  000031                     global_isr@n_task:
   346                           	opt stack 0
   347                           
   348                           ; 2 bytes @ 0x30
   349  000031                     	ds	2
   350  000033                     global_isr@p_stack:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x32
   354  000033                     	ds	2
   355  000035                     global_isr@i_581:
   356                           	opt stack 0
   357                           
   358                           ; 1 bytes @ 0x34
   359  000035                     	ds	1
   360  000036                     global_isr@p_context:
   361                           	opt stack 0
   362                           
   363                           ; 2 bytes @ 0x35
   364  000036                     	ds	2
   365  000038                     global_isr@n_stack:
   366                           	opt stack 0
   367                           
   368                           ; 2 bytes @ 0x37
   369  000038                     	ds	2
   370  00003A                     global_isr@n_context:
   371                           	opt stack 0
   372                           
   373                           ; 2 bytes @ 0x39
   374  00003A                     	ds	2
   375  00003C                     ??_task_1:
   376                           
   377                           ; 1 bytes @ 0x3B
   378  00003C                     	ds	1
   379  00003D                     task_1@i:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x3C
   383  00003D                     	ds	2
   384                           tblptru	equ	0xFF8
   385                           postinc0	equ	0xFEE
   386                           wreg	equ	0xFE8
   387                           postdec1	equ	0xFE5
   388                           fsr1h	equ	0xFE2
   389                           fsr1l	equ	0xFE1
   390                           
   391 ;;
   392 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   393 ;;
   394 ;; *************** function _main *****************
   395 ;; Defined at:
   396 ;;		line 41 in file "main.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;		None
   399 ;; Auto vars:     Size  Location     Type
   400 ;;		None
   401 ;; Return value:  Size  Location     Type
   402 ;;                  1    wreg      void 
   403 ;; Registers used:
   404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   405 ;; Tracked objects:
   406 ;;		On entry : 0/0
   407 ;;		On exit  : 0/0
   408 ;;		Unchanged: 0/0
   409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   410 ;;      Params:         0       0       0       0       0       0       0
   411 ;;      Locals:         0       0       0       0       0       0       0
   412 ;;      Temps:          0       0       0       0       0       0       0
   413 ;;      Totals:         0       0       0       0       0       0       0
   414 ;;Total ram usage:        0 bytes
   415 ;; Hardware stack levels required when called:   10
   416 ;; This function calls:
   417 ;;		_nojo_init
   418 ;;		_nojo_start
   419 ;;		_task_create
   420 ;; This function is called by:
   421 ;;		Startup code after reset
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           	psect	text0
   426  000430                     __ptext0:
   427                           	opt stack 0
   428  000430                     _main:
   429                           	opt stack 21
   430                           
   431                           ;main.c: 43: nojo_init();
   432                           
   433                           ;incstack = 0
   434  000430  ECCE  F003         	call	_nojo_init	;# 
   435                           
   436                           ;main.c: 47: task_create( 1, 200, task_1 );
   437  000434  0E00               	movlw	0
   438  000436  0101               	movlb	1	; () banked
   439  000438  6F01               	movwf	(task_create@id+1)& (0+255),b
   440  00043A  0E01               	movlw	1
   441  00043C  6F00               	movwf	task_create@id& (0+255),b
   442  00043E  0E00               	movlw	0
   443  000440  0101               	movlb	1	; () banked
   444  000442  6F03               	movwf	(task_create@priority+1)& (0+255),b
   445  000444  0EC8               	movlw	200
   446  000446  6F02               	movwf	task_create@priority& (0+255),b
   447  000448  0E34               	movlw	low _task_1
   448  00044A  0101               	movlb	1	; () banked
   449  00044C  6F04               	movwf	task_create@callback& (0+255),b
   450  00044E  0E06               	movlw	high _task_1
   451  000450  0101               	movlb	1	; () banked
   452  000452  6F05               	movwf	(task_create@callback+1)& (0+255),b
   453  000454  ECB6  F001         	call	_task_create	;wreg free
   454                           
   455                           ;main.c: 48: task_create( 2, 100, task_2 );
   456  000458  0E00               	movlw	0
   457  00045A  0101               	movlb	1	; () banked
   458  00045C  6F01               	movwf	(task_create@id+1)& (0+255),b
   459  00045E  0E02               	movlw	2
   460  000460  6F00               	movwf	task_create@id& (0+255),b
   461  000462  0E00               	movlw	0
   462  000464  0101               	movlb	1	; () banked
   463  000466  6F03               	movwf	(task_create@priority+1)& (0+255),b
   464  000468  0E64               	movlw	100
   465  00046A  6F02               	movwf	task_create@priority& (0+255),b
   466  00046C  0E62               	movlw	low _task_2
   467  00046E  0101               	movlb	1	; () banked
   468  000470  6F04               	movwf	task_create@callback& (0+255),b
   469  000472  0E05               	movlw	high _task_2
   470  000474  0101               	movlb	1	; () banked
   471  000476  6F05               	movwf	(task_create@callback+1)& (0+255),b
   472  000478  ECB6  F001         	call	_task_create	;wreg free
   473                           
   474                           ;main.c: 49: task_create( 3, 50, task_3 );
   475  00047C  0E00               	movlw	0
   476  00047E  0101               	movlb	1	; () banked
   477  000480  6F01               	movwf	(task_create@id+1)& (0+255),b
   478  000482  0E03               	movlw	3
   479  000484  6F00               	movwf	task_create@id& (0+255),b
   480  000486  0E00               	movlw	0
   481  000488  0101               	movlb	1	; () banked
   482  00048A  6F03               	movwf	(task_create@priority+1)& (0+255),b
   483  00048C  0E32               	movlw	50
   484  00048E  6F02               	movwf	task_create@priority& (0+255),b
   485  000490  0E18               	movlw	low _task_3
   486  000492  0101               	movlb	1	; () banked
   487  000494  6F04               	movwf	task_create@callback& (0+255),b
   488  000496  0E05               	movlw	high _task_3
   489  000498  0101               	movlb	1	; () banked
   490  00049A  6F05               	movwf	(task_create@callback+1)& (0+255),b
   491  00049C  ECB6  F001         	call	_task_create	;wreg free
   492                           
   493                           ;main.c: 51: nojo_start();
   494  0004A0  ECE1  F003         	call	_nojo_start	;wreg free
   495  0004A4                     l41:
   496  0004A4  F000               	nop		;# 
   497  0004A6  D7FE               	goto	l41
   498  0004A8                     __end_of_main:
   499                           	opt stack 0
   500                           tblptru	equ	0xFF8
   501                           postinc0	equ	0xFEE
   502                           wreg	equ	0xFE8
   503                           postdec1	equ	0xFE5
   504                           fsr1h	equ	0xFE2
   505                           fsr1l	equ	0xFE1
   506                           
   507 ;; *************** function _task_create *****************
   508 ;; Defined at:
   509 ;;		line 5 in file "kernel/task.c"
   510 ;; Parameters:    Size  Location     Type
   511 ;;  id              2    0[BANK1 ] unsigned int 
   512 ;;  priority        2    2[BANK1 ] unsigned int 
   513 ;;  callback        2    4[BANK1 ] PTR FTN()void 
   514 ;;		 -> task_3(1), task_2(1), task_1(1), 
   515 ;; Auto vars:     Size  Location     Type
   516 ;;  handle          2   14[BANK0 ] PTR struct task_s
   517 ;;		 -> dispatcher.tasks(312), dispatcher(317), 
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   527 ;;      Params:         0       0       6       0       0       0       0
   528 ;;      Locals:         0       2       0       0       0       0       0
   529 ;;      Temps:          0       3       0       0       0       0       0
   530 ;;      Totals:         0       5       6       0       0       0       0
   531 ;;Total ram usage:       11 bytes
   532 ;; Hardware stack levels used:    1
   533 ;; Hardware stack levels required when called:    7
   534 ;; This function calls:
   535 ;;		_dispatcher_add_task
   536 ;;		_task_ready
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text1
   543  00036C                     __ptext1:
   544                           	opt stack 0
   545  00036C                     _task_create:
   546                           	opt stack 23
   547                           
   548                           ;task.c: 8: task_t* handle = dispatcher_add_task();
   549                           
   550                           ;incstack = 0
   551  00036C  EC68  F003         	call	_dispatcher_add_task	;wreg free
   552  000370  C0EE  F0F6         	movff	?_dispatcher_add_task,task_create@handle
   553  000374  C0EF  F0F7         	movff	?_dispatcher_add_task+1,task_create@handle+1
   554                           
   555                           ;task.c: 10: handle->id = id;
   556  000378  C0F6  FFD9         	movff	task_create@handle,fsr2l
   557  00037C  C0F7  FFDA         	movff	task_create@handle+1,fsr2h
   558  000380  C100  FFDE         	movff	task_create@id,postinc2
   559  000384  C101  FFDD         	movff	task_create@id+1,postdec2
   560                           
   561                           ;task.c: 11: handle->priority = priority;
   562  000388  0100               	movlb	0	; () banked
   563  00038A  EE20 F002          	lfsr	2,2
   564  00038E  51F6               	movf	task_create@handle& (0+255),w,b
   565  000390  26D9               	addwf	fsr2l,f,c
   566  000392  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   567  000394  22DA               	addwfc	fsr2h,f,c
   568  000396  C102  FFDE         	movff	task_create@priority,postinc2
   569  00039A  C103  FFDD         	movff	task_create@priority+1,postdec2
   570                           
   571                           ; BSR set to: 0
   572                           ;task.c: 12: handle->callback = callback;
   573  00039E  0100               	movlb	0	; () banked
   574  0003A0  EE20 F005          	lfsr	2,5
   575  0003A4  51F6               	movf	task_create@handle& (0+255),w,b
   576  0003A6  26D9               	addwf	fsr2l,f,c
   577  0003A8  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   578  0003AA  22DA               	addwfc	fsr2h,f,c
   579  0003AC  C104  FFDE         	movff	task_create@callback,postinc2
   580  0003B0  C105  FFDD         	movff	task_create@callback+1,postdec2
   581                           
   582                           ; BSR set to: 0
   583                           ;task.c: 15: handle->context.work = WREG;
   584  0003B4  0100               	movlb	0	; () banked
   585  0003B6  EE20 F007          	lfsr	2,7
   586  0003BA  51F6               	movf	task_create@handle& (0+255),w,b
   587  0003BC  26D9               	addwf	fsr2l,f,c
   588  0003BE  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   589  0003C0  22DA               	addwfc	fsr2h,f,c
   590  0003C2  CFE8 FFDF          	movff	wreg,indf2	;volatile
   591                           
   592                           ; BSR set to: 0
   593                           ;task.c: 16: handle->context.bsr = BSR;
   594  0003C6  0100               	movlb	0	; () banked
   595  0003C8  EE20 F008          	lfsr	2,8
   596  0003CC  51F6               	movf	task_create@handle& (0+255),w,b
   597  0003CE  26D9               	addwf	fsr2l,f,c
   598  0003D0  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   599  0003D2  22DA               	addwfc	fsr2h,f,c
   600  0003D4  CFE0 FFDF          	movff	bsr,indf2	;volatile
   601                           
   602                           ; BSR set to: 0
   603                           ;task.c: 17: handle->context.status = STATUS;
   604  0003D8  0100               	movlb	0	; () banked
   605  0003DA  EE20 F009          	lfsr	2,9
   606  0003DE  51F6               	movf	task_create@handle& (0+255),w,b
   607  0003E0  26D9               	addwf	fsr2l,f,c
   608  0003E2  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   609  0003E4  22DA               	addwfc	fsr2h,f,c
   610  0003E6  CFD8 FFDF          	movff	status,indf2	;volatile
   611                           
   612                           ; BSR set to: 0
   613                           ;task.c: 18: handle->context.stack.size = 1;
   614  0003EA  0100               	movlb	0	; () banked
   615  0003EC  EE20 F067          	lfsr	2,103
   616  0003F0  51F6               	movf	task_create@handle& (0+255),w,b
   617  0003F2  26D9               	addwf	fsr2l,f,c
   618  0003F4  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   619  0003F6  22DA               	addwfc	fsr2h,f,c
   620  0003F8  0E01               	movlw	1
   621  0003FA  6EDF               	movwf	indf2,c
   622                           
   623                           ; BSR set to: 0
   624                           ;task.c: 19: handle->context.stack.values[0] = (uint24_t)callback;
   625  0003FC  C104  F0F3         	movff	task_create@callback,??_task_create
   626  000400  C105  F0F4         	movff	task_create@callback+1,??_task_create+1
   627  000404  0100               	movlb	0	; () banked
   628  000406  6BF5               	clrf	(??_task_create+2)& (0+255),b
   629  000408  0100               	movlb	0	; () banked
   630  00040A  EE20 F00A          	lfsr	2,10
   631  00040E  51F6               	movf	task_create@handle& (0+255),w,b
   632  000410  26D9               	addwf	fsr2l,f,c
   633  000412  51F7               	movf	(task_create@handle+1)& (0+255),w,b
   634  000414  22DA               	addwfc	fsr2h,f,c
   635  000416  C0F3  FFDE         	movff	??_task_create,postinc2
   636  00041A  C0F4  FFDE         	movff	??_task_create+1,postinc2
   637  00041E  C0F5  FFDE         	movff	??_task_create+2,postinc2
   638                           
   639                           ; BSR set to: 0
   640                           ;task.c: 21: task_ready( handle );
   641  000422  C0F6  F0EE         	movff	task_create@handle,task_ready@handle
   642  000426  C0F7  F0EF         	movff	task_create@handle+1,task_ready@handle+1
   643  00042A  ECB2  F003         	call	_task_ready	;wreg free
   644  00042E  0012               	return		;funcret
   645  000430                     __end_of_task_create:
   646                           	opt stack 0
   647                           tblptru	equ	0xFF8
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1h	equ	0xFE2
   652                           fsr1l	equ	0xFE1
   653                           bsr	equ	0xFE0
   654                           indf2	equ	0xFDF
   655                           postinc2	equ	0xFDE
   656                           postdec2	equ	0xFDD
   657                           fsr2h	equ	0xFDA
   658                           fsr2l	equ	0xFD9
   659                           status	equ	0xFD8
   660                           
   661 ;; *************** function _task_ready *****************
   662 ;; Defined at:
   663 ;;		line 24 in file "kernel/task.c"
   664 ;; Parameters:    Size  Location     Type
   665 ;;  handle          2    6[BANK0 ] PTR struct task_s
   666 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
   667 ;; Auto vars:     Size  Location     Type
   668 ;;		None
   669 ;; Return value:  Size  Location     Type
   670 ;;                  1    wreg      void 
   671 ;; Registers used:
   672 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   673 ;; Tracked objects:
   674 ;;		On entry : 0/0
   675 ;;		On exit  : 0/0
   676 ;;		Unchanged: 0/0
   677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   678 ;;      Params:         0       2       0       0       0       0       0
   679 ;;      Locals:         0       0       0       0       0       0       0
   680 ;;      Temps:          0       0       0       0       0       0       0
   681 ;;      Totals:         0       2       0       0       0       0       0
   682 ;;Total ram usage:        2 bytes
   683 ;; Hardware stack levels used:    1
   684 ;; Hardware stack levels required when called:    6
   685 ;; This function calls:
   686 ;;		Nothing
   687 ;; This function is called by:
   688 ;;		_task_create
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text2
   693  000764                     __ptext2:
   694                           	opt stack 0
   695  000764                     _task_ready:
   696                           	opt stack 23
   697                           
   698                           ;task.c: 25: handle->state = task_state_ready;
   699                           
   700                           ;incstack = 0
   701  000764  0100               	movlb	0	; () banked
   702  000766  EE20 F004          	lfsr	2,4
   703  00076A  51EE               	movf	task_ready@handle& (0+255),w,b
   704  00076C  26D9               	addwf	fsr2l,f,c
   705  00076E  51EF               	movf	(task_ready@handle+1)& (0+255),w,b
   706  000770  22DA               	addwfc	fsr2h,f,c
   707  000772  0E00               	movlw	0
   708  000774  6EDF               	movwf	indf2,c
   709                           
   710                           ; BSR set to: 0
   711  000776  0012               	return		;funcret
   712  000778                     __end_of_task_ready:
   713                           	opt stack 0
   714                           tblptru	equ	0xFF8
   715                           postinc0	equ	0xFEE
   716                           wreg	equ	0xFE8
   717                           postdec1	equ	0xFE5
   718                           fsr1h	equ	0xFE2
   719                           fsr1l	equ	0xFE1
   720                           bsr	equ	0xFE0
   721                           indf2	equ	0xFDF
   722                           postinc2	equ	0xFDE
   723                           postdec2	equ	0xFDD
   724                           fsr2h	equ	0xFDA
   725                           fsr2l	equ	0xFD9
   726                           status	equ	0xFD8
   727                           
   728 ;; *************** function _dispatcher_add_task *****************
   729 ;; Defined at:
   730 ;;		line 39 in file "kernel/dispatcher.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;  task            2    9[BANK0 ] PTR struct task_s
   735 ;;		 -> dispatcher.tasks(312), dispatcher(317), 
   736 ;; Return value:  Size  Location     Type
   737 ;;                  2    6[BANK0 ] PTR struct task_s
   738 ;; Registers used:
   739 ;;		wreg, status,2, status,0, prodl, prodh
   740 ;; Tracked objects:
   741 ;;		On entry : 0/0
   742 ;;		On exit  : 0/0
   743 ;;		Unchanged: 0/0
   744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   745 ;;      Params:         0       2       0       0       0       0       0
   746 ;;      Locals:         0       2       0       0       0       0       0
   747 ;;      Temps:          0       1       0       0       0       0       0
   748 ;;      Totals:         0       5       0       0       0       0       0
   749 ;;Total ram usage:        5 bytes
   750 ;; Hardware stack levels used:    1
   751 ;; Hardware stack levels required when called:    6
   752 ;; This function calls:
   753 ;;		Nothing
   754 ;; This function is called by:
   755 ;;		_task_create
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text3
   760  0006D0                     __ptext3:
   761                           	opt stack 0
   762  0006D0                     _dispatcher_add_task:
   763                           	opt stack 23
   764                           
   765                           ;dispatcher.c: 40: task_t* task = &dispatcher.tasks[dispatcher.size];
   766                           
   767                           ; BSR set to: 0
   768                           ;incstack = 0
   769  0006D0  C23E  F0F0         	movff	_dispatcher+312,??_dispatcher_add_task
   770  0006D4  0100               	movlb	0	; () banked
   771  0006D6  51F0               	movf	??_dispatcher_add_task& (0+255),w,b
   772  0006D8  0D68               	mullw	104
   773  0006DA  0E06               	movlw	low _dispatcher
   774  0006DC  24F3               	addwf	prodl,w,c
   775  0006DE  0100               	movlb	0	; () banked
   776  0006E0  6FF1               	movwf	dispatcher_add_task@task& (0+255),b
   777  0006E2  0E01               	movlw	high _dispatcher
   778  0006E4  20F4               	addwfc	prodh,w,c
   779  0006E6  0100               	movlb	0	; () banked
   780  0006E8  6FF2               	movwf	(dispatcher_add_task@task+1)& (0+255),b
   781                           
   782                           ; BSR set to: 0
   783                           ;dispatcher.c: 41: dispatcher.size++;
   784  0006EA  C23E  FFE8         	movff	_dispatcher+312,wreg
   785  0006EE  0F01               	addlw	1
   786  0006F0  CFE8 F23E          	movff	wreg,_dispatcher+312
   787                           
   788                           ; BSR set to: 0
   789                           ;dispatcher.c: 42: return task;
   790  0006F4  C0F1  F0EE         	movff	dispatcher_add_task@task,?_dispatcher_add_task
   791  0006F8  C0F2  F0EF         	movff	dispatcher_add_task@task+1,?_dispatcher_add_task+1
   792  0006FC  0012               	return	
   793  0006FE                     __end_of_dispatcher_add_task:
   794                           	opt stack 0
   795                           tblptru	equ	0xFF8
   796                           prodh	equ	0xFF4
   797                           prodl	equ	0xFF3
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           postdec1	equ	0xFE5
   801                           fsr1h	equ	0xFE2
   802                           fsr1l	equ	0xFE1
   803                           bsr	equ	0xFE0
   804                           indf2	equ	0xFDF
   805                           postinc2	equ	0xFDE
   806                           postdec2	equ	0xFDD
   807                           fsr2h	equ	0xFDA
   808                           fsr2l	equ	0xFD9
   809                           status	equ	0xFD8
   810                           
   811 ;; *************** function _nojo_start *****************
   812 ;; Defined at:
   813 ;;		line 23 in file "nojentOS.c"
   814 ;; Parameters:    Size  Location     Type
   815 ;;		None
   816 ;; Auto vars:     Size  Location     Type
   817 ;;		None
   818 ;; Return value:  Size  Location     Type
   819 ;;                  1    wreg      void 
   820 ;; Registers used:
   821 ;;		wreg, status,2, status,0, cstack
   822 ;; Tracked objects:
   823 ;;		On entry : 0/0
   824 ;;		On exit  : 0/0
   825 ;;		Unchanged: 0/0
   826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   827 ;;      Params:         0       0       0       0       0       0       0
   828 ;;      Locals:         0       0       0       0       0       0       0
   829 ;;      Temps:          0       0       0       0       0       0       0
   830 ;;      Totals:         0       0       0       0       0       0       0
   831 ;;Total ram usage:        0 bytes
   832 ;; Hardware stack levels used:    1
   833 ;; Hardware stack levels required when called:    9
   834 ;; This function calls:
   835 ;;		_dispatcher_start
   836 ;; This function is called by:
   837 ;;		_main
   838 ;; This function uses a non-reentrant model
   839 ;;
   840                           
   841                           	psect	text4
   842  0007C2                     __ptext4:
   843                           	opt stack 0
   844  0007C2                     _nojo_start:
   845                           	opt stack 21
   846                           
   847                           ;nojentOS.c: 24: dispatcher_start();
   848                           
   849                           ; BSR set to: 0
   850                           ;incstack = 0
   851  0007C2  ECA4  F003         	call	_dispatcher_start	;wreg free
   852                           
   853                           ;nojentOS.c: 26: do{ INTCONbits.GIE = 1; }while(0);
   854  0007C6  8EF2               	bsf	intcon,7,c	;volatile
   855  0007C8  0012               	return	
   856  0007CA                     __end_of_nojo_start:
   857                           	opt stack 0
   858                           tblptru	equ	0xFF8
   859                           prodh	equ	0xFF4
   860                           prodl	equ	0xFF3
   861                           intcon	equ	0xFF2
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           postdec1	equ	0xFE5
   865                           fsr1h	equ	0xFE2
   866                           fsr1l	equ	0xFE1
   867                           bsr	equ	0xFE0
   868                           indf2	equ	0xFDF
   869                           postinc2	equ	0xFDE
   870                           postdec2	equ	0xFDD
   871                           fsr2h	equ	0xFDA
   872                           fsr2l	equ	0xFD9
   873                           status	equ	0xFD8
   874                           
   875 ;; *************** function _dispatcher_start *****************
   876 ;; Defined at:
   877 ;;		line 35 in file "kernel/dispatcher.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;		None
   882 ;; Return value:  Size  Location     Type
   883 ;;                  1    wreg      void 
   884 ;; Registers used:
   885 ;;		wreg, status,2, status,0, cstack
   886 ;; Tracked objects:
   887 ;;		On entry : 0/0
   888 ;;		On exit  : 0/0
   889 ;;		Unchanged: 0/0
   890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   891 ;;      Params:         0       0       0       0       0       0       0
   892 ;;      Locals:         0       0       0       0       0       0       0
   893 ;;      Temps:          0       0       0       0       0       0       0
   894 ;;      Totals:         0       0       0       0       0       0       0
   895 ;;Total ram usage:        0 bytes
   896 ;; Hardware stack levels used:    1
   897 ;; Hardware stack levels required when called:    8
   898 ;; This function calls:
   899 ;;		_timer0_init
   900 ;; This function is called by:
   901 ;;		_nojo_start
   902 ;; This function uses a non-reentrant model
   903 ;;
   904                           
   905                           	psect	text5
   906  000748                     __ptext5:
   907                           	opt stack 0
   908  000748                     _dispatcher_start:
   909                           	opt stack 21
   910                           
   911                           ;dispatcher.c: 36: timer0_init( 10000, dispatcher_change_context_isr );
   912                           
   913                           ;incstack = 0
   914  000748  0E27               	movlw	39
   915  00074A  0100               	movlb	0	; () banked
   916  00074C  6FEF               	movwf	(timer0_init@delay_us+1)& (0+255),b
   917  00074E  0E10               	movlw	16
   918  000750  6FEE               	movwf	timer0_init@delay_us& (0+255),b
   919  000752  0EAA               	movlw	low _dispatcher_change_context_isr
   920  000754  0100               	movlb	0	; () banked
   921  000756  6FF0               	movwf	timer0_init@callback& (0+255),b
   922  000758  0E05               	movlw	high _dispatcher_change_context_isr
   923  00075A  0100               	movlb	0	; () banked
   924  00075C  6FF1               	movwf	(timer0_init@callback+1)& (0+255),b
   925  00075E  EC4F  F003         	call	_timer0_init	;wreg free
   926  000762  0012               	return		;funcret
   927  000764                     __end_of_dispatcher_start:
   928                           	opt stack 0
   929                           tblptru	equ	0xFF8
   930                           prodh	equ	0xFF4
   931                           prodl	equ	0xFF3
   932                           intcon	equ	0xFF2
   933                           postinc0	equ	0xFEE
   934                           wreg	equ	0xFE8
   935                           postdec1	equ	0xFE5
   936                           fsr1h	equ	0xFE2
   937                           fsr1l	equ	0xFE1
   938                           bsr	equ	0xFE0
   939                           indf2	equ	0xFDF
   940                           postinc2	equ	0xFDE
   941                           postdec2	equ	0xFDD
   942                           fsr2h	equ	0xFDA
   943                           fsr2l	equ	0xFD9
   944                           status	equ	0xFD8
   945                           
   946 ;; *************** function _timer0_init *****************
   947 ;; Defined at:
   948 ;;		line 15 in file "kernel/timers.c"
   949 ;; Parameters:    Size  Location     Type
   950 ;;  delay_us        2    6[BANK0 ] unsigned int 
   951 ;;  callback        2    8[BANK0 ] PTR FTN()void 
   952 ;;		 -> dispatcher_change_context_isr(1), 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;		None
   955 ;; Return value:  Size  Location     Type
   956 ;;                  1    wreg      void 
   957 ;; Registers used:
   958 ;;		wreg, status,2, status,0, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   964 ;;      Params:         0       4       0       0       0       0       0
   965 ;;      Locals:         0       0       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0
   967 ;;      Totals:         0       4       0       0       0       0       0
   968 ;;Total ram usage:        4 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    7
   971 ;; This function calls:
   972 ;;		_timer0_reset
   973 ;; This function is called by:
   974 ;;		_dispatcher_start
   975 ;; This function uses a non-reentrant model
   976 ;;
   977                           
   978                           	psect	text6
   979  00069E                     __ptext6:
   980                           	opt stack 0
   981  00069E                     _timer0_init:
   982                           	opt stack 21
   983                           
   984                           ;timers.c: 17: T0CONbits.TMR0ON = 0;
   985                           
   986                           ;incstack = 0
   987  00069E  9ED5               	bcf	4053,7,c	;volatile
   988                           
   989                           ;timers.c: 19: INTCONbits.TMR0IE = 0;
   990  0006A0  9AF2               	bcf	intcon,5,c	;volatile
   991                           
   992                           ;timers.c: 23: _timer0_delay_us = delay_us;
   993  0006A2  C0EE  F0F8         	movff	timer0_init@delay_us,__timer0_delay_us
   994  0006A6  C0EF  F0F9         	movff	timer0_init@delay_us+1,__timer0_delay_us+1
   995                           
   996                           ;timers.c: 25: _timer0_callback = callback;
   997  0006AA  C0F0  F042         	movff	timer0_init@callback,__timer0_callback
   998  0006AE  C0F1  F043         	movff	timer0_init@callback+1,__timer0_callback+1
   999                           
  1000                           ;timers.c: 28: T0CONbits.T08BIT = 0;
  1001  0006B2  9CD5               	bcf	4053,6,c	;volatile
  1002                           
  1003                           ;timers.c: 30: T0CONbits.T0CS = 0;
  1004  0006B4  9AD5               	bcf	4053,5,c	;volatile
  1005                           
  1006                           ;timers.c: 32: T0CONbits.T0SE = 0;
  1007  0006B6  98D5               	bcf	4053,4,c	;volatile
  1008                           
  1009                           ;timers.c: 34: T0CONbits.PSA = 1;
  1010  0006B8  86D5               	bsf	4053,3,c	;volatile
  1011                           
  1012                           ;timers.c: 36: T0CONbits.T0PS = 0b010;
  1013  0006BA  50D5               	movf	4053,w,c	;volatile
  1014  0006BC  0BF8               	andlw	-8
  1015  0006BE  0902               	iorlw	2
  1016  0006C0  6ED5               	movwf	4053,c	;volatile
  1017                           
  1018                           ;timers.c: 38: INTCONbits.TMR0IF = 0;
  1019  0006C2  94F2               	bcf	intcon,2,c	;volatile
  1020                           
  1021                           ;timers.c: 40: INTCON2bits.TMR0IP = 1;
  1022  0006C4  84F1               	bsf	intcon2,2,c	;volatile
  1023                           
  1024                           ;timers.c: 43: timer0_reset();
  1025  0006C6  ECD5  F003         	call	_timer0_reset	;wreg free
  1026                           
  1027                           ;timers.c: 46: INTCONbits.TMR0IE = 1;
  1028  0006CA  8AF2               	bsf	intcon,5,c	;volatile
  1029                           
  1030                           ;timers.c: 48: T0CONbits.TMR0ON = 1;
  1031  0006CC  8ED5               	bsf	4053,7,c	;volatile
  1032  0006CE  0012               	return		;funcret
  1033  0006D0                     __end_of_timer0_init:
  1034                           	opt stack 0
  1035                           tblptru	equ	0xFF8
  1036                           prodh	equ	0xFF4
  1037                           prodl	equ	0xFF3
  1038                           intcon	equ	0xFF2
  1039                           intcon2	equ	0xFF1
  1040                           postinc0	equ	0xFEE
  1041                           wreg	equ	0xFE8
  1042                           postdec1	equ	0xFE5
  1043                           fsr1h	equ	0xFE2
  1044                           fsr1l	equ	0xFE1
  1045                           bsr	equ	0xFE0
  1046                           indf2	equ	0xFDF
  1047                           postinc2	equ	0xFDE
  1048                           postdec2	equ	0xFDD
  1049                           fsr2h	equ	0xFDA
  1050                           fsr2l	equ	0xFD9
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _timer0_reset *****************
  1054 ;; Defined at:
  1055 ;;		line 8 in file "kernel/timers.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;		None
  1058 ;; Auto vars:     Size  Location     Type
  1059 ;;		None
  1060 ;; Return value:  Size  Location     Type
  1061 ;;                  1    wreg      void 
  1062 ;; Registers used:
  1063 ;;		None
  1064 ;; Tracked objects:
  1065 ;;		On entry : 0/0
  1066 ;;		On exit  : 0/0
  1067 ;;		Unchanged: 0/0
  1068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1069 ;;      Params:         0       0       0       0       0       0       0
  1070 ;;      Locals:         0       0       0       0       0       0       0
  1071 ;;      Temps:          0       0       0       0       0       0       0
  1072 ;;      Totals:         0       0       0       0       0       0       0
  1073 ;;Total ram usage:        0 bytes
  1074 ;; Hardware stack levels used:    1
  1075 ;; Hardware stack levels required when called:    6
  1076 ;; This function calls:
  1077 ;;		Nothing
  1078 ;; This function is called by:
  1079 ;;		_timer0_init
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text7
  1084  0007AA                     __ptext7:
  1085                           	opt stack 0
  1086  0007AA                     _timer0_reset:
  1087                           	opt stack 21
  1088                           
  1089                           ;timers.c: 10: INTCONbits.TMR0IF = 0;
  1090                           
  1091                           ;incstack = 0
  1092  0007AA  94F2               	bcf	intcon,2,c	;volatile
  1093                           
  1094                           ;timers.c: 12: TMR0 = _timer0_delay_us;
  1095  0007AC  C0F8  FFD6         	movff	__timer0_delay_us,4054	;volatile
  1096  0007B0  C0F9  FFD7         	movff	__timer0_delay_us+1,4055	;volatile
  1097  0007B4  0012               	return		;funcret
  1098  0007B6                     __end_of_timer0_reset:
  1099                           	opt stack 0
  1100                           tblptru	equ	0xFF8
  1101                           prodh	equ	0xFF4
  1102                           prodl	equ	0xFF3
  1103                           intcon	equ	0xFF2
  1104                           intcon2	equ	0xFF1
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1h	equ	0xFE2
  1109                           fsr1l	equ	0xFE1
  1110                           bsr	equ	0xFE0
  1111                           indf2	equ	0xFDF
  1112                           postinc2	equ	0xFDE
  1113                           postdec2	equ	0xFDD
  1114                           fsr2h	equ	0xFDA
  1115                           fsr2l	equ	0xFD9
  1116                           status	equ	0xFD8
  1117                           
  1118 ;; *************** function _nojo_init *****************
  1119 ;; Defined at:
  1120 ;;		line 15 in file "nojentOS.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      void 
  1127 ;; Registers used:
  1128 ;;		wreg, status,2, status,0, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1134 ;;      Params:         0       0       0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0       0       0
  1137 ;;      Totals:         0       0       0       0       0       0       0
  1138 ;;Total ram usage:        0 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    7
  1141 ;; This function calls:
  1142 ;;		_dispatcher_init
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text8
  1149  00079C                     __ptext8:
  1150                           	opt stack 0
  1151  00079C                     _nojo_init:
  1152                           	opt stack 23
  1153                           
  1154                           ;nojentOS.c: 17: OSCCONbits.IRCF = 0b111;
  1155                           
  1156                           ;incstack = 0
  1157  00079C  88D3               	bsf	4051,4,c	;volatile
  1158  00079E  8AD3               	bsf	4051,5,c	;volatile
  1159  0007A0  8CD3               	bsf	4051,6,c	;volatile
  1160                           
  1161                           ;nojentOS.c: 18: OSCTUNEbits.PLLEN = 0;
  1162  0007A2  9C9B               	bcf	3995,6,c	;volatile
  1163                           
  1164                           ;nojentOS.c: 20: dispatcher_init();
  1165  0007A4  ECF8  F002         	call	_dispatcher_init	;wreg free
  1166  0007A8  0012               	return		;funcret
  1167  0007AA                     __end_of_nojo_init:
  1168                           	opt stack 0
  1169                           tblptru	equ	0xFF8
  1170                           prodh	equ	0xFF4
  1171                           prodl	equ	0xFF3
  1172                           intcon	equ	0xFF2
  1173                           intcon2	equ	0xFF1
  1174                           postinc0	equ	0xFEE
  1175                           wreg	equ	0xFE8
  1176                           postdec1	equ	0xFE5
  1177                           fsr1h	equ	0xFE2
  1178                           fsr1l	equ	0xFE1
  1179                           bsr	equ	0xFE0
  1180                           indf2	equ	0xFDF
  1181                           postinc2	equ	0xFDE
  1182                           postdec2	equ	0xFDD
  1183                           fsr2h	equ	0xFDA
  1184                           fsr2l	equ	0xFD9
  1185                           status	equ	0xFD8
  1186                           
  1187 ;; *************** function _dispatcher_init *****************
  1188 ;; Defined at:
  1189 ;;		line 18 in file "kernel/dispatcher.c"
  1190 ;; Parameters:    Size  Location     Type
  1191 ;;		None
  1192 ;; Auto vars:     Size  Location     Type
  1193 ;;		None
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  1    wreg      void 
  1196 ;; Registers used:
  1197 ;;		wreg, status,2, status,0
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1203 ;;      Params:         0       0       0       0       0       0       0
  1204 ;;      Locals:         0       0       0       0       0       0       0
  1205 ;;      Temps:          0       0       0       0       0       0       0
  1206 ;;      Totals:         0       0       0       0       0       0       0
  1207 ;;Total ram usage:        0 bytes
  1208 ;; Hardware stack levels used:    1
  1209 ;; Hardware stack levels required when called:    6
  1210 ;; This function calls:
  1211 ;;		Nothing
  1212 ;; This function is called by:
  1213 ;;		_nojo_init
  1214 ;; This function uses a non-reentrant model
  1215 ;;
  1216                           
  1217                           	psect	text9
  1218  0005F0                     __ptext9:
  1219                           	opt stack 0
  1220  0005F0                     _dispatcher_init:
  1221                           	opt stack 23
  1222                           
  1223                           ;dispatcher.c: 19: dispatcher.size = 0;
  1224                           
  1225                           ;incstack = 0
  1226  0005F0  0E00               	movlw	0
  1227  0005F2  CFE8 F23E          	movff	wreg,_dispatcher+312
  1228                           
  1229                           ;dispatcher.c: 20: dispatcher.callback = scheduler_round_robin;
  1230  0005F6  0E5E               	movlw	low _scheduler_round_robin
  1231  0005F8  CFE8 F241          	movff	wreg,_dispatcher+315
  1232  0005FC  0E02               	movlw	high _scheduler_round_robin
  1233  0005FE  CFE8 F242          	movff	wreg,_dispatcher+316
  1234                           
  1235                           ;dispatcher.c: 22: idle.id = 255;
  1236  000602  0E00               	movlw	0
  1237  000604  0100               	movlb	0	; () banked
  1238  000606  6F81               	movwf	(_idle+1)& (0+255),b
  1239  000608  6980               	setf	_idle& (0+255),b
  1240                           
  1241                           ;dispatcher.c: 23: idle.priority = 0;
  1242  00060A  0E00               	movlw	0
  1243  00060C  0100               	movlb	0	; () banked
  1244  00060E  6F83               	movwf	(_idle+3)& (0+255),b
  1245  000610  0E00               	movlw	0
  1246  000612  6F82               	movwf	(_idle+2)& (0+255),b
  1247                           
  1248                           ;dispatcher.c: 24: idle.state = task_state_ready;
  1249  000614  0E00               	movlw	0
  1250  000616  0100               	movlb	0	; () banked
  1251  000618  6F84               	movwf	(_idle+4)& (0+255),b
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;dispatcher.c: 25: idle.callback = task_idle_callback;
  1255  00061A  0ECA               	movlw	low _task_idle_callback
  1256  00061C  0100               	movlb	0	; () banked
  1257  00061E  6F85               	movwf	(_idle+5)& (0+255),b
  1258  000620  0E07               	movlw	high _task_idle_callback
  1259  000622  0100               	movlb	0	; () banked
  1260  000624  6F86               	movwf	(_idle+6)& (0+255),b
  1261                           
  1262                           ; BSR set to: 0
  1263                           ;dispatcher.c: 32: dispatcher.running = &idle;
  1264  000626  0E80               	movlw	low _idle
  1265  000628  CFE8 F23F          	movff	wreg,_dispatcher+313
  1266  00062C  0E00               	movlw	high _idle
  1267  00062E  CFE8 F240          	movff	wreg,_dispatcher+314
  1268                           
  1269                           ; BSR set to: 0
  1270  000632  0012               	return		;funcret
  1271  000634                     __end_of_dispatcher_init:
  1272                           	opt stack 0
  1273                           tblptru	equ	0xFF8
  1274                           prodh	equ	0xFF4
  1275                           prodl	equ	0xFF3
  1276                           intcon	equ	0xFF2
  1277                           intcon2	equ	0xFF1
  1278                           postinc0	equ	0xFEE
  1279                           wreg	equ	0xFE8
  1280                           postdec1	equ	0xFE5
  1281                           fsr1h	equ	0xFE2
  1282                           fsr1l	equ	0xFE1
  1283                           bsr	equ	0xFE0
  1284                           indf2	equ	0xFDF
  1285                           postinc2	equ	0xFDE
  1286                           postdec2	equ	0xFDD
  1287                           fsr2h	equ	0xFDA
  1288                           fsr2l	equ	0xFD9
  1289                           status	equ	0xFD8
  1290                           
  1291 ;; *************** function _task_1 *****************
  1292 ;; Defined at:
  1293 ;;		line 14 in file "main.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;  i               2   60[COMRAM] unsigned int 
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2, status,0
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1307 ;;      Params:         0       0       0       0       0       0       0
  1308 ;;      Locals:         2       0       0       0       0       0       0
  1309 ;;      Temps:          1       0       0       0       0       0       0
  1310 ;;      Totals:         3       0       0       0       0       0       0
  1311 ;;Total ram usage:        3 bytes
  1312 ;; Hardware stack levels used:    1
  1313 ;; Hardware stack levels required when called:    5
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text10
  1322  000634                     __ptext10:
  1323                           	opt stack 0
  1324  000634                     _task_1:
  1325                           	opt stack 21
  1326                           
  1327                           ;main.c: 15: TRISDbits.RD0 = 0;
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;incstack = 0
  1331  000634  9095               	bcf	3989,0,c	;volatile
  1332                           
  1333                           ;main.c: 16: PORTDbits.RD0 = 0;
  1334  000636  9083               	bcf	3971,0,c	;volatile
  1335  000638                     l994:
  1336                           
  1337                           ;main.c: 18: PORTDbits.RD0 = !LATDbits.LATD0;
  1338  000638  B08C               	btfsc	3980,0,c	;volatile
  1339  00063A  D003               	goto	u16_20
  1340  00063C  6A3C               	clrf	??_task_1& (0+255),c
  1341  00063E  2A3C               	incf	??_task_1& (0+255),f,c
  1342  000640  D001               	goto	u17_28
  1343  000642                     u16_20:
  1344  000642  6A3C               	clrf	??_task_1& (0+255),c
  1345  000644                     u17_28:
  1346  000644  5083               	movf	3971,w,c	;volatile
  1347  000646  183C               	xorwf	??_task_1,w,c
  1348  000648  0BFE               	andlw	-2
  1349  00064A  183C               	xorwf	??_task_1,w,c
  1350  00064C  6E83               	movwf	3971,c	;volatile
  1351                           
  1352                           ;main.c: 19: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1353  00064E  0E00               	movlw	0
  1354  000650  6E3E               	movwf	task_1@i+1,c
  1355  000652  0E00               	movlw	0
  1356  000654  6E3D               	movwf	task_1@i,c
  1357  000656                     l998:
  1358  000656  0E60               	movlw	96
  1359  000658  5C3D               	subwf	task_1@i,w,c
  1360  00065A  0EEA               	movlw	234
  1361  00065C  583E               	subwfb	task_1@i+1,w,c
  1362  00065E  B0D8               	btfsc	status,0,c
  1363  000660  D7EB               	goto	l994
  1364  000662  F000               	nop	
  1365  000664  4A3D               	infsnz	task_1@i,f,c
  1366  000666  2A3E               	incf	task_1@i+1,f,c
  1367  000668  D7F6               	goto	l998
  1368  00066A                     __end_of_task_1:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           prodh	equ	0xFF4
  1372                           prodl	equ	0xFF3
  1373                           intcon	equ	0xFF2
  1374                           intcon2	equ	0xFF1
  1375                           postinc0	equ	0xFEE
  1376                           wreg	equ	0xFE8
  1377                           postdec1	equ	0xFE5
  1378                           fsr1h	equ	0xFE2
  1379                           fsr1l	equ	0xFE1
  1380                           bsr	equ	0xFE0
  1381                           indf2	equ	0xFDF
  1382                           postinc2	equ	0xFDE
  1383                           postdec2	equ	0xFDD
  1384                           fsr2h	equ	0xFDA
  1385                           fsr2l	equ	0xFD9
  1386                           status	equ	0xFD8
  1387                           
  1388 ;; *************** function _task_2 *****************
  1389 ;; Defined at:
  1390 ;;		line 23 in file "main.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;		None
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  i               2    1[BANK0 ] unsigned int 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1404 ;;      Params:         0       0       0       0       0       0       0
  1405 ;;      Locals:         0       2       0       0       0       0       0
  1406 ;;      Temps:          0       1       0       0       0       0       0
  1407 ;;      Totals:         0       3       0       0       0       0       0
  1408 ;;Total ram usage:        3 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    5
  1411 ;; This function calls:
  1412 ;;		Nothing
  1413 ;; This function is called by:
  1414 ;;		_main
  1415 ;; This function uses a non-reentrant model
  1416 ;;
  1417                           
  1418                           	psect	text11
  1419  000562                     __ptext11:
  1420                           	opt stack 0
  1421  000562                     _task_2:
  1422                           	opt stack 21
  1423                           
  1424                           ;main.c: 24: TRISDbits.RD1 = 0;
  1425                           
  1426                           ;incstack = 0
  1427  000562  9295               	bcf	3989,1,c	;volatile
  1428                           
  1429                           ;main.c: 25: PORTDbits.RD1 = 0;
  1430  000564  9283               	bcf	3971,1,c	;volatile
  1431  000566                     l1436:
  1432                           
  1433                           ;main.c: 27: PORTDbits.RD1 = !LATDbits.LATD1;
  1434  000566  B28C               	btfsc	3980,1,c	;volatile
  1435  000568  D004               	goto	u65_20
  1436  00056A  0100               	movlb	0	; () banked
  1437  00056C  6BE8               	clrf	??_task_2& (0+255),b
  1438  00056E  2BE8               	incf	??_task_2& (0+255),f,b
  1439  000570  D002               	goto	u66_28
  1440  000572                     u65_20:
  1441  000572  0100               	movlb	0	; () banked
  1442  000574  6BE8               	clrf	??_task_2& (0+255),b
  1443  000576                     u66_28:
  1444  000576  0100               	movlb	0	; () banked
  1445  000578  47E8               	rlncf	??_task_2& (0+255),f,b
  1446  00057A  5083               	movf	3971,w,c	;volatile
  1447  00057C  0100               	movlb	0	; () banked
  1448  00057E  19E8               	xorwf	??_task_2& (0+255),w,b
  1449  000580  0BFD               	andlw	-3
  1450  000582  19E8               	xorwf	??_task_2& (0+255),w,b
  1451  000584  6E83               	movwf	3971,c	;volatile
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 28: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1455  000586  0E00               	movlw	0
  1456  000588  0100               	movlb	0	; () banked
  1457  00058A  6FEA               	movwf	(task_2@i+1)& (0+255),b
  1458  00058C  0E00               	movlw	0
  1459  00058E  6FE9               	movwf	task_2@i& (0+255),b
  1460  000590                     l1440:
  1461                           
  1462                           ; BSR set to: 0
  1463  000590  0E60               	movlw	96
  1464  000592  0100               	movlb	0	; () banked
  1465  000594  5DE9               	subwf	task_2@i& (0+255),w,b
  1466  000596  0EEA               	movlw	234
  1467  000598  0100               	movlb	0	; () banked
  1468  00059A  59EA               	subwfb	(task_2@i+1)& (0+255),w,b
  1469  00059C  B0D8               	btfsc	status,0,c
  1470  00059E  D7E3               	goto	l1436
  1471                           
  1472                           ; BSR set to: 0
  1473                           
  1474                           ; BSR set to: 0
  1475  0005A0  F000               	nop	
  1476  0005A2  0100               	movlb	0	; () banked
  1477  0005A4  4BE9               	infsnz	task_2@i& (0+255),f,b
  1478  0005A6  2BEA               	incf	(task_2@i+1)& (0+255),f,b
  1479  0005A8  D7F3               	goto	l1440
  1480  0005AA                     __end_of_task_2:
  1481                           	opt stack 0
  1482                           tblptru	equ	0xFF8
  1483                           prodh	equ	0xFF4
  1484                           prodl	equ	0xFF3
  1485                           intcon	equ	0xFF2
  1486                           intcon2	equ	0xFF1
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1h	equ	0xFE2
  1491                           fsr1l	equ	0xFE1
  1492                           bsr	equ	0xFE0
  1493                           indf2	equ	0xFDF
  1494                           postinc2	equ	0xFDE
  1495                           postdec2	equ	0xFDD
  1496                           fsr2h	equ	0xFDA
  1497                           fsr2l	equ	0xFD9
  1498                           status	equ	0xFD8
  1499                           
  1500 ;; *************** function _task_3 *****************
  1501 ;; Defined at:
  1502 ;;		line 32 in file "main.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;		None
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  i               2    4[BANK0 ] unsigned int 
  1507 ;; Return value:  Size  Location     Type
  1508 ;;                  1    wreg      void 
  1509 ;; Registers used:
  1510 ;;		wreg, status,2, status,0
  1511 ;; Tracked objects:
  1512 ;;		On entry : 0/0
  1513 ;;		On exit  : 0/0
  1514 ;;		Unchanged: 0/0
  1515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1516 ;;      Params:         0       0       0       0       0       0       0
  1517 ;;      Locals:         0       2       0       0       0       0       0
  1518 ;;      Temps:          0       1       0       0       0       0       0
  1519 ;;      Totals:         0       3       0       0       0       0       0
  1520 ;;Total ram usage:        3 bytes
  1521 ;; Hardware stack levels used:    1
  1522 ;; Hardware stack levels required when called:    5
  1523 ;; This function calls:
  1524 ;;		Nothing
  1525 ;; This function is called by:
  1526 ;;		_main
  1527 ;; This function uses a non-reentrant model
  1528 ;;
  1529                           
  1530                           	psect	text12
  1531  000518                     __ptext12:
  1532                           	opt stack 0
  1533  000518                     _task_3:
  1534                           	opt stack 21
  1535                           
  1536                           ;main.c: 33: TRISDbits.RD2 = 0;
  1537                           
  1538                           ; BSR set to: 0
  1539                           ;incstack = 0
  1540  000518  9495               	bcf	3989,2,c	;volatile
  1541                           
  1542                           ;main.c: 34: PORTDbits.RD2 = 0;
  1543  00051A  9483               	bcf	3971,2,c	;volatile
  1544  00051C                     l1290:
  1545                           
  1546                           ;main.c: 36: PORTDbits.RD2 = !LATDbits.LATD2;
  1547  00051C  B48C               	btfsc	3980,2,c	;volatile
  1548  00051E  D004               	goto	u54_20
  1549  000520  0100               	movlb	0	; () banked
  1550  000522  6BEB               	clrf	??_task_3& (0+255),b
  1551  000524  2BEB               	incf	??_task_3& (0+255),f,b
  1552  000526  D002               	goto	u55_28
  1553  000528                     u54_20:
  1554  000528  0100               	movlb	0	; () banked
  1555  00052A  6BEB               	clrf	??_task_3& (0+255),b
  1556  00052C                     u55_28:
  1557  00052C  0100               	movlb	0	; () banked
  1558  00052E  47EB               	rlncf	??_task_3& (0+255),f,b
  1559  000530  47EB               	rlncf	??_task_3& (0+255),f,b
  1560  000532  5083               	movf	3971,w,c	;volatile
  1561  000534  0100               	movlb	0	; () banked
  1562  000536  19EB               	xorwf	??_task_3& (0+255),w,b
  1563  000538  0BFB               	andlw	-5
  1564  00053A  19EB               	xorwf	??_task_3& (0+255),w,b
  1565  00053C  6E83               	movwf	3971,c	;volatile
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;main.c: 37: for( uint16_t i = 0; i < 60000; i++ ) { __nop(); }
  1569  00053E  0E00               	movlw	0
  1570  000540  0100               	movlb	0	; () banked
  1571  000542  6FED               	movwf	(task_3@i+1)& (0+255),b
  1572  000544  0E00               	movlw	0
  1573  000546  6FEC               	movwf	task_3@i& (0+255),b
  1574  000548                     l1294:
  1575                           
  1576                           ; BSR set to: 0
  1577  000548  0E60               	movlw	96
  1578  00054A  0100               	movlb	0	; () banked
  1579  00054C  5DEC               	subwf	task_3@i& (0+255),w,b
  1580  00054E  0EEA               	movlw	234
  1581  000550  0100               	movlb	0	; () banked
  1582  000552  59ED               	subwfb	(task_3@i+1)& (0+255),w,b
  1583  000554  B0D8               	btfsc	status,0,c
  1584  000556  D7E2               	goto	l1290
  1585                           
  1586                           ; BSR set to: 0
  1587                           
  1588                           ; BSR set to: 0
  1589  000558  F000               	nop	
  1590  00055A  0100               	movlb	0	; () banked
  1591  00055C  4BEC               	infsnz	task_3@i& (0+255),f,b
  1592  00055E  2BED               	incf	(task_3@i+1)& (0+255),f,b
  1593  000560  D7F3               	goto	l1294
  1594  000562                     __end_of_task_3:
  1595                           	opt stack 0
  1596                           tblptru	equ	0xFF8
  1597                           prodh	equ	0xFF4
  1598                           prodl	equ	0xFF3
  1599                           intcon	equ	0xFF2
  1600                           intcon2	equ	0xFF1
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1h	equ	0xFE2
  1605                           fsr1l	equ	0xFE1
  1606                           bsr	equ	0xFE0
  1607                           indf2	equ	0xFDF
  1608                           postinc2	equ	0xFDE
  1609                           postdec2	equ	0xFDD
  1610                           fsr2h	equ	0xFDA
  1611                           fsr2l	equ	0xFD9
  1612                           status	equ	0xFD8
  1613                           
  1614 ;; *************** function _task_idle_callback *****************
  1615 ;; Defined at:
  1616 ;;		line 12 in file "kernel/dispatcher.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;		None
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		None
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1630 ;;      Params:         0       0       0       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0       0       0
  1633 ;;      Totals:         0       0       0       0       0       0       0
  1634 ;;Total ram usage:        0 bytes
  1635 ;; Hardware stack levels used:    1
  1636 ;; Hardware stack levels required when called:    5
  1637 ;; This function calls:
  1638 ;;		Nothing
  1639 ;; This function is called by:
  1640 ;;		_dispatcher_init
  1641 ;; This function uses a non-reentrant model
  1642 ;;
  1643                           
  1644                           	psect	text13
  1645  0007CA                     __ptext13:
  1646                           	opt stack 0
  1647  0007CA                     _task_idle_callback:
  1648                           	opt stack 21
  1649  0007CA                     l141:
  1650  0007CA  F000               	nop		;# 
  1651  0007CC  D7FE               	goto	l141
  1652  0007CE                     __end_of_task_idle_callback:
  1653                           	opt stack 0
  1654                           tblptru	equ	0xFF8
  1655                           prodh	equ	0xFF4
  1656                           prodl	equ	0xFF3
  1657                           intcon	equ	0xFF2
  1658                           intcon2	equ	0xFF1
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postdec1	equ	0xFE5
  1662                           fsr1h	equ	0xFE2
  1663                           fsr1l	equ	0xFE1
  1664                           bsr	equ	0xFE0
  1665                           indf2	equ	0xFDF
  1666                           postinc2	equ	0xFDE
  1667                           postdec2	equ	0xFDD
  1668                           fsr2h	equ	0xFDA
  1669                           fsr2l	equ	0xFD9
  1670                           status	equ	0xFD8
  1671                           
  1672 ;; *************** function _global_isr *****************
  1673 ;; Defined at:
  1674 ;;		line 21 in file "kernel/interrutps.h"
  1675 ;; Parameters:    Size  Location     Type
  1676 ;;		None
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;  i               1   52[COMRAM] unsigned char 
  1679 ;;  i               1   45[COMRAM] unsigned char 
  1680 ;;  n_context       2   57[COMRAM] PTR struct task_context_
  1681 ;;		 -> dispatcher.context(97), idle.context(97), idle(104), dispatcher(317), 
  1682 ;;  n_stack         2   55[COMRAM] PTR struct task_context_
  1683 ;;		 -> dispatcher.stack(94), idle.stack(94), dispatcher.context.stack(94), idle.context.stack(94), 
  1684 ;;		 -> global_isr@n_context(2), 
  1685 ;;  n_task          2   48[COMRAM] PTR struct task_s
  1686 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  1687 ;;  p_context       2   53[COMRAM] PTR struct task_context_
  1688 ;;		 -> dispatcher.context(97), idle.context(97), idle(104), dispatcher(317), 
  1689 ;;  p_stack         2   50[COMRAM] PTR struct task_context_
  1690 ;;		 -> dispatcher.stack(94), idle.stack(94), dispatcher.context.stack(94), idle.context.stack(94), 
  1691 ;;		 -> global_isr@p_context(2), 
  1692 ;;  p_task          2   46[COMRAM] PTR struct task_s
  1693 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  1    wreg      void 
  1696 ;; Registers used:
  1697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1703 ;;      Params:         0       0       0       0       0       0       0
  1704 ;;      Locals:        14       0       0       0       0       0       0
  1705 ;;      Temps:         21       0       0       0       0       0       0
  1706 ;;      Totals:        35       0       0       0       0       0       0
  1707 ;;Total ram usage:       35 bytes
  1708 ;; Hardware stack levels used:    1
  1709 ;; Hardware stack levels required when called:    4
  1710 ;; This function calls:
  1711 ;;		_timer0_isr
  1712 ;; This function is called by:
  1713 ;;		Interrupt level 2
  1714 ;; This function uses a non-reentrant model
  1715 ;;
  1716                           
  1717                           	psect	intcode
  1718  000008                     __pintcode:
  1719                           	opt stack 0
  1720  000008                     _global_isr:
  1721                           	opt stack 21
  1722                           
  1723                           ;incstack = 0
  1724  000008  8244               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1725  00000A  CFFA F020          	movff	pclath,??_global_isr+7
  1726  00000E  CFFB F021          	movff	pclatu,??_global_isr+8
  1727  000012  ED0D  F000         	call	int_func,f	;refresh shadow registers
  1728                           pclatu	equ	0xFFB
  1729                           pclath	equ	0xFFA
  1730                           tblptru	equ	0xFF8
  1731                           prodh	equ	0xFF4
  1732                           prodl	equ	0xFF3
  1733                           intcon	equ	0xFF2
  1734                           intcon2	equ	0xFF1
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1h	equ	0xFE2
  1739                           fsr1l	equ	0xFE1
  1740                           bsr	equ	0xFE0
  1741                           indf2	equ	0xFDF
  1742                           postinc2	equ	0xFDE
  1743                           postdec2	equ	0xFDD
  1744                           fsr2h	equ	0xFDA
  1745                           fsr2l	equ	0xFD9
  1746                           status	equ	0xFD8
  1747                           
  1748                           	psect	intcode_body
  1749  00001A                     __pintcode_body:
  1750                           	opt stack 21
  1751  00001A                     int_func:
  1752                           	opt stack 21
  1753  00001A  0006               	pop		; remove dummy address from shadow register refresh
  1754  00001C  CFE9 F022          	movff	fsr0l,??_global_isr+9
  1755  000020  CFEA F023          	movff	fsr0h,??_global_isr+10
  1756  000024  CFE1 F024          	movff	fsr1l,??_global_isr+11
  1757  000028  CFE2 F025          	movff	fsr1h,??_global_isr+12
  1758  00002C  CFD9 F026          	movff	fsr2l,??_global_isr+13
  1759  000030  CFDA F027          	movff	fsr2h,??_global_isr+14
  1760  000034  CFF3 F028          	movff	prodl,??_global_isr+15
  1761  000038  CFF4 F029          	movff	prodh,??_global_isr+16
  1762  00003C  CFF6 F02A          	movff	tblptrl,??_global_isr+17
  1763  000040  CFF7 F02B          	movff	tblptrh,??_global_isr+18
  1764  000044  CFF8 F02C          	movff	tblptru,??_global_isr+19
  1765  000048  CFF5 F02D          	movff	tablat,??_global_isr+20
  1766                           
  1767                           ;interrutps.h: 22: _WREG = WREG;
  1768  00004C  6E41               	movwf	__WREG,c
  1769                           
  1770                           ;interrutps.h: 23: _BSR = BSR;
  1771  00004E  CFE0 F03F          	movff	bsr,__BSR	;volatile
  1772                           
  1773                           ;interrutps.h: 24: _STATUS = STATUS;
  1774  000052  CFD8 F040          	movff	status,__STATUS	;volatile
  1775                           
  1776                           ;interrutps.h: 26: if( INTCONbits.TMR0IE && INTCONbits.TMR0IF ) {
  1777  000056  BAF2               	btfsc	intcon,5,c	;volatile
  1778  000058  A4F2               	btfss	intcon,2,c	;volatile
  1779  00005A  D0DE               	goto	i2l103
  1780                           
  1781                           ;interrutps.h: 29: task_t* p_task = (dispatcher.running);
  1782                           
  1783                           ;interrutps.h: 28: do {
  1784  00005C  C23F  F02F         	movff	_dispatcher+313,global_isr@p_task
  1785  000060  C240  F030         	movff	_dispatcher+314,global_isr@p_task+1
  1786                           
  1787                           ;interrutps.h: 30: if( p_task == ((void*)0) ) { break; }
  1788  000064  502F               	movf	global_isr@p_task,w,c
  1789  000066  1030               	iorwf	global_isr@p_task+1,w,c
  1790  000068  B4D8               	btfsc	status,2,c
  1791  00006A  D05C               	goto	i2l1338
  1792                           
  1793                           ;interrutps.h: 31: task_context_t* p_context = &(p_task->context);
  1794  00006C  0E07               	movlw	7
  1795  00006E  242F               	addwf	global_isr@p_task,w,c
  1796  000070  6E36               	movwf	global_isr@p_context,c
  1797  000072  0E00               	movlw	0
  1798  000074  2030               	addwfc	global_isr@p_task+1,w,c
  1799  000076  6E37               	movwf	global_isr@p_context+1,c
  1800                           
  1801                           ;interrutps.h: 32: p_context->work = _WREG;
  1802  000078  C036  FFD9         	movff	global_isr@p_context,fsr2l
  1803  00007C  C037  FFDA         	movff	global_isr@p_context+1,fsr2h
  1804  000080  C041  FFDF         	movff	__WREG,indf2
  1805                           
  1806                           ;interrutps.h: 33: p_context->bsr = _BSR;
  1807  000084  EE20 F001          	lfsr	2,1
  1808  000088  5036               	movf	global_isr@p_context,w,c
  1809  00008A  26D9               	addwf	fsr2l,f,c
  1810  00008C  5037               	movf	global_isr@p_context+1,w,c
  1811  00008E  22DA               	addwfc	fsr2h,f,c
  1812  000090  C03F  FFDF         	movff	__BSR,indf2
  1813                           
  1814                           ;interrutps.h: 34: p_context->status = _STATUS;
  1815  000094  EE20 F002          	lfsr	2,2
  1816  000098  5036               	movf	global_isr@p_context,w,c
  1817  00009A  26D9               	addwf	fsr2l,f,c
  1818  00009C  5037               	movf	global_isr@p_context+1,w,c
  1819  00009E  22DA               	addwfc	fsr2h,f,c
  1820  0000A0  C040  FFDF         	movff	__STATUS,indf2
  1821                           
  1822                           ;interrutps.h: 35: task_context_stack_t* p_stack = &p_context->stack;
  1823  0000A4  0E03               	movlw	3
  1824  0000A6  2436               	addwf	global_isr@p_context,w,c
  1825  0000A8  6E33               	movwf	global_isr@p_stack,c
  1826  0000AA  0E00               	movlw	0
  1827  0000AC  2037               	addwfc	global_isr@p_context+1,w,c
  1828  0000AE  6E34               	movwf	global_isr@p_stack+1,c
  1829                           
  1830                           ;interrutps.h: 36: while( (STKPTR & 0b11111) > 0 ) {
  1831  0000B0  D033               	goto	i2l1336
  1832  0000B2                     i2l1332:
  1833                           
  1834                           ;interrutps.h: 37: uint8_t i = p_stack->size++;
  1835  0000B2  EE20 F05D          	lfsr	2,93
  1836  0000B6  5033               	movf	global_isr@p_stack,w,c
  1837  0000B8  26D9               	addwf	fsr2l,f,c
  1838  0000BA  5034               	movf	global_isr@p_stack+1,w,c
  1839  0000BC  22DA               	addwfc	fsr2h,f,c
  1840  0000BE  50DF               	movf	indf2,w,c
  1841  0000C0  6E2E               	movwf	global_isr@i,c
  1842  0000C2  EE20 F05D          	lfsr	2,93
  1843  0000C6  5033               	movf	global_isr@p_stack,w,c
  1844  0000C8  26D9               	addwf	fsr2l,f,c
  1845  0000CA  5034               	movf	global_isr@p_stack+1,w,c
  1846  0000CC  22DA               	addwfc	fsr2h,f,c
  1847  0000CE  2ADF               	incf	indf2,f,c
  1848                           
  1849                           ;interrutps.h: 38: p_stack->values[i] = (TOSU << 16) | (TOSH << 8) | TOSL;
  1850  0000D0  50FE               	movf	tosh,w,c	;volatile
  1851  0000D2  6E1A               	movwf	(??_global_isr+1)& (0+255),c
  1852  0000D4  6A19               	clrf	??_global_isr& (0+255),c
  1853  0000D6  50FF               	movf	tosu,w,c	;volatile
  1854  0000D8  6E1B               	movwf	(??_global_isr+2)& (0+255),c
  1855  0000DA  6A1C               	clrf	(??_global_isr+3)& (0+255),c
  1856  0000DC  5019               	movf	??_global_isr,w,c
  1857  0000DE  121B               	iorwf	??_global_isr+2,f,c
  1858  0000E0  501A               	movf	??_global_isr+1,w,c
  1859  0000E2  121C               	iorwf	??_global_isr+3,f,c
  1860  0000E4  50FD               	movf	tosl,w,c	;volatile
  1861  0000E6  121B               	iorwf	??_global_isr+2,f,c
  1862  0000E8  0E00               	movlw	0
  1863  0000EA  121C               	iorwf	??_global_isr+3,f,c
  1864  0000EC  C01B  F01D         	movff	??_global_isr+2,??_global_isr+4
  1865  0000F0  C01C  F01E         	movff	??_global_isr+3,??_global_isr+5
  1866  0000F4  6A1F               	clrf	(??_global_isr+6)& (0+255),c
  1867  0000F6  BE1E               	btfsc	(??_global_isr+5)& (0+255),7,c
  1868  0000F8  681F               	setf	(??_global_isr+6)& (0+255),c
  1869  0000FA  502E               	movf	global_isr@i,w,c
  1870  0000FC  0D03               	mullw	3
  1871  0000FE  50F3               	movf	prodl,w,c
  1872  000100  2433               	addwf	global_isr@p_stack,w,c
  1873  000102  6ED9               	movwf	fsr2l,c
  1874  000104  50F4               	movf	prodh,w,c
  1875  000106  2034               	addwfc	global_isr@p_stack+1,w,c
  1876  000108  6EDA               	movwf	fsr2h,c
  1877  00010A  C01D  FFDE         	movff	??_global_isr+4,postinc2
  1878  00010E  C01E  FFDE         	movff	??_global_isr+5,postinc2
  1879  000112  C01F  FFDE         	movff	??_global_isr+6,postinc2
  1880  000116  0006               	pop		;# 
  1881  000118                     i2l1336:
  1882  000118  CFFC F019          	movff	stkptr,??_global_isr	;volatile
  1883  00011C  0E1F               	movlw	31
  1884  00011E  1619               	andwf	??_global_isr,f,c
  1885  000120  A4D8               	btfss	status,2,c
  1886  000122  D7C7               	goto	i2l1332
  1887  000124                     i2l1338:
  1888                           
  1889                           ;interrutps.h: 40: }
  1890                           ;interrutps.h: 41: }while(0);
  1891                           ;interrutps.h: 43: timer0_isr();
  1892  000124  EC92  F003         	call	_timer0_isr	;wreg free
  1893                           
  1894                           ;interrutps.h: 46: task_t* n_task = (dispatcher.running);
  1895                           
  1896                           ;interrutps.h: 45: do {
  1897  000128  C23F  F031         	movff	_dispatcher+313,global_isr@n_task
  1898  00012C  C240  F032         	movff	_dispatcher+314,global_isr@n_task+1
  1899                           
  1900                           ;interrutps.h: 47: if( n_task == ((void*)0) ) { break; }
  1901  000130  5031               	movf	global_isr@n_task,w,c
  1902  000132  1032               	iorwf	global_isr@n_task+1,w,c
  1903  000134  B4D8               	btfsc	status,2,c
  1904  000136  D070               	goto	i2l103
  1905                           
  1906                           ;interrutps.h: 48: task_context_t* n_context = &(n_task->context);
  1907  000138  0E07               	movlw	7
  1908  00013A  2431               	addwf	global_isr@n_task,w,c
  1909  00013C  6E3A               	movwf	global_isr@n_context,c
  1910  00013E  0E00               	movlw	0
  1911  000140  2032               	addwfc	global_isr@n_task+1,w,c
  1912  000142  6E3B               	movwf	global_isr@n_context+1,c
  1913                           
  1914                           ;interrutps.h: 49: _WREG = n_context->work;
  1915  000144  C03A  FFD9         	movff	global_isr@n_context,fsr2l
  1916  000148  C03B  FFDA         	movff	global_isr@n_context+1,fsr2h
  1917  00014C  50DF               	movf	indf2,w,c
  1918  00014E  6E41               	movwf	__WREG,c
  1919                           
  1920                           ;interrutps.h: 50: _BSR = n_context->bsr;
  1921  000150  EE20 F001          	lfsr	2,1
  1922  000154  503A               	movf	global_isr@n_context,w,c
  1923  000156  26D9               	addwf	fsr2l,f,c
  1924  000158  503B               	movf	global_isr@n_context+1,w,c
  1925  00015A  22DA               	addwfc	fsr2h,f,c
  1926  00015C  50DF               	movf	indf2,w,c
  1927  00015E  6E3F               	movwf	__BSR,c
  1928                           
  1929                           ;interrutps.h: 51: _STATUS = n_context->status;
  1930  000160  EE20 F002          	lfsr	2,2
  1931  000164  503A               	movf	global_isr@n_context,w,c
  1932  000166  26D9               	addwf	fsr2l,f,c
  1933  000168  503B               	movf	global_isr@n_context+1,w,c
  1934  00016A  22DA               	addwfc	fsr2h,f,c
  1935  00016C  50DF               	movf	indf2,w,c
  1936  00016E  6E40               	movwf	__STATUS,c
  1937                           
  1938                           ;interrutps.h: 52: task_context_stack_t* n_stack = &n_context->stack;
  1939  000170  0E03               	movlw	3
  1940  000172  243A               	addwf	global_isr@n_context,w,c
  1941  000174  6E38               	movwf	global_isr@n_stack,c
  1942  000176  0E00               	movlw	0
  1943  000178  203B               	addwfc	global_isr@n_context+1,w,c
  1944  00017A  6E39               	movwf	global_isr@n_stack+1,c
  1945                           
  1946                           ;interrutps.h: 53: while( n_stack->size > 0 ) {
  1947  00017C  D044               	goto	i2l1364
  1948  00017E                     i2l1356:
  1949                           
  1950                           ;interrutps.h: 54: uint8_t i = --n_stack->size;
  1951  00017E  EE20 F05D          	lfsr	2,93
  1952  000182  5038               	movf	global_isr@n_stack,w,c
  1953  000184  26D9               	addwf	fsr2l,f,c
  1954  000186  5039               	movf	global_isr@n_stack+1,w,c
  1955  000188  22DA               	addwfc	fsr2h,f,c
  1956  00018A  06DF               	decf	indf2,f,c
  1957  00018C  50DF               	movf	indf2,w,c
  1958  00018E  6E35               	movwf	global_isr@i_581,c
  1959  000190  0005               	push		;# 
  1960                           
  1961                           ;interrutps.h: 56: TOSU = n_stack->values[i] >> 16;
  1962  000192  0E10               	movlw	16
  1963  000194  6E19               	movwf	??_global_isr& (0+255),c
  1964  000196  5035               	movf	global_isr@i_581,w,c
  1965  000198  0D03               	mullw	3
  1966  00019A  50F3               	movf	prodl,w,c
  1967  00019C  2438               	addwf	global_isr@n_stack,w,c
  1968  00019E  6ED9               	movwf	fsr2l,c
  1969  0001A0  50F4               	movf	prodh,w,c
  1970  0001A2  2039               	addwfc	global_isr@n_stack+1,w,c
  1971  0001A4  6EDA               	movwf	fsr2h,c
  1972  0001A6  CFDE F01A          	movff	postinc2,??_global_isr+1
  1973  0001AA  CFDE F01B          	movff	postinc2,??_global_isr+2
  1974  0001AE  CFDE F01C          	movff	postinc2,??_global_isr+3
  1975  0001B2  2819               	incf	??_global_isr,w,c
  1976  0001B4  6E1D               	movwf	(??_global_isr+4)& (0+255),c
  1977  0001B6  D004               	goto	i2u63_40
  1978  0001B8                     i2u63_45:
  1979  0001B8  90D8               	bcf	status,0,c
  1980  0001BA  321C               	rrcf	??_global_isr+3,f,c
  1981  0001BC  321B               	rrcf	??_global_isr+2,f,c
  1982  0001BE  321A               	rrcf	??_global_isr+1,f,c
  1983  0001C0                     i2u63_40:
  1984  0001C0  2E1D               	decfsz	(??_global_isr+4)& (0+255),f,c
  1985  0001C2  D7FA               	goto	i2u63_45
  1986  0001C4  501A               	movf	??_global_isr+1,w,c
  1987  0001C6  6EFF               	movwf	tosu,c	;volatile
  1988                           
  1989                           ;interrutps.h: 57: TOSH = n_stack->values[i] >> 8;
  1990  0001C8  5035               	movf	global_isr@i_581,w,c
  1991  0001CA  0D03               	mullw	3
  1992  0001CC  50F3               	movf	prodl,w,c
  1993  0001CE  2438               	addwf	global_isr@n_stack,w,c
  1994  0001D0  6ED9               	movwf	fsr2l,c
  1995  0001D2  50F4               	movf	prodh,w,c
  1996  0001D4  2039               	addwfc	global_isr@n_stack+1,w,c
  1997  0001D6  6EDA               	movwf	fsr2h,c
  1998  0001D8  CFDE F019          	movff	postinc2,??_global_isr
  1999  0001DC  CFDE F01A          	movff	postinc2,??_global_isr+1
  2000  0001E0  CFDE F01B          	movff	postinc2,??_global_isr+2
  2001  0001E4  C01A  F019         	movff	??_global_isr+1,??_global_isr
  2002  0001E8  C01B  F01A         	movff	??_global_isr+2,??_global_isr+1
  2003  0001EC  6A1B               	clrf	??_global_isr+2,c
  2004  0001EE  5019               	movf	??_global_isr,w,c
  2005  0001F0  6EFE               	movwf	tosh,c	;volatile
  2006                           
  2007                           ;interrutps.h: 58: TOSL = n_stack->values[i] >> 0;
  2008  0001F2  5035               	movf	global_isr@i_581,w,c
  2009  0001F4  0D03               	mullw	3
  2010  0001F6  50F3               	movf	prodl,w,c
  2011  0001F8  2438               	addwf	global_isr@n_stack,w,c
  2012  0001FA  6ED9               	movwf	fsr2l,c
  2013  0001FC  50F4               	movf	prodh,w,c
  2014  0001FE  2039               	addwfc	global_isr@n_stack+1,w,c
  2015  000200  6EDA               	movwf	fsr2h,c
  2016  000202  50DF               	movf	indf2,w,c
  2017  000204  6EFD               	movwf	tosl,c	;volatile
  2018  000206                     i2l1364:
  2019  000206  EE20 F05D          	lfsr	2,93
  2020  00020A  5038               	movf	global_isr@n_stack,w,c
  2021  00020C  26D9               	addwf	fsr2l,f,c
  2022  00020E  5039               	movf	global_isr@n_stack+1,w,c
  2023  000210  22DA               	addwfc	fsr2h,f,c
  2024  000212  50DF               	movf	indf2,w,c
  2025  000214  A4D8               	btfss	status,2,c
  2026  000216  D7B3               	goto	i2l1356
  2027  000218                     i2l103:
  2028                           
  2029                           ;interrutps.h: 61: }
  2030                           ;interrutps.h: 62: } while(0);
  2031                           ;interrutps.h: 63: }
  2032                           ;interrutps.h: 64: BSR = _BSR;
  2033  000218  C03F  FFE0         	movff	__BSR,bsr	;volatile
  2034                           
  2035                           ;interrutps.h: 65: STATUS = _STATUS;
  2036  00021C  C040  FFD8         	movff	__STATUS,status	;volatile
  2037                           
  2038                           ;interrutps.h: 66: WREG = _WREG;
  2039  000220  5041               	movf	__WREG,w,c
  2040  000222  C02D  FFF5         	movff	??_global_isr+20,tablat
  2041  000226  C02C  FFF8         	movff	??_global_isr+19,tblptru
  2042  00022A  C02B  FFF7         	movff	??_global_isr+18,tblptrh
  2043  00022E  C02A  FFF6         	movff	??_global_isr+17,tblptrl
  2044  000232  C029  FFF4         	movff	??_global_isr+16,prodh
  2045  000236  C028  FFF3         	movff	??_global_isr+15,prodl
  2046  00023A  C027  FFDA         	movff	??_global_isr+14,fsr2h
  2047  00023E  C026  FFD9         	movff	??_global_isr+13,fsr2l
  2048  000242  C025  FFE2         	movff	??_global_isr+12,fsr1h
  2049  000246  C024  FFE1         	movff	??_global_isr+11,fsr1l
  2050  00024A  C023  FFEA         	movff	??_global_isr+10,fsr0h
  2051  00024E  C022  FFE9         	movff	??_global_isr+9,fsr0l
  2052  000252  C021  FFFB         	movff	??_global_isr+8,pclatu
  2053  000256  C020  FFFA         	movff	??_global_isr+7,pclath
  2054  00025A  9244               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2055  00025C  0011               	retfie		f
  2056  00025E                     __end_of_global_isr:
  2057                           	opt stack 0
  2058                           tosu	equ	0xFFF
  2059                           tosh	equ	0xFFE
  2060                           tosl	equ	0xFFD
  2061                           stkptr	equ	0xFFC
  2062                           pclatu	equ	0xFFB
  2063                           pclath	equ	0xFFA
  2064                           tblptru	equ	0xFF8
  2065                           tblptrh	equ	0xFF7
  2066                           tblptrl	equ	0xFF6
  2067                           tablat	equ	0xFF5
  2068                           prodh	equ	0xFF4
  2069                           prodl	equ	0xFF3
  2070                           intcon	equ	0xFF2
  2071                           intcon2	equ	0xFF1
  2072                           postinc0	equ	0xFEE
  2073                           fsr0h	equ	0xFEA
  2074                           fsr0l	equ	0xFE9
  2075                           wreg	equ	0xFE8
  2076                           postdec1	equ	0xFE5
  2077                           fsr1h	equ	0xFE2
  2078                           fsr1l	equ	0xFE1
  2079                           bsr	equ	0xFE0
  2080                           indf2	equ	0xFDF
  2081                           postinc2	equ	0xFDE
  2082                           postdec2	equ	0xFDD
  2083                           fsr2h	equ	0xFDA
  2084                           fsr2l	equ	0xFD9
  2085                           status	equ	0xFD8
  2086                           
  2087 ;; *************** function _timer0_isr *****************
  2088 ;; Defined at:
  2089 ;;		line 51 in file "kernel/timers.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2103 ;;      Params:         0       0       0       0       0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0
  2105 ;;      Temps:          0       0       0       0       0       0       0
  2106 ;;      Totals:         0       0       0       0       0       0       0
  2107 ;;Total ram usage:        0 bytes
  2108 ;; Hardware stack levels used:    1
  2109 ;; Hardware stack levels required when called:    3
  2110 ;; This function calls:
  2111 ;;		Absolute function
  2112 ;;		_dispatcher_change_context_isr
  2113 ;;		i2_timer0_reset
  2114 ;; This function is called by:
  2115 ;;		_global_isr
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text15
  2120  000724                     __ptext15:
  2121                           	opt stack 0
  2122  000724                     _timer0_isr:
  2123                           	opt stack 21
  2124                           
  2125                           ;timers.c: 52: timer0_reset();
  2126                           
  2127                           ;incstack = 0
  2128  000724  ECDB  F003         	call	i2_timer0_reset	;wreg free
  2129                           
  2130                           ;timers.c: 54: if( _timer0_callback ) {
  2131  000728  5042               	movf	__timer0_callback,w,c
  2132  00072A  1043               	iorwf	__timer0_callback+1,w,c
  2133  00072C  B4D8               	btfsc	status,2,c
  2134  00072E  0012               	return	
  2135                           
  2136                           ;timers.c: 55: _timer0_callback();
  2137  000730  D801               	call	i2u49_48
  2138  000732  0012               	return	
  2139  000734                     i2u49_48:
  2140  000734  0005               	push	
  2141  000736  6EFA               	movwf	pclath,c
  2142  000738  5042               	movf	__timer0_callback,w,c
  2143  00073A  6EFD               	movwf	tosl,c
  2144  00073C  5043               	movf	__timer0_callback+1,w,c
  2145  00073E  6EFE               	movwf	tosh,c
  2146  000740  50F8               	movf	tblptru,w,c
  2147  000742  6EFF               	movwf	tosu,c
  2148  000744  50FA               	movf	pclath,w,c
  2149  000746  0012               	return		;indir
  2150  000748                     __end_of_timer0_isr:
  2151                           	opt stack 0
  2152                           tosu	equ	0xFFF
  2153                           tosh	equ	0xFFE
  2154                           tosl	equ	0xFFD
  2155                           stkptr	equ	0xFFC
  2156                           pclatu	equ	0xFFB
  2157                           pclath	equ	0xFFA
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           prodh	equ	0xFF4
  2163                           prodl	equ	0xFF3
  2164                           intcon	equ	0xFF2
  2165                           intcon2	equ	0xFF1
  2166                           postinc0	equ	0xFEE
  2167                           fsr0h	equ	0xFEA
  2168                           fsr0l	equ	0xFE9
  2169                           wreg	equ	0xFE8
  2170                           postdec1	equ	0xFE5
  2171                           fsr1h	equ	0xFE2
  2172                           fsr1l	equ	0xFE1
  2173                           bsr	equ	0xFE0
  2174                           indf2	equ	0xFDF
  2175                           postinc2	equ	0xFDE
  2176                           postdec2	equ	0xFDD
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function i2_timer0_reset *****************
  2182 ;; Defined at:
  2183 ;;		line 8 in file "kernel/timers.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;		None
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;		None
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		None
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2197 ;;      Params:         0       0       0       0       0       0       0
  2198 ;;      Locals:         0       0       0       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0       0       0
  2200 ;;      Totals:         0       0       0       0       0       0       0
  2201 ;;Total ram usage:        0 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_timer0_isr
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           	psect	text16
  2211  0007B6                     __ptext16:
  2212                           	opt stack 0
  2213  0007B6                     i2_timer0_reset:
  2214                           	opt stack 23
  2215                           
  2216                           ;timers.c: 10: INTCONbits.TMR0IF = 0;
  2217                           
  2218                           ;incstack = 0
  2219  0007B6  94F2               	bcf	intcon,2,c	;volatile
  2220                           
  2221                           ;timers.c: 12: TMR0 = _timer0_delay_us;
  2222  0007B8  C0F8  FFD6         	movff	__timer0_delay_us,4054	;volatile
  2223  0007BC  C0F9  FFD7         	movff	__timer0_delay_us+1,4055	;volatile
  2224  0007C0  0012               	return		;funcret
  2225  0007C2                     __end_ofi2_timer0_reset:
  2226                           	opt stack 0
  2227                           tosu	equ	0xFFF
  2228                           tosh	equ	0xFFE
  2229                           tosl	equ	0xFFD
  2230                           stkptr	equ	0xFFC
  2231                           pclatu	equ	0xFFB
  2232                           pclath	equ	0xFFA
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           prodh	equ	0xFF4
  2238                           prodl	equ	0xFF3
  2239                           intcon	equ	0xFF2
  2240                           intcon2	equ	0xFF1
  2241                           postinc0	equ	0xFEE
  2242                           fsr0h	equ	0xFEA
  2243                           fsr0l	equ	0xFE9
  2244                           wreg	equ	0xFE8
  2245                           postdec1	equ	0xFE5
  2246                           fsr1h	equ	0xFE2
  2247                           fsr1l	equ	0xFE1
  2248                           bsr	equ	0xFE0
  2249                           indf2	equ	0xFDF
  2250                           postinc2	equ	0xFDE
  2251                           postdec2	equ	0xFDD
  2252                           fsr2h	equ	0xFDA
  2253                           fsr2l	equ	0xFD9
  2254                           status	equ	0xFD8
  2255                           
  2256 ;; *************** function _dispatcher_change_context_isr *****************
  2257 ;; Defined at:
  2258 ;;		line 48 in file "kernel/dispatcher.c"
  2259 ;; Parameters:    Size  Location     Type
  2260 ;;		None
  2261 ;; Auto vars:     Size  Location     Type
  2262 ;;  next            2   22[COMRAM] PTR struct task_s
  2263 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2264 ;; Return value:  Size  Location     Type
  2265 ;;                  1    wreg      void 
  2266 ;; Registers used:
  2267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclat, tosl, prodl, prodh, cstack
  2268 ;; Tracked objects:
  2269 ;;		On entry : 0/0
  2270 ;;		On exit  : 0/0
  2271 ;;		Unchanged: 0/0
  2272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2273 ;;      Params:         0       0       0       0       0       0       0
  2274 ;;      Locals:         2       0       0       0       0       0       0
  2275 ;;      Temps:          0       0       0       0       0       0       0
  2276 ;;      Totals:         2       0       0       0       0       0       0
  2277 ;;Total ram usage:        2 bytes
  2278 ;; Hardware stack levels used:    1
  2279 ;; Hardware stack levels required when called:    2
  2280 ;; This function calls:
  2281 ;;		_scheduler_round_robin
  2282 ;;		_task_running
  2283 ;;		i2_task_ready
  2284 ;; This function is called by:
  2285 ;;		_dispatcher_start
  2286 ;;		_timer0_isr
  2287 ;; This function uses a non-reentrant model
  2288 ;;
  2289                           
  2290                           	psect	text17
  2291  0005AA                     __ptext17:
  2292                           	opt stack 0
  2293  0005AA                     _dispatcher_change_context_isr:
  2294                           	opt stack 21
  2295                           
  2296                           ;dispatcher.c: 50: task_t* next = dispatcher.callback();
  2297                           
  2298                           ;incstack = 0
  2299  0005AA  EE22  F041         	lfsr	2,_dispatcher+315
  2300  0005AE  D801               	call	i2u47_48
  2301  0005B0  D00A               	goto	i2u47_49
  2302  0005B2                     i2u47_48:
  2303  0005B2  0005               	push	
  2304  0005B4  6EFA               	movwf	pclath,c
  2305  0005B6  50DE               	movf	postinc2,w,c
  2306  0005B8  6EFD               	movwf	tosl,c
  2307  0005BA  50DE               	movf	postinc2,w,c
  2308  0005BC  6EFE               	movwf	tosh,c
  2309  0005BE  50F8               	movf	tblptru,w,c
  2310  0005C0  6EFF               	movwf	tosu,c
  2311  0005C2  50FA               	movf	pclath,w,c
  2312  0005C4  0012               	return		;indir
  2313  0005C6                     i2u47_49:
  2314  0005C6  C007  F017         	movff	?_scheduler_round_robin,dispatcher_change_context_isr@next
  2315  0005CA  C008  F018         	movff	?_scheduler_round_robin+1,dispatcher_change_context_isr@next+1
  2316                           
  2317                           ;dispatcher.c: 52: task_ready( dispatcher.running );
  2318  0005CE  C23F  F001         	movff	_dispatcher+313,i2task_ready@handle
  2319  0005D2  C240  F002         	movff	_dispatcher+314,i2task_ready@handle+1
  2320  0005D6  ECBC  F003         	call	i2_task_ready	;wreg free
  2321                           
  2322                           ;dispatcher.c: 54: dispatcher.running = next;
  2323  0005DA  C017  F23F         	movff	dispatcher_change_context_isr@next,_dispatcher+313
  2324  0005DE  C018  F240         	movff	dispatcher_change_context_isr@next+1,_dispatcher+314
  2325                           
  2326                           ;dispatcher.c: 56: task_running( dispatcher.running );
  2327  0005E2  C23F  F001         	movff	_dispatcher+313,task_running@handle
  2328  0005E6  C240  F002         	movff	_dispatcher+314,task_running@handle+1
  2329  0005EA  ECC5  F003         	call	_task_running	;wreg free
  2330  0005EE  0012               	return		;funcret
  2331  0005F0                     __end_of_dispatcher_change_context_isr:
  2332                           	opt stack 0
  2333                           tosu	equ	0xFFF
  2334                           tosh	equ	0xFFE
  2335                           tosl	equ	0xFFD
  2336                           stkptr	equ	0xFFC
  2337                           pclatu	equ	0xFFB
  2338                           pclath	equ	0xFFA
  2339                           tblptru	equ	0xFF8
  2340                           tblptrh	equ	0xFF7
  2341                           tblptrl	equ	0xFF6
  2342                           tablat	equ	0xFF5
  2343                           prodh	equ	0xFF4
  2344                           prodl	equ	0xFF3
  2345                           intcon	equ	0xFF2
  2346                           intcon2	equ	0xFF1
  2347                           postinc0	equ	0xFEE
  2348                           fsr0h	equ	0xFEA
  2349                           fsr0l	equ	0xFE9
  2350                           wreg	equ	0xFE8
  2351                           postdec1	equ	0xFE5
  2352                           fsr1h	equ	0xFE2
  2353                           fsr1l	equ	0xFE1
  2354                           bsr	equ	0xFE0
  2355                           indf2	equ	0xFDF
  2356                           postinc2	equ	0xFDE
  2357                           postdec2	equ	0xFDD
  2358                           fsr2h	equ	0xFDA
  2359                           fsr2l	equ	0xFD9
  2360                           status	equ	0xFD8
  2361                           
  2362 ;; *************** function i2_task_ready *****************
  2363 ;; Defined at:
  2364 ;;		line 24 in file "kernel/task.c"
  2365 ;; Parameters:    Size  Location     Type
  2366 ;;  handle          2    0[COMRAM] PTR struct task_s
  2367 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2368 ;; Auto vars:     Size  Location     Type
  2369 ;;		None
  2370 ;; Return value:  Size  Location     Type
  2371 ;;                  1    wreg      void 
  2372 ;; Registers used:
  2373 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2374 ;; Tracked objects:
  2375 ;;		On entry : 0/0
  2376 ;;		On exit  : 0/0
  2377 ;;		Unchanged: 0/0
  2378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2379 ;;      Params:         2       0       0       0       0       0       0
  2380 ;;      Locals:         0       0       0       0       0       0       0
  2381 ;;      Temps:          0       0       0       0       0       0       0
  2382 ;;      Totals:         2       0       0       0       0       0       0
  2383 ;;Total ram usage:        2 bytes
  2384 ;; Hardware stack levels used:    1
  2385 ;; This function calls:
  2386 ;;		Nothing
  2387 ;; This function is called by:
  2388 ;;		_dispatcher_change_context_isr
  2389 ;; This function uses a non-reentrant model
  2390 ;;
  2391                           
  2392                           	psect	text18
  2393  000778                     __ptext18:
  2394                           	opt stack 0
  2395  000778                     i2_task_ready:
  2396                           	opt stack 22
  2397                           
  2398                           ;task.c: 25: handle->state = task_state_ready;
  2399                           
  2400                           ;incstack = 0
  2401  000778  EE20 F004          	lfsr	2,4
  2402  00077C  5001               	movf	i2task_ready@handle,w,c
  2403  00077E  26D9               	addwf	fsr2l,f,c
  2404  000780  5002               	movf	i2task_ready@handle+1,w,c
  2405  000782  22DA               	addwfc	fsr2h,f,c
  2406  000784  0E00               	movlw	0
  2407  000786  6EDF               	movwf	indf2,c
  2408  000788  0012               	return		;funcret
  2409  00078A                     __end_ofi2_task_ready:
  2410                           	opt stack 0
  2411                           tosu	equ	0xFFF
  2412                           tosh	equ	0xFFE
  2413                           tosl	equ	0xFFD
  2414                           stkptr	equ	0xFFC
  2415                           pclatu	equ	0xFFB
  2416                           pclath	equ	0xFFA
  2417                           tblptru	equ	0xFF8
  2418                           tblptrh	equ	0xFF7
  2419                           tblptrl	equ	0xFF6
  2420                           tablat	equ	0xFF5
  2421                           prodh	equ	0xFF4
  2422                           prodl	equ	0xFF3
  2423                           intcon	equ	0xFF2
  2424                           intcon2	equ	0xFF1
  2425                           postinc0	equ	0xFEE
  2426                           fsr0h	equ	0xFEA
  2427                           fsr0l	equ	0xFE9
  2428                           wreg	equ	0xFE8
  2429                           postdec1	equ	0xFE5
  2430                           fsr1h	equ	0xFE2
  2431                           fsr1l	equ	0xFE1
  2432                           bsr	equ	0xFE0
  2433                           indf2	equ	0xFDF
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _task_running *****************
  2441 ;; Defined at:
  2442 ;;		line 28 in file "kernel/task.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  handle          2    0[COMRAM] PTR struct task_s
  2445 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;		None
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2457 ;;      Params:         2       0       0       0       0       0       0
  2458 ;;      Locals:         0       0       0       0       0       0       0
  2459 ;;      Temps:          0       0       0       0       0       0       0
  2460 ;;      Totals:         2       0       0       0       0       0       0
  2461 ;;Total ram usage:        2 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_dispatcher_change_context_isr
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text19
  2471  00078A                     __ptext19:
  2472                           	opt stack 0
  2473  00078A                     _task_running:
  2474                           	opt stack 22
  2475                           
  2476                           ;task.c: 29: handle->state = task_state_running;
  2477                           
  2478                           ;incstack = 0
  2479  00078A  EE20 F004          	lfsr	2,4
  2480  00078E  5001               	movf	task_running@handle,w,c
  2481  000790  26D9               	addwf	fsr2l,f,c
  2482  000792  5002               	movf	task_running@handle+1,w,c
  2483  000794  22DA               	addwfc	fsr2h,f,c
  2484  000796  0E01               	movlw	1
  2485  000798  6EDF               	movwf	indf2,c
  2486  00079A  0012               	return		;funcret
  2487  00079C                     __end_of_task_running:
  2488                           	opt stack 0
  2489                           tosu	equ	0xFFF
  2490                           tosh	equ	0xFFE
  2491                           tosl	equ	0xFFD
  2492                           stkptr	equ	0xFFC
  2493                           pclatu	equ	0xFFB
  2494                           pclath	equ	0xFFA
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           intcon	equ	0xFF2
  2502                           intcon2	equ	0xFF1
  2503                           postinc0	equ	0xFEE
  2504                           fsr0h	equ	0xFEA
  2505                           fsr0l	equ	0xFE9
  2506                           wreg	equ	0xFE8
  2507                           postdec1	equ	0xFE5
  2508                           fsr1h	equ	0xFE2
  2509                           fsr1l	equ	0xFE1
  2510                           bsr	equ	0xFE0
  2511                           indf2	equ	0xFDF
  2512                           postinc2	equ	0xFDE
  2513                           postdec2	equ	0xFDD
  2514                           fsr2h	equ	0xFDA
  2515                           fsr2l	equ	0xFD9
  2516                           status	equ	0xFD8
  2517                           
  2518 ;; *************** function _scheduler_round_robin *****************
  2519 ;; Defined at:
  2520 ;;		line 18 in file "kernel/scheduler.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;		None
  2523 ;; Auto vars:     Size  Location     Type
  2524 ;;  j               2   16[COMRAM] int 
  2525 ;;  i               2   18[COMRAM] int 
  2526 ;;  i               2   20[COMRAM] int 
  2527 ;;  next            2   14[COMRAM] PTR struct task_s
  2528 ;;		 -> dispatcher.tasks(312), idle(104), dispatcher(317), 
  2529 ;;  offset          2   12[COMRAM] int 
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  2    6[COMRAM] PTR struct task_s
  2532 ;; Registers used:
  2533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2539 ;;      Params:         2       0       0       0       0       0       0
  2540 ;;      Locals:        10       0       0       0       0       0       0
  2541 ;;      Temps:          4       0       0       0       0       0       0
  2542 ;;      Totals:        16       0       0       0       0       0       0
  2543 ;;Total ram usage:       16 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    1
  2546 ;; This function calls:
  2547 ;;		___awmod
  2548 ;;		___wmul
  2549 ;; This function is called by:
  2550 ;;		_dispatcher_init
  2551 ;;		_dispatcher_change_context_isr
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text20
  2556  00025E                     __ptext20:
  2557                           	opt stack 0
  2558  00025E                     _scheduler_round_robin:
  2559                           	opt stack 21
  2560                           
  2561                           ;scheduler.c: 19: int offset = -1;
  2562                           
  2563                           ;incstack = 0
  2564  00025E  680D               	setf	scheduler_round_robin@offset,c
  2565  000260  680E               	setf	scheduler_round_robin@offset+1,c
  2566                           
  2567                           ;scheduler.c: 20: for( int i = 0; i < 3; i++ ) {
  2568  000262  0E00               	movlw	0
  2569  000264  6E16               	movwf	scheduler_round_robin@i+1,c
  2570  000266  0E00               	movlw	0
  2571  000268  6E15               	movwf	scheduler_round_robin@i,c
  2572  00026A                     i2l1174:
  2573  00026A  BE16               	btfsc	scheduler_round_robin@i+1,7,c
  2574  00026C  D006               	goto	i2l1178
  2575  00026E  5016               	movf	scheduler_round_robin@i+1,w,c
  2576  000270  E127               	bnz	i2l1186
  2577  000272  0E03               	movlw	3
  2578  000274  5C15               	subwf	scheduler_round_robin@i,w,c
  2579  000276  B0D8               	btfsc	status,0,c
  2580  000278  D023               	goto	i2l1186
  2581  00027A                     i2l1178:
  2582                           
  2583                           ;scheduler.c: 21: if( (&dispatcher.tasks[i]) == dispatcher.running ) {
  2584  00027A  EE22  F03F         	lfsr	2,_dispatcher+313
  2585  00027E  C015  F001         	movff	scheduler_round_robin@i,___wmul@multiplier
  2586  000282  C016  F002         	movff	scheduler_round_robin@i+1,___wmul@multiplier+1
  2587  000286  0E00               	movlw	0
  2588  000288  6E04               	movwf	___wmul@multiplicand+1,c
  2589  00028A  0E68               	movlw	104
  2590  00028C  6E03               	movwf	___wmul@multiplicand,c
  2591  00028E  EC7F  F003         	call	___wmul	;wreg free
  2592  000292  0E06               	movlw	low _dispatcher
  2593  000294  6E0B               	movwf	(??_scheduler_round_robin+2)& (0+255),c
  2594  000296  0E01               	movlw	high _dispatcher
  2595  000298  6E0C               	movwf	(??_scheduler_round_robin+3)& (0+255),c
  2596  00029A  5001               	movf	?___wmul,w,c
  2597  00029C  260B               	addwf	??_scheduler_round_robin+2,f,c
  2598  00029E  5002               	movf	?___wmul+1,w,c
  2599  0002A0  220C               	addwfc	??_scheduler_round_robin+3,f,c
  2600  0002A2  50DE               	movf	postinc2,w,c
  2601  0002A4  180B               	xorwf	??_scheduler_round_robin+2,w,c
  2602  0002A6  E109               	bnz	i2l1182
  2603  0002A8  50DE               	movf	postinc2,w,c
  2604  0002AA  180C               	xorwf	??_scheduler_round_robin+3,w,c
  2605  0002AC  A4D8               	btfss	status,2,c
  2606  0002AE  D005               	goto	i2l1182
  2607                           
  2608                           ;scheduler.c: 22: offset = i;
  2609  0002B0  C015  F00D         	movff	scheduler_round_robin@i,scheduler_round_robin@offset
  2610  0002B4  C016  F00E         	movff	scheduler_round_robin@i+1,scheduler_round_robin@offset+1
  2611                           
  2612                           ;scheduler.c: 23: break;
  2613  0002B8  D003               	goto	i2l1186
  2614  0002BA                     i2l1182:
  2615  0002BA  4A15               	infsnz	scheduler_round_robin@i,f,c
  2616  0002BC  2A16               	incf	scheduler_round_robin@i+1,f,c
  2617  0002BE  D7D5               	goto	i2l1174
  2618  0002C0                     i2l1186:
  2619                           
  2620                           ;scheduler.c: 24: }
  2621                           ;scheduler.c: 25: }
  2622                           ;scheduler.c: 29: task_t* next = &idle;
  2623  0002C0  0E80               	movlw	low _idle
  2624  0002C2  6E0F               	movwf	scheduler_round_robin@next,c
  2625  0002C4  0E00               	movlw	high _idle
  2626  0002C6  6E10               	movwf	scheduler_round_robin@next+1,c
  2627                           
  2628                           ;scheduler.c: 30: for( int i = 0; i < 3; i++ ) {
  2629  0002C8  0E00               	movlw	0
  2630  0002CA  6E14               	movwf	scheduler_round_robin@i_743+1,c
  2631  0002CC  0E00               	movlw	0
  2632  0002CE  6E13               	movwf	scheduler_round_robin@i_743,c
  2633  0002D0                     i2l1190:
  2634  0002D0  BE14               	btfsc	scheduler_round_robin@i_743+1,7,c
  2635  0002D2  D006               	goto	i2l1194
  2636  0002D4  5014               	movf	scheduler_round_robin@i_743+1,w,c
  2637  0002D6  E145               	bnz	i2l1204
  2638  0002D8  0E03               	movlw	3
  2639  0002DA  5C13               	subwf	scheduler_round_robin@i_743,w,c
  2640  0002DC  B0D8               	btfsc	status,0,c
  2641  0002DE  D041               	goto	i2l1204
  2642  0002E0                     i2l1194:
  2643                           
  2644                           ;scheduler.c: 33: int j = (offset+1+i) % 3;
  2645  0002E0  5013               	movf	scheduler_round_robin@i_743,w,c
  2646  0002E2  240D               	addwf	scheduler_round_robin@offset,w,c
  2647  0002E4  6E09               	movwf	??_scheduler_round_robin& (0+255),c
  2648  0002E6  5014               	movf	scheduler_round_robin@i_743+1,w,c
  2649  0002E8  200E               	addwfc	scheduler_round_robin@offset+1,w,c
  2650  0002EA  6E0A               	movwf	(??_scheduler_round_robin+1)& (0+255),c
  2651  0002EC  0E01               	movlw	1
  2652  0002EE  2409               	addwf	??_scheduler_round_robin,w,c
  2653  0002F0  6E01               	movwf	___awmod@dividend,c
  2654  0002F2  0E00               	movlw	0
  2655  0002F4  200A               	addwfc	??_scheduler_round_robin+1,w,c
  2656  0002F6  6E02               	movwf	___awmod@dividend+1,c
  2657  0002F8  0E00               	movlw	0
  2658  0002FA  6E04               	movwf	___awmod@divisor+1,c
  2659  0002FC  0E03               	movlw	3
  2660  0002FE  6E03               	movwf	___awmod@divisor,c
  2661  000300  EC54  F002         	call	___awmod	;wreg free
  2662  000304  C001  F011         	movff	?___awmod,scheduler_round_robin@j
  2663  000308  C002  F012         	movff	?___awmod+1,scheduler_round_robin@j+1
  2664                           
  2665                           ;scheduler.c: 34: if( dispatcher.tasks[j].state == task_state_ready ) {
  2666  00030C  C011  F001         	movff	scheduler_round_robin@j,___wmul@multiplier
  2667  000310  C012  F002         	movff	scheduler_round_robin@j+1,___wmul@multiplier+1
  2668  000314  0E00               	movlw	0
  2669  000316  6E04               	movwf	___wmul@multiplicand+1,c
  2670  000318  0E68               	movlw	104
  2671  00031A  6E03               	movwf	___wmul@multiplicand,c
  2672  00031C  EC7F  F003         	call	___wmul	;wreg free
  2673  000320  0E04               	movlw	4
  2674  000322  2601               	addwf	?___wmul,f,c
  2675  000324  0E00               	movlw	0
  2676  000326  2202               	addwfc	?___wmul+1,f,c
  2677  000328  0E06               	movlw	low _dispatcher
  2678  00032A  2401               	addwf	?___wmul,w,c
  2679  00032C  6ED9               	movwf	fsr2l,c
  2680  00032E  0E01               	movlw	high _dispatcher
  2681  000330  2002               	addwfc	?___wmul+1,w,c
  2682  000332  6EDA               	movwf	fsr2h,c
  2683  000334  50DF               	movf	indf2,w,c
  2684  000336  A4D8               	btfss	status,2,c
  2685  000338  D011               	goto	i2l1200
  2686                           
  2687                           ;scheduler.c: 35: next = &dispatcher.tasks[j];
  2688  00033A  C011  F001         	movff	scheduler_round_robin@j,___wmul@multiplier
  2689  00033E  C012  F002         	movff	scheduler_round_robin@j+1,___wmul@multiplier+1
  2690  000342  0E00               	movlw	0
  2691  000344  6E04               	movwf	___wmul@multiplicand+1,c
  2692  000346  0E68               	movlw	104
  2693  000348  6E03               	movwf	___wmul@multiplicand,c
  2694  00034A  EC7F  F003         	call	___wmul	;wreg free
  2695  00034E  0E06               	movlw	low _dispatcher
  2696  000350  2401               	addwf	?___wmul,w,c
  2697  000352  6E0F               	movwf	scheduler_round_robin@next,c
  2698  000354  0E01               	movlw	high _dispatcher
  2699  000356  2002               	addwfc	?___wmul+1,w,c
  2700  000358  6E10               	movwf	scheduler_round_robin@next+1,c
  2701                           
  2702                           ;scheduler.c: 36: break;
  2703  00035A  D003               	goto	i2l1204
  2704  00035C                     i2l1200:
  2705  00035C  4A13               	infsnz	scheduler_round_robin@i_743,f,c
  2706  00035E  2A14               	incf	scheduler_round_robin@i_743+1,f,c
  2707  000360  D7B7               	goto	i2l1190
  2708  000362                     i2l1204:
  2709                           
  2710                           ;scheduler.c: 37: }
  2711                           ;scheduler.c: 38: }
  2712                           ;scheduler.c: 40: return next;
  2713  000362  C00F  F007         	movff	scheduler_round_robin@next,?_scheduler_round_robin
  2714  000366  C010  F008         	movff	scheduler_round_robin@next+1,?_scheduler_round_robin+1
  2715  00036A  0012               	return	
  2716  00036C                     __end_of_scheduler_round_robin:
  2717                           	opt stack 0
  2718                           tosu	equ	0xFFF
  2719                           tosh	equ	0xFFE
  2720                           tosl	equ	0xFFD
  2721                           stkptr	equ	0xFFC
  2722                           pclatu	equ	0xFFB
  2723                           pclath	equ	0xFFA
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           prodh	equ	0xFF4
  2729                           prodl	equ	0xFF3
  2730                           intcon	equ	0xFF2
  2731                           intcon2	equ	0xFF1
  2732                           postinc0	equ	0xFEE
  2733                           fsr0h	equ	0xFEA
  2734                           fsr0l	equ	0xFE9
  2735                           wreg	equ	0xFE8
  2736                           postdec1	equ	0xFE5
  2737                           fsr1h	equ	0xFE2
  2738                           fsr1l	equ	0xFE1
  2739                           bsr	equ	0xFE0
  2740                           indf2	equ	0xFDF
  2741                           postinc2	equ	0xFDE
  2742                           postdec2	equ	0xFDD
  2743                           fsr2h	equ	0xFDA
  2744                           fsr2l	equ	0xFD9
  2745                           status	equ	0xFD8
  2746                           
  2747 ;; *************** function ___wmul *****************
  2748 ;; Defined at:
  2749 ;;		line 15 in file "/home/bruno/Programs/microchip/xc8/v1.37/sources/common/Umul16.c"
  2750 ;; Parameters:    Size  Location     Type
  2751 ;;  multiplier      2    0[COMRAM] unsigned int 
  2752 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2753 ;; Auto vars:     Size  Location     Type
  2754 ;;  product         2    4[COMRAM] unsigned int 
  2755 ;; Return value:  Size  Location     Type
  2756 ;;                  2    0[COMRAM] unsigned int 
  2757 ;; Registers used:
  2758 ;;		wreg, status,2, status,0, prodl, prodh
  2759 ;; Tracked objects:
  2760 ;;		On entry : 0/0
  2761 ;;		On exit  : 0/0
  2762 ;;		Unchanged: 0/0
  2763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2764 ;;      Params:         4       0       0       0       0       0       0
  2765 ;;      Locals:         2       0       0       0       0       0       0
  2766 ;;      Temps:          0       0       0       0       0       0       0
  2767 ;;      Totals:         6       0       0       0       0       0       0
  2768 ;;Total ram usage:        6 bytes
  2769 ;; Hardware stack levels used:    1
  2770 ;; This function calls:
  2771 ;;		Nothing
  2772 ;; This function is called by:
  2773 ;;		_scheduler_round_robin
  2774 ;; This function uses a non-reentrant model
  2775 ;;
  2776                           
  2777                           	psect	text21
  2778  0006FE                     __ptext21:
  2779                           	opt stack 0
  2780  0006FE                     ___wmul:
  2781                           	opt stack 21
  2782                           
  2783                           ;incstack = 0
  2784  0006FE  5001               	movf	___wmul@multiplier,w,c
  2785  000700  0203               	mulwf	___wmul@multiplicand,c
  2786  000702  CFF3 F005          	movff	prodl,___wmul@product
  2787  000706  CFF4 F006          	movff	prodh,___wmul@product+1
  2788  00070A  5001               	movf	___wmul@multiplier,w,c
  2789  00070C  0204               	mulwf	___wmul@multiplicand+1,c
  2790  00070E  50F3               	movf	prodl,w,c
  2791  000710  2606               	addwf	___wmul@product+1,f,c
  2792  000712  5002               	movf	___wmul@multiplier+1,w,c
  2793  000714  0203               	mulwf	___wmul@multiplicand,c
  2794  000716  50F3               	movf	prodl,w,c
  2795  000718  2606               	addwf	___wmul@product+1,f,c
  2796  00071A  C005  F001         	movff	___wmul@product,?___wmul
  2797  00071E  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2798  000722  0012               	return	
  2799  000724                     __end_of___wmul:
  2800                           	opt stack 0
  2801                           tosu	equ	0xFFF
  2802                           tosh	equ	0xFFE
  2803                           tosl	equ	0xFFD
  2804                           stkptr	equ	0xFFC
  2805                           pclatu	equ	0xFFB
  2806                           pclath	equ	0xFFA
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           prodh	equ	0xFF4
  2812                           prodl	equ	0xFF3
  2813                           intcon	equ	0xFF2
  2814                           intcon2	equ	0xFF1
  2815                           postinc0	equ	0xFEE
  2816                           fsr0h	equ	0xFEA
  2817                           fsr0l	equ	0xFE9
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1h	equ	0xFE2
  2821                           fsr1l	equ	0xFE1
  2822                           bsr	equ	0xFE0
  2823                           indf2	equ	0xFDF
  2824                           postinc2	equ	0xFDE
  2825                           postdec2	equ	0xFDD
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function ___awmod *****************
  2831 ;; Defined at:
  2832 ;;		line 8 in file "/home/bruno/Programs/microchip/xc8/v1.37/sources/common/awmod.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  dividend        2    0[COMRAM] int 
  2835 ;;  divisor         2    2[COMRAM] int 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;  sign            1    5[COMRAM] unsigned char 
  2838 ;;  counter         1    4[COMRAM] unsigned char 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  2    0[COMRAM] int 
  2841 ;; Registers used:
  2842 ;;		wreg, status,2, status,0
  2843 ;; Tracked objects:
  2844 ;;		On entry : 0/0
  2845 ;;		On exit  : 0/0
  2846 ;;		Unchanged: 0/0
  2847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2848 ;;      Params:         4       0       0       0       0       0       0
  2849 ;;      Locals:         2       0       0       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0       0       0
  2851 ;;      Totals:         6       0       0       0       0       0       0
  2852 ;;Total ram usage:        6 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_scheduler_round_robin
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text22
  2862  0004A8                     __ptext22:
  2863                           	opt stack 0
  2864  0004A8                     ___awmod:
  2865                           	opt stack 21
  2866                           
  2867                           ;incstack = 0
  2868  0004A8  0E00               	movlw	0
  2869  0004AA  6E06               	movwf	___awmod@sign,c
  2870  0004AC  AE02               	btfss	___awmod@dividend+1,7,c
  2871  0004AE  D006               	goto	i2l1116
  2872  0004B0  6C01               	negf	___awmod@dividend,c
  2873  0004B2  1E02               	comf	___awmod@dividend+1,f,c
  2874  0004B4  B0D8               	btfsc	status,0,c
  2875  0004B6  2A02               	incf	___awmod@dividend+1,f,c
  2876  0004B8  0E01               	movlw	1
  2877  0004BA  6E06               	movwf	___awmod@sign,c
  2878  0004BC                     i2l1116:
  2879  0004BC  AE04               	btfss	___awmod@divisor+1,7,c
  2880  0004BE  D004               	goto	i2l1120
  2881  0004C0  6C03               	negf	___awmod@divisor,c
  2882  0004C2  1E04               	comf	___awmod@divisor+1,f,c
  2883  0004C4  B0D8               	btfsc	status,0,c
  2884  0004C6  2A04               	incf	___awmod@divisor+1,f,c
  2885  0004C8                     i2l1120:
  2886  0004C8  5003               	movf	___awmod@divisor,w,c
  2887  0004CA  1004               	iorwf	___awmod@divisor+1,w,c
  2888  0004CC  B4D8               	btfsc	status,2,c
  2889  0004CE  D018               	goto	i2l1136
  2890  0004D0  0E01               	movlw	1
  2891  0004D2  6E05               	movwf	___awmod@counter,c
  2892  0004D4  D004               	goto	i2l1126
  2893  0004D6                     i2l1124:
  2894  0004D6  90D8               	bcf	status,0,c
  2895  0004D8  3603               	rlcf	___awmod@divisor,f,c
  2896  0004DA  3604               	rlcf	___awmod@divisor+1,f,c
  2897  0004DC  2A05               	incf	___awmod@counter,f,c
  2898  0004DE                     i2l1126:
  2899  0004DE  AE04               	btfss	___awmod@divisor+1,7,c
  2900  0004E0  D7FA               	goto	i2l1124
  2901  0004E2                     i2l1128:
  2902  0004E2  5003               	movf	___awmod@divisor,w,c
  2903  0004E4  5C01               	subwf	___awmod@dividend,w,c
  2904  0004E6  5004               	movf	___awmod@divisor+1,w,c
  2905  0004E8  5802               	subwfb	___awmod@dividend+1,w,c
  2906  0004EA  A0D8               	btfss	status,0,c
  2907  0004EC  D004               	goto	i2l1132
  2908  0004EE  5003               	movf	___awmod@divisor,w,c
  2909  0004F0  5E01               	subwf	___awmod@dividend,f,c
  2910  0004F2  5004               	movf	___awmod@divisor+1,w,c
  2911  0004F4  5A02               	subwfb	___awmod@dividend+1,f,c
  2912  0004F6                     i2l1132:
  2913  0004F6  90D8               	bcf	status,0,c
  2914  0004F8  3204               	rrcf	___awmod@divisor+1,f,c
  2915  0004FA  3203               	rrcf	___awmod@divisor,f,c
  2916  0004FC  2E05               	decfsz	___awmod@counter,f,c
  2917  0004FE  D7F1               	goto	i2l1128
  2918  000500                     i2l1136:
  2919  000500  5006               	movf	___awmod@sign,w,c
  2920  000502  B4D8               	btfsc	status,2,c
  2921  000504  D004               	goto	i2l1140
  2922  000506  6C01               	negf	___awmod@dividend,c
  2923  000508  1E02               	comf	___awmod@dividend+1,f,c
  2924  00050A  B0D8               	btfsc	status,0,c
  2925  00050C  2A02               	incf	___awmod@dividend+1,f,c
  2926  00050E                     i2l1140:
  2927  00050E  C001  F001         	movff	___awmod@dividend,?___awmod
  2928  000512  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2929  000516  0012               	return	
  2930  000518                     __end_of___awmod:
  2931                           	opt stack 0
  2932  0000                     tosu	equ	0xFFF
  2933                           tosh	equ	0xFFE
  2934                           tosl	equ	0xFFD
  2935                           stkptr	equ	0xFFC
  2936                           pclatu	equ	0xFFB
  2937                           pclath	equ	0xFFA
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           prodh	equ	0xFF4
  2943                           prodl	equ	0xFF3
  2944                           intcon	equ	0xFF2
  2945                           intcon2	equ	0xFF1
  2946                           postinc0	equ	0xFEE
  2947                           fsr0h	equ	0xFEA
  2948                           fsr0l	equ	0xFE9
  2949                           wreg	equ	0xFE8
  2950                           postdec1	equ	0xFE5
  2951                           fsr1h	equ	0xFE2
  2952                           fsr1l	equ	0xFE1
  2953                           bsr	equ	0xFE0
  2954                           indf2	equ	0xFDF
  2955                           postinc2	equ	0xFDE
  2956                           postdec2	equ	0xFDD
  2957                           fsr2h	equ	0xFDA
  2958                           fsr2l	equ	0xFD9
  2959                           status	equ	0xFD8
  2960                           tosu	equ	0xFFF
  2961                           tosh	equ	0xFFE
  2962                           tosl	equ	0xFFD
  2963                           stkptr	equ	0xFFC
  2964                           pclatu	equ	0xFFB
  2965                           pclath	equ	0xFFA
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           prodh	equ	0xFF4
  2971                           prodl	equ	0xFF3
  2972                           intcon	equ	0xFF2
  2973                           intcon2	equ	0xFF1
  2974                           postinc0	equ	0xFEE
  2975                           fsr0h	equ	0xFEA
  2976                           fsr0l	equ	0xFE9
  2977                           wreg	equ	0xFE8
  2978                           postdec1	equ	0xFE5
  2979                           fsr1h	equ	0xFE2
  2980                           fsr1l	equ	0xFE1
  2981                           bsr	equ	0xFE0
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989                           	psect	text23
  2990  000000                     __ptext23:
  2991                           	opt stack 0
  2992                           tosu	equ	0xFFF
  2993                           tosh	equ	0xFFE
  2994                           tosl	equ	0xFFD
  2995                           stkptr	equ	0xFFC
  2996                           pclatu	equ	0xFFB
  2997                           pclath	equ	0xFFA
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           intcon	equ	0xFF2
  3005                           intcon2	equ	0xFF1
  3006                           postinc0	equ	0xFEE
  3007                           fsr0h	equ	0xFEA
  3008                           fsr0l	equ	0xFE9
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1h	equ	0xFE2
  3012                           fsr1l	equ	0xFE1
  3013                           bsr	equ	0xFE0
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           postdec2	equ	0xFDD
  3017                           fsr2h	equ	0xFDA
  3018                           fsr2l	equ	0xFD9
  3019                           status	equ	0xFD8
  3020                           
  3021                           	psect	rparam
  3022  0000                     tosu	equ	0xFFF
  3023                           tosh	equ	0xFFE
  3024                           tosl	equ	0xFFD
  3025                           stkptr	equ	0xFFC
  3026                           pclatu	equ	0xFFB
  3027                           pclath	equ	0xFFA
  3028                           tblptru	equ	0xFF8
  3029                           tblptrh	equ	0xFF7
  3030                           tblptrl	equ	0xFF6
  3031                           tablat	equ	0xFF5
  3032                           prodh	equ	0xFF4
  3033                           prodl	equ	0xFF3
  3034                           intcon	equ	0xFF2
  3035                           intcon2	equ	0xFF1
  3036                           postinc0	equ	0xFEE
  3037                           fsr0h	equ	0xFEA
  3038                           fsr0l	equ	0xFE9
  3039                           wreg	equ	0xFE8
  3040                           postdec1	equ	0xFE5
  3041                           fsr1h	equ	0xFE2
  3042                           fsr1l	equ	0xFE1
  3043                           bsr	equ	0xFE0
  3044                           indf2	equ	0xFDF
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051                           	psect	temp
  3052  000044                     btemp:
  3053                           	opt stack 0
  3054  000044                     	ds	1
  3055  0000                     int$flags	set	btemp
  3056                           tosu	equ	0xFFF
  3057                           tosh	equ	0xFFE
  3058                           tosl	equ	0xFFD
  3059                           stkptr	equ	0xFFC
  3060                           pclatu	equ	0xFFB
  3061                           pclath	equ	0xFFA
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon2	equ	0xFF1
  3070                           postinc0	equ	0xFEE
  3071                           fsr0h	equ	0xFEA
  3072                           fsr0l	equ	0xFE9
  3073                           wreg	equ	0xFE8
  3074                           postdec1	equ	0xFE5
  3075                           fsr1h	equ	0xFE2
  3076                           fsr1l	equ	0xFE1
  3077                           bsr	equ	0xFE0
  3078                           indf2	equ	0xFDF
  3079                           postinc2	equ	0xFDE
  3080                           postdec2	equ	0xFDD
  3081                           fsr2h	equ	0xFDA
  3082                           fsr2l	equ	0xFD9
  3083                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         424
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     62      67
    BANK0           128     16     122
    BANK1           256      6       6
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    dispatcher.callback	PTR FTN()void  size(2) Largest target is 0
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp_S449dispatcher_s$callback	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    ?_scheduler_round_robin.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    ?_dispatcher_add_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_running@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_running@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    task_ready@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_ready@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    task_create@callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_3(), task_2(), task_1(), 

    task_create@handle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    task_create@handle	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    sp__scheduler_round_robin.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__scheduler_round_robin	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher.tasks.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    scheduler_round_robin@next.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    scheduler_round_robin@next	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher_change_context_isr@next.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__dispatcher.callback	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher_change_context_isr@next	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    sp__dispatcher_add_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    sp__dispatcher_add_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    dispatcher_add_task@task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), dispatcher(BIGRAM[317]), 

    dispatcher.running.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    idle.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@n_stack	PTR struct task_context_stack_s size(2) Largest target is 2
		 -> dispatcher.stack(BIGRAM[94]), idle.stack(BANK0[94]), dispatcher.context.stack(BIGRAM[94]), idle.context.stack(BANK0[94]), 
		 -> global_isr@n_context(COMRAM[2]), 

    global_isr@n_context	PTR struct task_context_s size(2) Largest target is 318
		 -> dispatcher.context(BIGRAM[97]), idle.context(BANK0[97]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    global_isr@n_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@n_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    global_isr@p_stack	PTR struct task_context_stack_s size(2) Largest target is 2
		 -> dispatcher.stack(BIGRAM[94]), idle.stack(BANK0[94]), dispatcher.context.stack(BIGRAM[94]), idle.context.stack(BANK0[94]), 
		 -> global_isr@p_context(COMRAM[2]), 

    global_isr@p_context	PTR struct task_context_s size(2) Largest target is 318
		 -> dispatcher.context(BIGRAM[97]), idle.context(BANK0[97]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    S442task_s$callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@p_task.callback	PTR FTN()void  size(2) Largest target is 1
		 -> task_idle_callback(), task_3(), task_2(), task_1(), 

    global_isr@p_task	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    S449dispatcher_s$callback	PTR FTN()PTR struct task_s size(2) Largest target is 3
		 -> scheduler_round_robin(), 

    dispatcher.callback	PTR FTN()PTR struct task_s size(2) Largest target is 3
		 -> scheduler_round_robin(), 

    S449dispatcher_s$running	PTR struct task_s size(2) Largest target is 318
		 -> idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    dispatcher.running	PTR struct task_s size(2) Largest target is 318
		 -> dispatcher.tasks(BIGRAM[312]), idle(BANK0[104]), dispatcher(BIGRAM[317]), 

    timer0_init@callback	PTR FTN()void  size(2) Largest target is 1
		 -> dispatcher_change_context_isr(), 

    _timer0_callback	PTR FTN()void  size(2) Largest target is 1
		 -> dispatcher_change_context_isr(), Absolute function(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _task_1 in COMRAM

    None.

Critical Paths under _task_2 in COMRAM

    None.

Critical Paths under _task_3 in COMRAM

    None.

Critical Paths under _task_idle_callback in COMRAM

    None.

Critical Paths under _global_isr in COMRAM

    _timer0_isr->_dispatcher_change_context_isr
    _dispatcher_change_context_isr->_scheduler_round_robin
    _scheduler_round_robin->___awmod
    _scheduler_round_robin->___wmul

Critical Paths under _main in BANK0

    _main->_task_create
    _task_create->_dispatcher_add_task
    _dispatcher_start->_timer0_init

Critical Paths under _task_1 in BANK0

    None.

Critical Paths under _task_2 in BANK0

    None.

Critical Paths under _task_3 in BANK0

    None.

Critical Paths under _task_idle_callback in BANK0

    None.

Critical Paths under _global_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_task_create

Critical Paths under _task_1 in BANK1

    None.

Critical Paths under _task_2 in BANK1

    None.

Critical Paths under _task_3 in BANK1

    None.

Critical Paths under _task_idle_callback in BANK1

    None.

Critical Paths under _global_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _task_1 in BANK2

    None.

Critical Paths under _task_2 in BANK2

    None.

Critical Paths under _task_3 in BANK2

    None.

Critical Paths under _task_idle_callback in BANK2

    None.

Critical Paths under _global_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _task_1 in BANK3

    None.

Critical Paths under _task_2 in BANK3

    None.

Critical Paths under _task_3 in BANK3

    None.

Critical Paths under _task_idle_callback in BANK3

    None.

Critical Paths under _global_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _task_1 in BANK4

    None.

Critical Paths under _task_2 in BANK4

    None.

Critical Paths under _task_3 in BANK4

    None.

Critical Paths under _task_idle_callback in BANK4

    None.

Critical Paths under _global_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _task_1 in BANK5

    None.

Critical Paths under _task_2 in BANK5

    None.

Critical Paths under _task_3 in BANK5

    None.

Critical Paths under _task_idle_callback in BANK5

    None.

Critical Paths under _global_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1839
                          _nojo_init
                         _nojo_start
                        _task_create
 ---------------------------------------------------------------------------------
 (1) _task_create                                         11     5      6    1569
                                             11 BANK0      5     5      0
                                              0 BANK1      6     0      6
                _dispatcher_add_task
                         _task_ready
 ---------------------------------------------------------------------------------
 (2) _task_ready                                           2     0      2     204
                                              6 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _dispatcher_add_task                                  5     3      2      23
                                              6 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _nojo_start                                           0     0      0     270
                   _dispatcher_start
 ---------------------------------------------------------------------------------
 (2) _dispatcher_start                                     0     0      0     270
                        _timer0_init
 ---------------------------------------------------------------------------------
 (3) _timer0_init                                          4     0      4     270
                                              6 BANK0      4     0      4
                       _timer0_reset
 ---------------------------------------------------------------------------------
 (4) _timer0_reset                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _nojo_init                                            0     0      0       0
                    _dispatcher_init
 ---------------------------------------------------------------------------------
 (2) _dispatcher_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_1                                               3     3      0      30
                                             59 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_2                                               3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_3                                               3     3      0      46
                                              3 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _task_idle_callback                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _global_isr                                          35    35      0    2146
                                             24 COMRAM    35    35      0
                         _timer0_isr
 ---------------------------------------------------------------------------------
 (7) _timer0_isr                                           0     0      0    1600
                   Absolute function *
      _dispatcher_change_context_isr *
                     i2_timer0_reset
 ---------------------------------------------------------------------------------
 (8) i2_timer0_reset                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _dispatcher_change_context_isr                        2     2      0    1600
                                             22 COMRAM     2     2      0
              _scheduler_round_robin *
                       _task_running
                       i2_task_ready
 ---------------------------------------------------------------------------------
 (9) i2_task_ready                                         2     0      2      48
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _task_running                                         2     0      2     111
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _scheduler_round_robin                               16    14      2    1418
                                              6 COMRAM    16    14      2
                            ___awmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     693
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___awmod                                             6     2      4     474
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _nojo_init
     _dispatcher_init
   _nojo_start
     _dispatcher_start
       _timer0_init
         _timer0_reset
   _task_create
     _dispatcher_add_task
     _task_ready

 _task_1 (ROOT)

 _task_2 (ROOT)

 _task_3 (ROOT)

 _task_idle_callback (ROOT)

 _global_isr (ROOT)
   _timer0_isr
     Absolute function(Fake) *
     _dispatcher_change_context_isr *
       _scheduler_round_robin *
         ___awmod
         ___wmul
       _task_running *
       i2_task_ready *
     i2_timer0_reset *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     13D      17       20.7%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      6       6       7        2.3%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3E      43       1       53.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      15        0.0%
DATA                 0      0     200       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Nov  1 16:53:20 2016

                                    l41 04A4                     ___wmul@multiplicand 0003  
                                   l141 07CA                                     l994 0638  
                                   l998 0656                                     _BSR 000FE0  
                          ___awmod@sign 0006                                     prod 000FF3  
                                   tosl 000FFD                                     wreg 000FE8  
                  __end_ofi2_task_ready 078A          ?_dispatcher_change_context_isr 0001  
                          __CFG_WDT$OFF 000000                                    l1440 0590  
                                  l1290 051C                                    l1436 0566  
                                  l1294 0548                                    _TMR0 000FD6  
                                  _TOSH 000FFE                                    _TOSL 000FFD  
                                  _WREG 000FE8                                    _TOSU 000FFF  
                                  __BSR 003F                        global_isr@n_task 0031  
                                  _idle 0080                                    _main 0430  
                      global_isr@p_task 002F                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  btemp 0044                                    pclat 000FFA  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0016             scheduler_round_robin@offset 000D  
                          ___param_bank 000010                        ?_dispatcher_init 0001  
                                 ?_main 0001                         __end_of___awmod 0518  
                                 i2l103 0218                                   u16_20 0642  
                                 u17_28 0644                                   u54_20 0528  
                                 u55_28 052C                                   u65_20 0572  
                                 u66_28 0576                             global_isr@i 002E  
                        i2_timer0_reset 07B6                                   __WREG 0041  
                     global_isr@n_stack 0038                       global_isr@p_stack 0033  
                                 pclath 000FFA                                   tablat 000FF5  
                                 status 000FD8                         __initialization 066A  
               ??_scheduler_round_robin 0009                            __end_of_main 04A8  
                   task_create@callback 0104                                  ??_main 00F8  
                __end_ofi2_timer0_reset 07C2                           __activetblptr 000002  
                     ?_dispatcher_start 0001                     _dispatcher_add_task 06D0  
                    ??_dispatcher_start 00F2                                  i2l1120 04C8  
                                i2l1200 035C                                  i2l1140 050E  
                                i2l1132 04F6                                  i2l1124 04D6  
                                i2l1116 04BC                                  i2l1204 0362  
                                i2l1126 04DE                                  i2l1128 04E2  
                                i2l1136 0500                                  i2l1332 00B2  
                                i2l1190 02D0                                  i2l1182 02BA  
                                i2l1174 026A                                  i2l1336 0118  
                                i2l1194 02E0                                  i2l1186 02C0  
                                i2l1178 027A                                  i2l1338 0124  
                                i2l1356 017E                                  i2l1364 0206  
                                _STATUS 000FD8                                  _STKPTR 000FFC  
                          ?_task_create 0100                    ?_dispatcher_add_task 00EE  
                   task_create@priority 0102                                  ___wmul 06FE  
                             ??___awmod 0005                            ?_timer0_init 00EE  
                                clear_0 0672                                  clear_1 0684  
                                _task_1 0634                                  _task_2 0562  
                                _task_3 0518                         ___awmod@divisor 0003  
                 __size_ofi2_task_ready 0012                         ___awmod@counter 0005  
                       ?i2_timer0_reset 0001                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                    _task_idle_callback 07CA                              __accesstop 0080  
               __end_of__initialization 0690                         __CFG_PBADEN$OFF 000000  
                         ___rparam_used 000001                   ??_dispatcher_add_task 00F0  
                   ?_task_idle_callback 0001                            i2_task_ready 0778  
                        __pcstackCOMRAM 0001                         __CFG_OSC$INTIO7 000000  
                  ??_task_idle_callback 00EE                  scheduler_round_robin@i 0015  
                scheduler_round_robin@j 0011                              __pbssBANK0 0080  
                            __pnvCOMRAM 0042         ??_dispatcher_change_context_isr 0017  
                               ?___wmul 0001                      __size_of_nojo_init 000E  
                               ?_task_1 0001                                 ?_task_2 0001  
                               ?_task_3 0001                                 i2u63_40 01C0  
                               i2u63_45 01B8                                 i2u47_48 05B2  
                               i2u47_49 05C6                                 i2u49_48 0734  
                            _dispatcher 0106                              _global_isr 0008  
                               __STATUS 0040                                 __Hparam 0000  
                               __Lparam 0000                    __size_of_task_create 00C4  
                         ?_task_running 0001                     global_isr@n_context 003A  
                               ___awmod 04A8                         __size_of___wmul 0026  
        __size_of_scheduler_round_robin 010E           __end_of_scheduler_round_robin 036C  
                   global_isr@p_context 0036                                 __pcinit 066A  
                               __ramtop 0600                         __size_of_task_1 0036  
                       __size_of_task_2 0048                         __size_of_task_3 004A  
                  __size_of_timer0_init 0032                           ?_timer0_reset 0001  
                               __ptext0 0430                                 __ptext1 036C  
                               __ptext2 0764                                 __ptext3 06D0  
                               __ptext4 07C2                                 __ptext5 0748  
                               __ptext6 069E                                 __ptext7 07AA  
                               __ptext8 079C                                 __ptext9 05F0  
                             _T0CONbits 000FD5                        ___awmod@dividend 0001  
              __size_of_dispatcher_init 0044                          __pintcode_body 001A  
                  end_of_initialization 0690                       __end_of_nojo_init 07AA  
                         __Lmediumconst 0000                                 int_func 001A  
             __size_of_dispatcher_start 001C                                 task_1@i 003D  
                               task_2@i 00E9                                 task_3@i 00EC  
                            _nojo_start 07C2                          ??_task_running 0003  
                            _task_ready 0764                                 postdec1 000FE5  
                               postdec2 000FDD                              _timer0_isr 0724  
                               postinc0 000FEE                                 postinc2 000FDE  
                      ??i2_timer0_reset 0001                          ??_timer0_reset 00EE  
                             _PORTDbits 000F83                               _TRISDbits 000F95  
                           ?_global_isr 0001                         global_isr@i_581 0035  
            scheduler_round_robin@i_743 0013                        task_ready@handle 00EE  
                     task_create@handle 00F6                          __end_of___wmul 0724  
                        __end_of_task_1 066A                          __end_of_task_2 05AA  
                        __end_of_task_3 0562                     start_initialization 066A  
           __end_of_dispatcher_add_task 06FE                       ??_dispatcher_init 00EE  
                           ?_nojo_start 0001                             ?_task_ready 00EE  
                           ?_timer0_isr 0001                                ??___wmul 0005  
                              ??_task_1 003C                                ??_task_2 00E8  
                              ??_task_3 00EB                     __size_of_global_isr 0256  
                           __pbssBIGRAM 0106                             __pbssCOMRAM 003F  
           __size_of_task_idle_callback 0004                           __pcstackBANK0 00E8  
                         __pcstackBANK1 0100                    __end_of_task_running 079C  
                  __end_of_timer0_reset 07B6                        _dispatcher_start 0748  
                             __pnvBANK0 00F8                           task_create@id 0100  
                             __pintcode 0008                                ?___awmod 0001  
                   __size_of_nojo_start 0008                     __size_of_task_ready 0014  
                   __size_of_timer0_isr 0024                          ___wmul@product 0005  
                         ??_task_create 00F3                                _LATDbits 000F8C  
                             _nojo_init 079C                           ??_timer0_init 00F2  
                     ___wmul@multiplier 0001                   _scheduler_round_robin 025E  
                           _INTCON2bits 000FF1                            ??_global_isr 0019  
                            ?_nojo_init 0001                                __Hrparam 0000  
                         ?i2_task_ready 0001                                __Lrparam 0000  
                   __end_of_task_create 0430                        __size_of___awmod 0070  
                 __size_of_task_running 0012                      __end_of_global_isr 025E  
                       _dispatcher_init 05F0                     __end_of_timer0_init 06D0  
                    task_running@handle 0001                 dispatcher_add_task@task 00F1  
                              __ptext10 0634                                __ptext11 0562  
                              __ptext20 025E                                __ptext12 0518  
                              __ptext21 06FE                                __ptext13 07CA  
                              __ptext22 04A8                                __ptext23 0000  
                              __ptext15 0724                                __ptext16 07B6  
                              __ptext17 05AA                                __ptext18 0778  
                              __ptext19 078A                   __size_of_timer0_reset 000C  
                         __size_of_main 0078                            ??_nojo_start 00F2  
                        ??i2_task_ready 0003                            ??_task_ready 00F0  
                          _task_running 078A                            ??_timer0_isr 0019  
                              int$flags 0044                     timer0_init@callback 00F0  
                    i2task_ready@handle 0001                     timer0_init@delay_us 00EE  
                ?_scheduler_round_robin 0007                __end_of_dispatcher_start 0764  
 __end_of_dispatcher_change_context_isr 05F0  __size_of_dispatcher_change_context_isr 0046  
         _dispatcher_change_context_isr 05AA                            _timer0_reset 07AA  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
               __size_ofi2_timer0_reset 000C                      __end_of_nojo_start 07CA  
                    __end_of_task_ready 0778       dispatcher_change_context_isr@next 0017  
                              intlevel1 0000                                intlevel2 0000  
                    __end_of_timer0_isr 0748                             _task_create 036C  
                           ??_nojo_init 00EE                              _OSCCONbits 000FD3  
          __size_of_dispatcher_add_task 002E                 __end_of_dispatcher_init 0634  
                           _timer0_init 069E              __end_of_task_idle_callback 07CE  
             scheduler_round_robin@next 000F                        __timer0_callback 0042  
                      __timer0_delay_us 00F8  
